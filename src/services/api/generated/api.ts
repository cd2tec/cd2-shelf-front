/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Unitrier
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://example.com/api/v1".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum AcaoVendaModelo {
    INDEFINIDO = <any> 'INDEFINIDO',
    ACAO = <any> 'ACAO',
    COMBATE = <any> 'COMBATE',
    RECUPERACAO = <any> 'RECUPERACAO'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum AuthenticateUsuarioRequestGrantType {
    UNDEFINED = <any> 'UNDEFINED',
    PASSWORD = <any> 'PASSWORD',
    REFRESHTOKEN = <any> 'REFRESH_TOKEN'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum AuthenticateUsuarioResponseTokenType {
    UNDEFINED = <any> 'UNDEFINED',
    BEARER = <any> 'BEARER'
}

/**
 * 
 * @export
 * @interface CalcularCategoriasProcessoResponseCategorias
 */
export interface CalcularCategoriasProcessoResponseCategorias {
    /**
     * 
     * @type {Array<UnitrierCalcularCategoriasProcessoResponseCategoria>}
     * @memberof CalcularCategoriasProcessoResponseCategorias
     */
    categorias?: Array<UnitrierCalcularCategoriasProcessoResponseCategoria>;
    /**
     * 
     * @type {number}
     * @memberof CalcularCategoriasProcessoResponseCategorias
     */
    saldo_lucratividade?: number;
    /**
     * 
     * @type {number}
     * @memberof CalcularCategoriasProcessoResponseCategorias
     */
    valor_venda?: number;
    /**
     * 
     * @type {number}
     * @memberof CalcularCategoriasProcessoResponseCategorias
     */
    valor_lucro?: number;
    /**
     * 
     * @type {number}
     * @memberof CalcularCategoriasProcessoResponseCategorias
     */
    margem_minima?: number;
    /**
     * 
     * @type {number}
     * @memberof CalcularCategoriasProcessoResponseCategorias
     */
    margem_ideal?: number;
    /**
     * 
     * @type {number}
     * @memberof CalcularCategoriasProcessoResponseCategorias
     */
    margem_atual?: number;
    /**
     * 
     * @type {number}
     * @memberof CalcularCategoriasProcessoResponseCategorias
     */
    margem_media?: number;
    /**
     * 
     * @type {number}
     * @memberof CalcularCategoriasProcessoResponseCategorias
     */
    quantidade?: number;
}

/**
 * 
 * @export
 * @interface CalcularCustosResponseLucro
 */
export interface CalcularCustosResponseLucro {
    /**
     * 
     * @type {number}
     * @memberof CalcularCustosResponseLucro
     */
    percentual?: number;
    /**
     * 
     * @type {number}
     * @memberof CalcularCustosResponseLucro
     */
    valor?: number;
}

/**
 * 
 * @export
 * @interface CalcularMarcasCategoriaResponseMarca
 */
export interface CalcularMarcasCategoriaResponseMarca {
    /**
     * 
     * @type {string}
     * @memberof CalcularMarcasCategoriaResponseMarca
     */
    nome?: string;
    /**
     * 
     * @type {string}
     * @memberof CalcularMarcasCategoriaResponseMarca
     */
    curva?: string;
    /**
     * 
     * @type {UnitrierCalcularMarcasCategoriaResponseStats}
     * @memberof CalcularMarcasCategoriaResponseMarca
     */
    stats?: UnitrierCalcularMarcasCategoriaResponseStats;
    /**
     * 
     * @type {Array<UnitrierCalcularMarcasCategoriaResponseProduto>}
     * @memberof CalcularMarcasCategoriaResponseMarca
     */
    produtos?: Array<UnitrierCalcularMarcasCategoriaResponseProduto>;
}

/**
 * 
 * @export
 * @interface CalcularMarcasCategoriaResponseProdutoUnidade
 */
export interface CalcularMarcasCategoriaResponseProdutoUnidade {
    /**
     * 
     * @type {UnitrierProdutoUnidade}
     * @memberof CalcularMarcasCategoriaResponseProdutoUnidade
     */
    unidade?: UnitrierProdutoUnidade;
    /**
     * 
     * @type {string}
     * @memberof CalcularMarcasCategoriaResponseProdutoUnidade
     */
    curva?: string;
    /**
     * 
     * @type {UnitrierCalcularMarcasCategoriaResponseStats}
     * @memberof CalcularMarcasCategoriaResponseProdutoUnidade
     */
    stats?: UnitrierCalcularMarcasCategoriaResponseStats;
}

/**
 * 
 * @export
 * @interface CalcularSugestaoPrecoTipoAcaoVendaResponseSugestao
 */
export interface CalcularSugestaoPrecoTipoAcaoVendaResponseSugestao {
    /**
     * 
     * @type {number}
     * @memberof CalcularSugestaoPrecoTipoAcaoVendaResponseSugestao
     */
    percentual?: number;
    /**
     * 
     * @type {number}
     * @memberof CalcularSugestaoPrecoTipoAcaoVendaResponseSugestao
     */
    valor?: number;
}

/**
 * 
 * @export
 * @interface CreateAcaoVendaRequestCombateProduto
 */
export interface CreateAcaoVendaRequestCombateProduto {
    /**
     * 
     * @type {UnitrierAcaoVendaProduto}
     * @memberof CreateAcaoVendaRequestCombateProduto
     */
    produto?: UnitrierAcaoVendaProduto;
    /**
     * 
     * @type {UnitrierAcaoVendaProduto}
     * @memberof CreateAcaoVendaRequestCombateProduto
     */
    referencia?: UnitrierAcaoVendaProduto;
}

/**
 * 
 * @export
 * @interface FluxoAutorizacao
 */
export interface FluxoAutorizacao {
    /**
     * 
     * @type {string}
     * @memberof FluxoAutorizacao
     */
    data?: string;
    /**
     * 
     * @type {UnitrierUsuario}
     * @memberof FluxoAutorizacao
     */
    usuario?: UnitrierUsuario;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum FluxoOrigem {
    ORIGEMUNDEFINED = <any> 'ORIGEM_UNDEFINED',
    PESQUISA = <any> 'PESQUISA',
    ACAOVENDA = <any> 'ACAO_VENDA',
    GESTAOCATEGORIA = <any> 'GESTAO_CATEGORIA',
    AQUISICAO = <any> 'AQUISICAO',
    GESTAOCATEGORIACATEGORIA = <any> 'GESTAO_CATEGORIA_CATEGORIA'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum FluxoProdutoUnidadeStatusSincronizacao {
    STATUSSINCRONIZACAOUNDEFINED = <any> 'STATUS_SINCRONIZACAO_UNDEFINED',
    SINCRONIZACAOPENDENTE = <any> 'SINCRONIZACAO_PENDENTE',
    RODANDO = <any> 'RODANDO',
    ERRO = <any> 'ERRO',
    CONCLUIDO = <any> 'CONCLUIDO'
}

/**
 * 
 * @export
 * @interface FluxoProdutoUpdateAlteracaoCampo
 */
export interface FluxoProdutoUpdateAlteracaoCampo {
    /**
     * 
     * @type {string}
     * @memberof FluxoProdutoUpdateAlteracaoCampo
     */
    campo?: string;
    /**
     * 
     * @type {string}
     * @memberof FluxoProdutoUpdateAlteracaoCampo
     */
    de?: string;
    /**
     * 
     * @type {string}
     * @memberof FluxoProdutoUpdateAlteracaoCampo
     */
    para?: string;
    /**
     * 
     * @type {string}
     * @memberof FluxoProdutoUpdateAlteracaoCampo
     */
    tipo?: string;
    /**
     * 
     * @type {string}
     * @memberof FluxoProdutoUpdateAlteracaoCampo
     */
    descricao?: string;
}

/**
 * 
 * @export
 * @interface FluxoProdutoUpdatePreco
 */
export interface FluxoProdutoUpdatePreco {
    /**
     * 
     * @type {number}
     * @memberof FluxoProdutoUpdatePreco
     */
    valor?: number;
    /**
     * 
     * @type {number}
     * @memberof FluxoProdutoUpdatePreco
     */
    margem?: number;
    /**
     * 
     * @type {number}
     * @memberof FluxoProdutoUpdatePreco
     */
    fator?: number;
    /**
     * 
     * @type {number}
     * @memberof FluxoProdutoUpdatePreco
     */
    margem_minima?: number;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum FornecedorTipoInscricao {
    INDEFINIDO = <any> 'INDEFINIDO',
    PESSOAJURIDICA = <any> 'PESSOA_JURIDICA',
    PESSOAFISICA = <any> 'PESSOA_FISICA'
}

/**
 * 
 * @export
 * @interface GerarAnalisePerformanceGestaoCategoriaResponseResumoDesempenho
 */
export interface GerarAnalisePerformanceGestaoCategoriaResponseResumoDesempenho {
    /**
     * 
     * @type {UnitrierCategoria}
     * @memberof GerarAnalisePerformanceGestaoCategoriaResponseResumoDesempenho
     */
    categoria?: UnitrierCategoria;
    /**
     * 
     * @type {number}
     * @memberof GerarAnalisePerformanceGestaoCategoriaResponseResumoDesempenho
     */
    variacao_valor_venda?: number;
    /**
     * 
     * @type {number}
     * @memberof GerarAnalisePerformanceGestaoCategoriaResponseResumoDesempenho
     */
    variacao_valor_lucro?: number;
    /**
     * 
     * @type {number}
     * @memberof GerarAnalisePerformanceGestaoCategoriaResponseResumoDesempenho
     */
    variacao_percentual_lucro?: number;
    /**
     * 
     * @type {number}
     * @memberof GerarAnalisePerformanceGestaoCategoriaResponseResumoDesempenho
     */
    quantidade_dias?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GerarAnalisePerformanceGestaoCategoriaResponseResumoDesempenho
     */
    positivo?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GerarAnalisePerformanceGestaoCategoriaResponseResumoDesempenho
     */
    justificativa?: string;
}

/**
 * 
 * @export
 * @interface GerarAnalisePerformanceGestaoCategoriaResponseStatsRecurso
 */
export interface GerarAnalisePerformanceGestaoCategoriaResponseStatsRecurso {
    /**
     * 
     * @type {UnitrierGerarAnalisePerformanceGestaoCategoriaResponseAnalise}
     * @memberof GerarAnalisePerformanceGestaoCategoriaResponseStatsRecurso
     */
    referencia?: UnitrierGerarAnalisePerformanceGestaoCategoriaResponseAnalise;
    /**
     * 
     * @type {UnitrierGerarAnalisePerformanceGestaoCategoriaResponseAnalise}
     * @memberof GerarAnalisePerformanceGestaoCategoriaResponseStatsRecurso
     */
    analise?: UnitrierGerarAnalisePerformanceGestaoCategoriaResponseAnalise;
    /**
     * 
     * @type {UnitrierGerarAnalisePerformanceGestaoCategoriaResponseAnalise}
     * @memberof GerarAnalisePerformanceGestaoCategoriaResponseStatsRecurso
     */
    comparativo?: UnitrierGerarAnalisePerformanceGestaoCategoriaResponseAnalise;
    /**
     * 
     * @type {number}
     * @memberof GerarAnalisePerformanceGestaoCategoriaResponseStatsRecurso
     */
    crescimento?: number;
    /**
     * 
     * @type {number}
     * @memberof GerarAnalisePerformanceGestaoCategoriaResponseStatsRecurso
     */
    queda?: number;
}

/**
 * 
 * @export
 * @interface GestaoCategoriaCategoriaStats
 */
export interface GestaoCategoriaCategoriaStats {
    /**
     * 
     * @type {GestaoCategoriaCategoriaStatsStatus}
     * @memberof GestaoCategoriaCategoriaStats
     */
    status?: GestaoCategoriaCategoriaStatsStatus;
    /**
     * 
     * @type {UnitrierFluxo}
     * @memberof GestaoCategoriaCategoriaStats
     */
    fluxo?: UnitrierFluxo;
    /**
     * 
     * @type {string}
     * @memberof GestaoCategoriaCategoriaStats
     */
    iniciado_at?: string;
    /**
     * 
     * @type {string}
     * @memberof GestaoCategoriaCategoriaStats
     */
    finalizado_at?: string;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum GestaoCategoriaCategoriaStatsStatus {
    StatusUNKNOWN = <any> 'Status_UNKNOWN',
    NAOINICIADO = <any> 'NAO_INICIADO',
    INICIADO = <any> 'INICIADO',
    FINALIZADO = <any> 'FINALIZADO'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum GestaoCategoriaRankingCurva {
    UNSPECIFIED = <any> 'UNSPECIFIED',
    VENDA = <any> 'VENDA',
    LUCRO = <any> 'LUCRO'
}

/**
 * 
 * @export
 * @interface GetHistoricoProdutoFluxosResponseHistorico
 */
export interface GetHistoricoProdutoFluxosResponseHistorico {
    /**
     * 
     * @type {UnitrierFluxo}
     * @memberof GetHistoricoProdutoFluxosResponseHistorico
     */
    fluxo?: UnitrierFluxo;
    /**
     * 
     * @type {UnitrierFluxoProdutoUnidade}
     * @memberof GetHistoricoProdutoFluxosResponseHistorico
     */
    produto_unidade?: UnitrierFluxoProdutoUnidade;
}

/**
 * paths: \"f.a\"     paths: \"f.b.d\"  Here `f` represents a field in some root message, `a` and `b` fields in the message found in `f`, and `d` a field found in the message in `f.b`.  Field masks are used to specify a subset of fields that should be returned by a get operation or modified by an update operation. Field masks also have a custom JSON encoding (see below).  # Field Masks in Projections  When used in the context of a projection, a response message or sub-message is filtered by the API to only contain those fields as specified in the mask. For example, if the mask in the previous example is applied to a response message as follows:      f {       a : 22       b {         d : 1         x : 2       }       y : 13     }     z: 8  The result will not contain specific values for fields x,y and z (their value will be set to the default, and omitted in proto text output):       f {       a : 22       b {         d : 1       }     }  A repeated field is not allowed except at the last position of a paths string.  If a FieldMask object is not present in a get operation, the operation applies to all fields (as if a FieldMask of all fields had been specified).  Note that a field mask does not necessarily apply to the top-level response message. In case of a REST get operation, the field mask applies directly to the response, but in case of a REST list operation, the mask instead applies to each individual message in the returned resource list. In case of a REST custom method, other definitions may be used. Where the mask applies will be clearly documented together with its declaration in the API.  In any case, the effect on the returned resource/resources is required behavior for APIs.  # Field Masks in Update Operations  A field mask in update operations specifies which fields of the targeted resource are going to be updated. The API is required to only change the values of the fields as specified in the mask and leave the others untouched. If a resource is passed in to describe the updated values, the API ignores the values of all fields not covered by the mask.  If a repeated field is specified for an update operation, new values will be appended to the existing repeated field in the target resource. Note that a repeated field is only allowed in the last position of a `paths` string.  If a sub-message is specified in the last position of the field mask for an update operation, then new value will be merged into the existing sub-message in the target resource.  For example, given the target message:      f {       b {         d: 1         x: 2       }       c: [1]     }  And an update message:      f {       b {         d: 10       }       c: [2]     }  then if the field mask is:   paths: [\"f.b\", \"f.c\"]  then the result will be:      f {       b {         d: 10         x: 2       }       c: [1, 2]     }  An implementation may provide options to override this default behavior for repeated and message fields.  In order to reset a field's value to the default, the field must be in the mask and set to the default value in the provided resource. Hence, in order to reset all fields of a resource, provide a default instance of the resource and set all fields in the mask, or do not provide a mask as described below.  If a field mask is not present on update, the operation applies to all fields (as if a field mask of all fields has been specified). Note that in the presence of schema evolution, this may mean that fields the client does not know and has therefore not filled into the request will be reset to their default. If this is unwanted behavior, a specific service may require a client to always specify a field mask, producing an error if not.  As with get operations, the location of the resource which describes the updated values in the request message depends on the operation kind. In any case, the effect of the field mask is required to be honored by the API.  ## Considerations for HTTP REST  The HTTP kind of an update operation which uses a field mask must be set to PATCH instead of PUT in order to satisfy HTTP semantics (PUT must only be used for full updates).  # JSON Encoding of Field Masks  In JSON, a field mask is encoded as a single string where paths are separated by a comma. Fields name in each path are converted to/from lower-camel naming conventions.  As an example, consider the following message declarations:      message Profile {       User user = 1;       Photo photo = 2;     }     message User {       string display_name = 1;       string address = 2;     }  In proto a field mask for `Profile` may look as such:      mask {       paths: \"user.display_name\"       paths: \"photo\"     }  In JSON, the same mask is represented as below:      {       mask: \"user.displayName,photo\"     }  # Field Masks and Oneof Fields  Field masks treat fields in oneofs just as regular fields. Consider the following message:      message SampleMessage {       oneof test_oneof {         string name = 4;         SubMessage sub_message = 9;       }     }  The field mask can be:      mask {       paths: \"name\"     }  Or:      mask {       paths: \"sub_message\"     }  Note that oneof type names (\"test_oneof\" in this case) cannot be used in paths.  ## Field Mask Verification  The implementation of any API method which has a FieldMask type field in the request should verify the included field paths, and return an `INVALID_ARGUMENT` error if any path is duplicated or unmappable.
 * @export
 * @interface GoogleprotobufFieldMask
 */
export interface GoogleprotobufFieldMask {
    /**
     * The set of field mask paths.
     * @type {Array<string>}
     * @memberof GoogleprotobufFieldMask
     */
    paths?: Array<string>;
}

/**
 * 
 * @export
 * @interface ListAlertasEntidadeResponseAlerta
 */
export interface ListAlertasEntidadeResponseAlerta {
    /**
     * 
     * @type {string}
     * @memberof ListAlertasEntidadeResponseAlerta
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ListAlertasEntidadeResponseAlerta
     */
    description?: string;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum ListProdutosAdquiridosRequestSituacao {
    NAOPRECIFICADOSHOJE = <any> 'NAO_PRECIFICADOS_HOJE',
    NAOPRECIFICADOSPERIODO = <any> 'NAO_PRECIFICADOS_PERIODO',
    PRECIFICADOSHOJE = <any> 'PRECIFICADOS_HOJE',
    PRECIFICADOSPERIODO = <any> 'PRECIFICADOS_PERIODO'
}

/**
 * 
 * @export
 * @interface ListProdutosAdquiridosResponseProdutoAdquirido
 */
export interface ListProdutosAdquiridosResponseProdutoAdquirido {
    /**
     * 
     * @type {UnitrierProduto}
     * @memberof ListProdutosAdquiridosResponseProdutoAdquirido
     */
    produto?: UnitrierProduto;
    /**
     * 
     * @type {number}
     * @memberof ListProdutosAdquiridosResponseProdutoAdquirido
     */
    quantidade?: number;
    /**
     * 
     * @type {number}
     * @memberof ListProdutosAdquiridosResponseProdutoAdquirido
     */
    valor?: number;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum ModeloPrecificacaoTipoPrecificacao {
    UNSPECIFIED = <any> 'UNSPECIFIED',
    MENORPRECO = <any> 'MENOR_PRECO',
    MAIORPRECO = <any> 'MAIOR_PRECO',
    MARGEMMINIMA = <any> 'MARGEM_MINIMA',
    MARGEMCADASTRADA = <any> 'MARGEM_CADASTRADA'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum PesquisaEtapa {
    INICIAL = <any> 'INICIAL',
    PESQUISA = <any> 'PESQUISA',
    ANALISE = <any> 'ANALISE'
}

/**
 * 
 * @export
 * @interface PesquisaProdutoConcorrente
 */
export interface PesquisaProdutoConcorrente {
    /**
     * 
     * @type {UnitrierProdutoUnidade}
     * @memberof PesquisaProdutoConcorrente
     */
    produto_unidade?: UnitrierProdutoUnidade;
    /**
     * 
     * @type {UnitrierConcorrente}
     * @memberof PesquisaProdutoConcorrente
     */
    concorrente?: UnitrierConcorrente;
    /**
     * 
     * @type {number}
     * @memberof PesquisaProdutoConcorrente
     */
    preco_venda?: number;
    /**
     * 
     * @type {number}
     * @memberof PesquisaProdutoConcorrente
     */
    margem_venda?: number;
    /**
     * 
     * @type {number}
     * @memberof PesquisaProdutoConcorrente
     */
    lucro?: number;
    /**
     * 
     * @type {PesquisaProdutoConcorrentePesquisa}
     * @memberof PesquisaProdutoConcorrente
     */
    ultima_pesquisa?: PesquisaProdutoConcorrentePesquisa;
}

/**
 * 
 * @export
 * @interface PesquisaProdutoConcorrentePesquisa
 */
export interface PesquisaProdutoConcorrentePesquisa {
    /**
     * 
     * @type {string}
     * @memberof PesquisaProdutoConcorrentePesquisa
     */
    data?: string;
    /**
     * 
     * @type {number}
     * @memberof PesquisaProdutoConcorrentePesquisa
     */
    preco?: number;
}

/**
 * 
 * @export
 * @interface ProdutoStatsMes
 */
export interface ProdutoStatsMes {
    /**
     * 
     * @type {string}
     * @memberof ProdutoStatsMes
     */
    data?: string;
    /**
     * 
     * @type {number}
     * @memberof ProdutoStatsMes
     */
    valor?: number;
}

/**
 * 
 * @export
 * @interface ProdutoUnidadeCampoAdicional
 */
export interface ProdutoUnidadeCampoAdicional {
    /**
     * 
     * @type {string}
     * @memberof ProdutoUnidadeCampoAdicional
     */
    campo?: string;
    /**
     * 
     * @type {string}
     * @memberof ProdutoUnidadeCampoAdicional
     */
    titulo?: string;
    /**
     * 
     * @type {string}
     * @memberof ProdutoUnidadeCampoAdicional
     */
    valor?: string;
    /**
     * 
     * @type {ProdutoUnidadeCampoAdicionalTipo}
     * @memberof ProdutoUnidadeCampoAdicional
     */
    tipo?: ProdutoUnidadeCampoAdicionalTipo;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum ProdutoUnidadeCampoAdicionalTipo {
    TEXTO = <any> 'TEXTO',
    MOEDA = <any> 'MOEDA',
    PORCENTAGEM = <any> 'PORCENTAGEM',
    DATA = <any> 'DATA'
}

/**
 * 
 * @export
 * @interface ProdutoUnidadeCustos
 */
export interface ProdutoUnidadeCustos {
    /**
     * 
     * @type {number}
     * @memberof ProdutoUnidadeCustos
     */
    compra?: number;
    /**
     * 
     * @type {number}
     * @memberof ProdutoUnidadeCustos
     */
    medio?: number;
    /**
     * 
     * @type {number}
     * @memberof ProdutoUnidadeCustos
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof ProdutoUnidadeCustos
     */
    venda?: number;
    /**
     * 
     * @type {number}
     * @memberof ProdutoUnidadeCustos
     */
    transferencia?: number;
    /**
     * 
     * @type {number}
     * @memberof ProdutoUnidadeCustos
     */
    fiscal?: number;
    /**
     * 
     * @type {number}
     * @memberof ProdutoUnidadeCustos
     */
    empresa?: number;
    /**
     * 
     * @type {string}
     * @memberof ProdutoUnidadeCustos
     */
    data?: string;
}

/**
 * 
 * @export
 * @interface ProdutoUnidadePrecoVenda
 */
export interface ProdutoUnidadePrecoVenda {
    /**
     * 
     * @type {number}
     * @memberof ProdutoUnidadePrecoVenda
     */
    preco?: number;
    /**
     * 
     * @type {number}
     * @memberof ProdutoUnidadePrecoVenda
     */
    fator?: number;
    /**
     * 
     * @type {number}
     * @memberof ProdutoUnidadePrecoVenda
     */
    margem?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ProdutoUnidadePrecoVenda
     */
    ativo?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ProdutoUnidadePrecoVenda
     */
    margem_minima?: number;
}

/**
 * 
 * @export
 * @interface ProjecaoLucroAcaoRequestMargens
 */
export interface ProjecaoLucroAcaoRequestMargens {
    /**
     * 
     * @type {{ [key: string]: ProjecaoLucroAcaoRequestMargensMargemCurva; }}
     * @memberof ProjecaoLucroAcaoRequestMargens
     */
    curvas?: { [key: string]: ProjecaoLucroAcaoRequestMargensMargemCurva; };
}

/**
 * 
 * @export
 * @interface ProjecaoLucroAcaoRequestMargensMargemCurva
 */
export interface ProjecaoLucroAcaoRequestMargensMargemCurva {
    /**
     * 
     * @type {number}
     * @memberof ProjecaoLucroAcaoRequestMargensMargemCurva
     */
    porcentagem_produtos?: number;
    /**
     * 
     * @type {number}
     * @memberof ProjecaoLucroAcaoRequestMargensMargemCurva
     */
    minima?: number;
    /**
     * 
     * @type {number}
     * @memberof ProjecaoLucroAcaoRequestMargensMargemCurva
     */
    media?: number;
    /**
     * 
     * @type {number}
     * @memberof ProjecaoLucroAcaoRequestMargensMargemCurva
     */
    maxima?: number;
}

/**
 * 
 * @export
 * @interface ProjecaoLucroAcaoResponseValores
 */
export interface ProjecaoLucroAcaoResponseValores {
    /**
     * 
     * @type {number}
     * @memberof ProjecaoLucroAcaoResponseValores
     */
    minima?: number;
    /**
     * 
     * @type {number}
     * @memberof ProjecaoLucroAcaoResponseValores
     */
    media?: number;
    /**
     * 
     * @type {number}
     * @memberof ProjecaoLucroAcaoResponseValores
     */
    maxima?: number;
}

/**
 * 
 * @export
 * @interface ProjecaoLucrosResponsePrevisao
 */
export interface ProjecaoLucrosResponsePrevisao {
    /**
     * 
     * @type {number}
     * @memberof ProjecaoLucrosResponsePrevisao
     */
    valor_lucro?: number;
    /**
     * 
     * @type {number}
     * @memberof ProjecaoLucrosResponsePrevisao
     */
    valor_venda?: number;
    /**
     * 
     * @type {number}
     * @memberof ProjecaoLucrosResponsePrevisao
     */
    percentual_lucro?: number;
}

/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }   Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...   Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := ptypes.MarshalAny(foo)      ...      foo := &pb.Foo{}      if err := ptypes.UnmarshalAny(any, foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    /**
     * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
     * @type {string}
     * @memberof ProtobufAny
     */
    type_url?: string;
    /**
     * Must be a valid serialized protocol buffer of the above specified type.
     * @type {string}
     * @memberof ProtobufAny
     */
    value?: string;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum RelatorioAlteracoesProdutosFluxoRequestFormato {
    API = <any> 'API',
    CSV = <any> 'CSV'
}

/**
 * 
 * @export
 * @interface UnitrierAcaoVenda
 */
export interface UnitrierAcaoVenda {
    /**
     * 
     * @type {string}
     * @memberof UnitrierAcaoVenda
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierAcaoVenda
     */
    nome?: string;
    /**
     * 
     * @type {UnitrierTipoAcaoVenda}
     * @memberof UnitrierAcaoVenda
     */
    tipo?: UnitrierTipoAcaoVenda;
    /**
     * 
     * @type {string}
     * @memberof UnitrierAcaoVenda
     */
    validade_inicio?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierAcaoVenda
     */
    validade_fim?: string;
    /**
     * 
     * @type {UnitrierAcaoVendaStatus}
     * @memberof UnitrierAcaoVenda
     */
    status?: UnitrierAcaoVendaStatus;
    /**
     * 
     * @type {Array<UnitrierUnidade>}
     * @memberof UnitrierAcaoVenda
     */
    unidades?: Array<UnitrierUnidade>;
    /**
     * 
     * @type {Array<UnitrierAcaoVendaProduto>}
     * @memberof UnitrierAcaoVenda
     */
    produtos?: Array<UnitrierAcaoVendaProduto>;
    /**
     * 
     * @type {string}
     * @memberof UnitrierAcaoVenda
     */
    data_cadastro?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierAcaoVenda
     */
    has_recuperacao?: boolean;
    /**
     * 
     * @type {AcaoVendaModelo}
     * @memberof UnitrierAcaoVenda
     */
    modelo?: AcaoVendaModelo;
    /**
     * 
     * @type {UnitrierAcaoVendaCombate}
     * @memberof UnitrierAcaoVenda
     */
    combate?: UnitrierAcaoVendaCombate;
    /**
     * 
     * @type {UnitrierAcaoVendaRecuperacao}
     * @memberof UnitrierAcaoVenda
     */
    recuperacao?: UnitrierAcaoVendaRecuperacao;
    /**
     * 
     * @type {UnitrierFluxo}
     * @memberof UnitrierAcaoVenda
     */
    fluxo?: UnitrierFluxo;
}

/**
 * 
 * @export
 * @interface UnitrierAcaoVendaCombate
 */
export interface UnitrierAcaoVendaCombate {
    /**
     * 
     * @type {UnitrierAcaoVenda}
     * @memberof UnitrierAcaoVendaCombate
     */
    acao?: UnitrierAcaoVenda;
}

/**
 * 
 * @export
 * @interface UnitrierAcaoVendaProduto
 */
export interface UnitrierAcaoVendaProduto {
    /**
     * 
     * @type {UnitrierProduto}
     * @memberof UnitrierAcaoVendaProduto
     */
    produto?: UnitrierProduto;
    /**
     * 
     * @type {number}
     * @memberof UnitrierAcaoVendaProduto
     */
    preco_acao?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierAcaoVendaProduto
     */
    margem_acao?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierAcaoVendaProduto
     */
    lucro_acao?: number;
    /**
     * 
     * @type {UnitrierProduto}
     * @memberof UnitrierAcaoVendaProduto
     */
    referencia?: UnitrierProduto;
}

/**
 * 
 * @export
 * @interface UnitrierAcaoVendaRecuperacao
 */
export interface UnitrierAcaoVendaRecuperacao {
    /**
     * 
     * @type {Array<UnitrierAcaoVenda>}
     * @memberof UnitrierAcaoVendaRecuperacao
     */
    acoes?: Array<UnitrierAcaoVenda>;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum UnitrierAcaoVendaStatus {
    AGUARDANDO = <any> 'AGUARDANDO',
    APROVADO = <any> 'APROVADO',
    RECUSADO = <any> 'RECUSADO',
    FINALIZADA = <any> 'FINALIZADA'
}

/**
 * 
 * @export
 * @interface UnitrierAlterarSenhaUsuarioRequest
 */
export interface UnitrierAlterarSenhaUsuarioRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierAlterarSenhaUsuarioRequest
     */
    senha_atual?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierAlterarSenhaUsuarioRequest
     */
    nova_senha?: string;
}

/**
 * 
 * @export
 * @interface UnitrierAlterarSenhaUsuarioResponse
 */
export interface UnitrierAlterarSenhaUsuarioResponse {
}

/**
 * 
 * @export
 * @interface UnitrierAlterarStatusProdutosFluxoRequest
 */
export interface UnitrierAlterarStatusProdutosFluxoRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierAlterarStatusProdutosFluxoRequest
     */
    fluxo_uuid?: string;
    /**
     * 
     * @type {Array<UnitrierAlterarStatusProdutosFluxoRequestProduto>}
     * @memberof UnitrierAlterarStatusProdutosFluxoRequest
     */
    produtos?: Array<UnitrierAlterarStatusProdutosFluxoRequestProduto>;
    /**
     * 
     * @type {UnitrierFluxoProdutoUnidadeStatus}
     * @memberof UnitrierAlterarStatusProdutosFluxoRequest
     */
    status?: UnitrierFluxoProdutoUnidadeStatus;
}

/**
 * 
 * @export
 * @interface UnitrierAlterarStatusProdutosFluxoRequestProduto
 */
export interface UnitrierAlterarStatusProdutosFluxoRequestProduto {
    /**
     * 
     * @type {string}
     * @memberof UnitrierAlterarStatusProdutosFluxoRequestProduto
     */
    produto_uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierAlterarStatusProdutosFluxoRequestProduto
     */
    unidade_uuid?: string;
}

/**
 * 
 * @export
 * @interface UnitrierAnalisePerformance
 */
export interface UnitrierAnalisePerformance {
    /**
     * 
     * @type {Array<UnitrierAnalisePerformanceProduto>}
     * @memberof UnitrierAnalisePerformance
     */
    produtos?: Array<UnitrierAnalisePerformanceProduto>;
    /**
     * 
     * @type {UnitrierAnalisePerformanceAnalise}
     * @memberof UnitrierAnalisePerformance
     */
    referencia?: UnitrierAnalisePerformanceAnalise;
    /**
     * 
     * @type {UnitrierAnalisePerformanceAnalise}
     * @memberof UnitrierAnalisePerformance
     */
    periodo_acao?: UnitrierAnalisePerformanceAnalise;
    /**
     * 
     * @type {UnitrierAnalisePerformanceAnalise}
     * @memberof UnitrierAnalisePerformance
     */
    comparativo?: UnitrierAnalisePerformanceAnalise;
}

/**
 * 
 * @export
 * @interface UnitrierAnalisePerformanceAnalise
 */
export interface UnitrierAnalisePerformanceAnalise {
    /**
     * 
     * @type {number}
     * @memberof UnitrierAnalisePerformanceAnalise
     */
    quantidade?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierAnalisePerformanceAnalise
     */
    valor?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierAnalisePerformanceAnalise
     */
    lucro?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierAnalisePerformanceAnalise
     */
    lucro_percentual?: number;
}

/**
 * 
 * @export
 * @interface UnitrierAnalisePerformanceProduto
 */
export interface UnitrierAnalisePerformanceProduto {
    /**
     * 
     * @type {UnitrierProduto}
     * @memberof UnitrierAnalisePerformanceProduto
     */
    produto?: UnitrierProduto;
    /**
     * 
     * @type {string}
     * @memberof UnitrierAnalisePerformanceProduto
     */
    curva?: string;
    /**
     * 
     * @type {UnitrierAnalisePerformanceAnalise}
     * @memberof UnitrierAnalisePerformanceProduto
     */
    referencia?: UnitrierAnalisePerformanceAnalise;
    /**
     * 
     * @type {UnitrierAnalisePerformanceAnalise}
     * @memberof UnitrierAnalisePerformanceProduto
     */
    periodo_acao?: UnitrierAnalisePerformanceAnalise;
    /**
     * 
     * @type {UnitrierAnalisePerformanceAnalise}
     * @memberof UnitrierAnalisePerformanceProduto
     */
    comparativo?: UnitrierAnalisePerformanceAnalise;
}

/**
 * 
 * @export
 * @interface UnitrierAnalyticsGraph
 */
export interface UnitrierAnalyticsGraph {
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierAnalyticsGraph
     */
    labels?: Array<string>;
    /**
     * 
     * @type {Array<number>}
     * @memberof UnitrierAnalyticsGraph
     */
    values?: Array<number>;
    /**
     * 
     * @type {UnitrierAnalyticsGraphTable}
     * @memberof UnitrierAnalyticsGraph
     */
    table?: UnitrierAnalyticsGraphTable;
}

/**
 * 
 * @export
 * @interface UnitrierAnalyticsGraphTable
 */
export interface UnitrierAnalyticsGraphTable {
    /**
     * 
     * @type {Array<UnitrierAnalyticsGraphTableColumn>}
     * @memberof UnitrierAnalyticsGraphTable
     */
    columns?: Array<UnitrierAnalyticsGraphTableColumn>;
    /**
     * 
     * @type {Array<UnitrierAnalyticsGraphTableRow>}
     * @memberof UnitrierAnalyticsGraphTable
     */
    rows?: Array<UnitrierAnalyticsGraphTableRow>;
}

/**
 * 
 * @export
 * @interface UnitrierAnalyticsGraphTableColumn
 */
export interface UnitrierAnalyticsGraphTableColumn {
    /**
     * 
     * @type {string}
     * @memberof UnitrierAnalyticsGraphTableColumn
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierAnalyticsGraphTableColumn
     */
    type?: string;
}

/**
 * 
 * @export
 * @interface UnitrierAnalyticsGraphTableRow
 */
export interface UnitrierAnalyticsGraphTableRow {
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierAnalyticsGraphTableRow
     */
    values?: Array<string>;
}

/**
 * 
 * @export
 * @interface UnitrierAnalyticsGraphs
 */
export interface UnitrierAnalyticsGraphs {
    /**
     * 
     * @type {ProtobufAny}
     * @memberof UnitrierAnalyticsGraphs
     */
    data?: ProtobufAny;
}

/**
 * 
 * @export
 * @interface UnitrierAnalyticsPieChart
 */
export interface UnitrierAnalyticsPieChart {
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierAnalyticsPieChart
     */
    labels?: Array<string>;
    /**
     * 
     * @type {Array<number>}
     * @memberof UnitrierAnalyticsPieChart
     */
    values?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof UnitrierAnalyticsPieChart
     */
    info_label?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof UnitrierAnalyticsPieChart
     */
    info_values?: Array<number>;
}

/**
 * 
 * @export
 * @interface UnitrierAprovarAcaoVendaRequest
 */
export interface UnitrierAprovarAcaoVendaRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierAprovarAcaoVendaRequest
     */
    uuid?: string;
}

/**
 * 
 * @export
 * @interface UnitrierAuthenticateUsuarioRequest
 */
export interface UnitrierAuthenticateUsuarioRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierAuthenticateUsuarioRequest
     */
    usuario?: string;
    /**
     * 
     * @type {AuthenticateUsuarioRequestGrantType}
     * @memberof UnitrierAuthenticateUsuarioRequest
     */
    grant_type?: AuthenticateUsuarioRequestGrantType;
    /**
     * 
     * @type {string}
     * @memberof UnitrierAuthenticateUsuarioRequest
     */
    senha?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierAuthenticateUsuarioRequest
     */
    refresh_token?: string;
}

/**
 * 
 * @export
 * @interface UnitrierAuthenticateUsuarioResponse
 */
export interface UnitrierAuthenticateUsuarioResponse {
    /**
     * 
     * @type {string}
     * @memberof UnitrierAuthenticateUsuarioResponse
     */
    access_token?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierAuthenticateUsuarioResponse
     */
    refresh_token?: string;
    /**
     * 
     * @type {AuthenticateUsuarioResponseTokenType}
     * @memberof UnitrierAuthenticateUsuarioResponse
     */
    token_type?: AuthenticateUsuarioResponseTokenType;
    /**
     * 
     * @type {string}
     * @memberof UnitrierAuthenticateUsuarioResponse
     */
    refresh_before?: string;
}

/**
 * 
 * @export
 * @interface UnitrierAutorizarFluxoRequest
 */
export interface UnitrierAutorizarFluxoRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierAutorizarFluxoRequest
     */
    fluxo_uuid?: string;
}

/**
 * 
 * @export
 * @interface UnitrierCalcularCategoriasProcessoRequest
 */
export interface UnitrierCalcularCategoriasProcessoRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierCalcularCategoriasProcessoRequest
     */
    uuid?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierCalcularCategoriasProcessoRequest
     */
    unidades?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierCalcularCategoriasProcessoRequest
     */
    sem_movimentacao?: boolean;
}

/**
 * 
 * @export
 * @interface UnitrierCalcularCategoriasProcessoResponse
 */
export interface UnitrierCalcularCategoriasProcessoResponse {
    /**
     * 
     * @type {{ [key: string]: CalcularCategoriasProcessoResponseCategorias; }}
     * @memberof UnitrierCalcularCategoriasProcessoResponse
     */
    curvas?: { [key: string]: CalcularCategoriasProcessoResponseCategorias; };
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularCategoriasProcessoResponse
     */
    saldo_lucratividade?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularCategoriasProcessoResponse
     */
    valor_venda?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularCategoriasProcessoResponse
     */
    valor_lucro?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularCategoriasProcessoResponse
     */
    margem_minima?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularCategoriasProcessoResponse
     */
    margem_ideal?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularCategoriasProcessoResponse
     */
    margem_atual?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularCategoriasProcessoResponse
     */
    margem_media?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularCategoriasProcessoResponse
     */
    quantidade?: number;
}

/**
 * 
 * @export
 * @interface UnitrierCalcularCategoriasProcessoResponseCategoria
 */
export interface UnitrierCalcularCategoriasProcessoResponseCategoria {
    /**
     * 
     * @type {UnitrierCategoria}
     * @memberof UnitrierCalcularCategoriasProcessoResponseCategoria
     */
    categoria?: UnitrierCategoria;
    /**
     * 
     * @type {UnitrierDepartamento}
     * @memberof UnitrierCalcularCategoriasProcessoResponseCategoria
     */
    departamento?: UnitrierDepartamento;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularCategoriasProcessoResponseCategoria
     */
    valor_venda?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularCategoriasProcessoResponseCategoria
     */
    valor_lucro?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularCategoriasProcessoResponseCategoria
     */
    margem_minima?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularCategoriasProcessoResponseCategoria
     */
    margem_ideal?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularCategoriasProcessoResponseCategoria
     */
    margem_atual?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularCategoriasProcessoResponseCategoria
     */
    margem_media?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularCategoriasProcessoResponseCategoria
     */
    saldo_lucratividade?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularCategoriasProcessoResponseCategoria
     */
    marcas_count?: number;
    /**
     * 
     * @type {GestaoCategoriaCategoriaStats}
     * @memberof UnitrierCalcularCategoriasProcessoResponseCategoria
     */
    status?: GestaoCategoriaCategoriaStats;
}

/**
 * 
 * @export
 * @interface UnitrierCalcularCurvaProdutoRequest
 */
export interface UnitrierCalcularCurvaProdutoRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierCalcularCurvaProdutoRequest
     */
    produto_uuid?: string;
}

/**
 * 
 * @export
 * @interface UnitrierCalcularCurvaProdutoResponse
 */
export interface UnitrierCalcularCurvaProdutoResponse {
    /**
     * 
     * @type {UnitrierCalcularCurvaProdutoResponseCurva}
     * @memberof UnitrierCalcularCurvaProdutoResponse
     */
    geral?: UnitrierCalcularCurvaProdutoResponseCurva;
    /**
     * 
     * @type {{ [key: string]: UnitrierCalcularCurvaProdutoResponseCurva; }}
     * @memberof UnitrierCalcularCurvaProdutoResponse
     */
    unidades?: { [key: string]: UnitrierCalcularCurvaProdutoResponseCurva; };
}

/**
 * 
 * @export
 * @interface UnitrierCalcularCurvaProdutoResponseCurva
 */
export interface UnitrierCalcularCurvaProdutoResponseCurva {
    /**
     * 
     * @type {string}
     * @memberof UnitrierCalcularCurvaProdutoResponseCurva
     */
    venda?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierCalcularCurvaProdutoResponseCurva
     */
    lucro?: string;
}

/**
 * 
 * @export
 * @interface UnitrierCalcularCustosRequest
 */
export interface UnitrierCalcularCustosRequest {
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularCustosRequest
     */
    custo_compra_base?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularCustosRequest
     */
    custo_venda_base?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularCustosRequest
     */
    preco_compra_novo?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularCustosRequest
     */
    preco_venda_novo?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularCustosRequest
     */
    preco_compra_base?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularCustosRequest
     */
    preco_venda_base?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularCustosRequest
     */
    outros_descontos?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularCustosRequest
     */
    outros_acrescimos?: number;
}

/**
 * 
 * @export
 * @interface UnitrierCalcularCustosResponse
 */
export interface UnitrierCalcularCustosResponse {
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularCustosResponse
     */
    custo_compra?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularCustosResponse
     */
    custo_venda?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularCustosResponse
     */
    custo_total?: number;
    /**
     * 
     * @type {CalcularCustosResponseLucro}
     * @memberof UnitrierCalcularCustosResponse
     */
    lucro?: CalcularCustosResponseLucro;
}

/**
 * 
 * @export
 * @interface UnitrierCalcularMarcasCategoriaRequest
 */
export interface UnitrierCalcularMarcasCategoriaRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierCalcularMarcasCategoriaRequest
     */
    processo?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierCalcularMarcasCategoriaRequest
     */
    categoria?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierCalcularMarcasCategoriaRequest
     */
    unidades?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierCalcularMarcasCategoriaRequest
     */
    sem_movimentacao?: boolean;
}

/**
 * 
 * @export
 * @interface UnitrierCalcularMarcasCategoriaResponse
 */
export interface UnitrierCalcularMarcasCategoriaResponse {
    /**
     * 
     * @type {Array<CalcularMarcasCategoriaResponseMarca>}
     * @memberof UnitrierCalcularMarcasCategoriaResponse
     */
    marcas?: Array<CalcularMarcasCategoriaResponseMarca>;
    /**
     * 
     * @type {UnitrierCalcularMarcasCategoriaResponseStats}
     * @memberof UnitrierCalcularMarcasCategoriaResponse
     */
    stats?: UnitrierCalcularMarcasCategoriaResponseStats;
}

/**
 * 
 * @export
 * @interface UnitrierCalcularMarcasCategoriaResponseProduto
 */
export interface UnitrierCalcularMarcasCategoriaResponseProduto {
    /**
     * 
     * @type {UnitrierProduto}
     * @memberof UnitrierCalcularMarcasCategoriaResponseProduto
     */
    produto?: UnitrierProduto;
    /**
     * 
     * @type {string}
     * @memberof UnitrierCalcularMarcasCategoriaResponseProduto
     */
    curva?: string;
    /**
     * 
     * @type {UnitrierCalcularMarcasCategoriaResponseStats}
     * @memberof UnitrierCalcularMarcasCategoriaResponseProduto
     */
    stats?: UnitrierCalcularMarcasCategoriaResponseStats;
    /**
     * 
     * @type {Array<CalcularMarcasCategoriaResponseProdutoUnidade>}
     * @memberof UnitrierCalcularMarcasCategoriaResponseProduto
     */
    unidades?: Array<CalcularMarcasCategoriaResponseProdutoUnidade>;
}

/**
 * 
 * @export
 * @interface UnitrierCalcularMarcasCategoriaResponseStats
 */
export interface UnitrierCalcularMarcasCategoriaResponseStats {
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularMarcasCategoriaResponseStats
     */
    quantidade?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularMarcasCategoriaResponseStats
     */
    estoque?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularMarcasCategoriaResponseStats
     */
    valor_venda?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularMarcasCategoriaResponseStats
     */
    valor_lucro?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularMarcasCategoriaResponseStats
     */
    valor_lucro_ideal?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularMarcasCategoriaResponseStats
     */
    margem_minima?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularMarcasCategoriaResponseStats
     */
    margem_ideal?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularMarcasCategoriaResponseStats
     */
    margem_atual?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularMarcasCategoriaResponseStats
     */
    margem_media?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularMarcasCategoriaResponseStats
     */
    margem_lucro_ideal?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularMarcasCategoriaResponseStats
     */
    saldo_lucratividade?: number;
}

/**
 * 
 * @export
 * @interface UnitrierCalcularMargemAcaoRequest
 */
export interface UnitrierCalcularMargemAcaoRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierCalcularMargemAcaoRequest
     */
    produto_uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierCalcularMargemAcaoRequest
     */
    unidade_uuid?: string;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularMargemAcaoRequest
     */
    preco_acao?: number;
}

/**
 * 
 * @export
 * @interface UnitrierCalcularMargemAcaoResponse
 */
export interface UnitrierCalcularMargemAcaoResponse {
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularMargemAcaoResponse
     */
    margem_acao?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularMargemAcaoResponse
     */
    lucro_acao?: number;
}

/**
 * 
 * @export
 * @interface UnitrierCalcularProjecaoLucroFluxoRequest
 */
export interface UnitrierCalcularProjecaoLucroFluxoRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierCalcularProjecaoLucroFluxoRequest
     */
    uuid?: string;
}

/**
 * 
 * @export
 * @interface UnitrierCalcularProjecaoLucroFluxoResponse
 */
export interface UnitrierCalcularProjecaoLucroFluxoResponse {
    /**
     * 
     * @type {Array<UnitrierCalcularProjecaoLucroFluxoResponseProdutoUnidade>}
     * @memberof UnitrierCalcularProjecaoLucroFluxoResponse
     */
    produtos?: Array<UnitrierCalcularProjecaoLucroFluxoResponseProdutoUnidade>;
}

/**
 * 
 * @export
 * @interface UnitrierCalcularProjecaoLucroFluxoResponseProdutoUnidade
 */
export interface UnitrierCalcularProjecaoLucroFluxoResponseProdutoUnidade {
    /**
     * 
     * @type {string}
     * @memberof UnitrierCalcularProjecaoLucroFluxoResponseProdutoUnidade
     */
    produto_uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierCalcularProjecaoLucroFluxoResponseProdutoUnidade
     */
    unidade_uuid?: string;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularProjecaoLucroFluxoResponseProdutoUnidade
     */
    preco?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularProjecaoLucroFluxoResponseProdutoUnidade
     */
    margem?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCalcularProjecaoLucroFluxoResponseProdutoUnidade
     */
    lucro?: number;
}

/**
 * 
 * @export
 * @interface UnitrierCalcularSugestaoPrecoTipoAcaoVendaRequest
 */
export interface UnitrierCalcularSugestaoPrecoTipoAcaoVendaRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierCalcularSugestaoPrecoTipoAcaoVendaRequest
     */
    tipo_acao_uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierCalcularSugestaoPrecoTipoAcaoVendaRequest
     */
    unidade_uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierCalcularSugestaoPrecoTipoAcaoVendaRequest
     */
    produto_uuid?: string;
}

/**
 * 
 * @export
 * @interface UnitrierCalcularSugestaoPrecoTipoAcaoVendaResponse
 */
export interface UnitrierCalcularSugestaoPrecoTipoAcaoVendaResponse {
    /**
     * 
     * @type {CalcularSugestaoPrecoTipoAcaoVendaResponseSugestao}
     * @memberof UnitrierCalcularSugestaoPrecoTipoAcaoVendaResponse
     */
    minimo?: CalcularSugestaoPrecoTipoAcaoVendaResponseSugestao;
    /**
     * 
     * @type {CalcularSugestaoPrecoTipoAcaoVendaResponseSugestao}
     * @memberof UnitrierCalcularSugestaoPrecoTipoAcaoVendaResponse
     */
    medio?: CalcularSugestaoPrecoTipoAcaoVendaResponseSugestao;
    /**
     * 
     * @type {CalcularSugestaoPrecoTipoAcaoVendaResponseSugestao}
     * @memberof UnitrierCalcularSugestaoPrecoTipoAcaoVendaResponse
     */
    maximo?: CalcularSugestaoPrecoTipoAcaoVendaResponseSugestao;
}

/**
 * 
 * @export
 * @interface UnitrierCategoria
 */
export interface UnitrierCategoria {
    /**
     * 
     * @type {string}
     * @memberof UnitrierCategoria
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierCategoria
     */
    codigo?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierCategoria
     */
    classificacao?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierCategoria
     */
    nome?: string;
}

/**
 * 
 * @export
 * @interface UnitrierCategoriaSimilares
 */
export interface UnitrierCategoriaSimilares {
    /**
     * 
     * @type {UnitrierCategoria}
     * @memberof UnitrierCategoriaSimilares
     */
    categoria?: UnitrierCategoria;
    /**
     * 
     * @type {Array<UnitrierCategoria>}
     * @memberof UnitrierCategoriaSimilares
     */
    similares?: Array<UnitrierCategoria>;
}

/**
 * 
 * @export
 * @interface UnitrierConcorrente
 */
export interface UnitrierConcorrente {
    /**
     * 
     * @type {string}
     * @memberof UnitrierConcorrente
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierConcorrente
     */
    codigo?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierConcorrente
     */
    numero_inscricao?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierConcorrente
     */
    nome?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierConcorrente
     */
    razao_social?: string;
    /**
     * 
     * @type {Array<UnitrierUnidade>}
     * @memberof UnitrierConcorrente
     */
    unidades?: Array<UnitrierUnidade>;
}

/**
 * 
 * @export
 * @interface UnitrierCreateAcaoVendaRequest
 */
export interface UnitrierCreateAcaoVendaRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierCreateAcaoVendaRequest
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierCreateAcaoVendaRequest
     */
    nome?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierCreateAcaoVendaRequest
     */
    validade_inicio?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierCreateAcaoVendaRequest
     */
    validade_fim?: string;
    /**
     * 
     * @type {UnitrierCreateAcaoVendaRequestAcao}
     * @memberof UnitrierCreateAcaoVendaRequest
     */
    acao?: UnitrierCreateAcaoVendaRequestAcao;
    /**
     * 
     * @type {UnitrierCreateAcaoVendaRequestCombate}
     * @memberof UnitrierCreateAcaoVendaRequest
     */
    combate?: UnitrierCreateAcaoVendaRequestCombate;
    /**
     * 
     * @type {UnitrierCreateAcaoVendaRequestRecuperacao}
     * @memberof UnitrierCreateAcaoVendaRequest
     */
    recuperacao?: UnitrierCreateAcaoVendaRequestRecuperacao;
}

/**
 * 
 * @export
 * @interface UnitrierCreateAcaoVendaRequestAcao
 */
export interface UnitrierCreateAcaoVendaRequestAcao {
    /**
     * 
     * @type {UnitrierTipoAcaoVenda}
     * @memberof UnitrierCreateAcaoVendaRequestAcao
     */
    tipo?: UnitrierTipoAcaoVenda;
    /**
     * 
     * @type {Array<UnitrierUnidade>}
     * @memberof UnitrierCreateAcaoVendaRequestAcao
     */
    unidades?: Array<UnitrierUnidade>;
    /**
     * 
     * @type {Array<UnitrierAcaoVendaProduto>}
     * @memberof UnitrierCreateAcaoVendaRequestAcao
     */
    produtos?: Array<UnitrierAcaoVendaProduto>;
}

/**
 * 
 * @export
 * @interface UnitrierCreateAcaoVendaRequestCombate
 */
export interface UnitrierCreateAcaoVendaRequestCombate {
    /**
     * 
     * @type {UnitrierAcaoVenda}
     * @memberof UnitrierCreateAcaoVendaRequestCombate
     */
    acao?: UnitrierAcaoVenda;
    /**
     * 
     * @type {Array<CreateAcaoVendaRequestCombateProduto>}
     * @memberof UnitrierCreateAcaoVendaRequestCombate
     */
    produtos?: Array<CreateAcaoVendaRequestCombateProduto>;
}

/**
 * 
 * @export
 * @interface UnitrierCreateAcaoVendaRequestRecuperacao
 */
export interface UnitrierCreateAcaoVendaRequestRecuperacao {
    /**
     * 
     * @type {UnitrierTipoAcaoVenda}
     * @memberof UnitrierCreateAcaoVendaRequestRecuperacao
     */
    tipo?: UnitrierTipoAcaoVenda;
    /**
     * 
     * @type {Array<UnitrierAcaoVenda>}
     * @memberof UnitrierCreateAcaoVendaRequestRecuperacao
     */
    acoes?: Array<UnitrierAcaoVenda>;
    /**
     * 
     * @type {Array<UnitrierAcaoVendaProduto>}
     * @memberof UnitrierCreateAcaoVendaRequestRecuperacao
     */
    produtos?: Array<UnitrierAcaoVendaProduto>;
}

/**
 * 
 * @export
 * @interface UnitrierCreateCurvaAdminRequest
 */
export interface UnitrierCreateCurvaAdminRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierCreateCurvaAdminRequest
     */
    entidade_uuid?: string;
    /**
     * 
     * @type {UnitrierCurva}
     * @memberof UnitrierCreateCurvaAdminRequest
     */
    curva?: UnitrierCurva;
}

/**
 * 
 * @export
 * @interface UnitrierCreateEntidadeRequest
 */
export interface UnitrierCreateEntidadeRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierCreateEntidadeRequest
     */
    nome?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierCreateEntidadeRequest
     */
    apelido?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierCreateEntidadeRequest
     */
    senha?: string;
}

/**
 * 
 * @export
 * @interface UnitrierCreateGestaoCategoriaRequest
 */
export interface UnitrierCreateGestaoCategoriaRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierCreateGestaoCategoriaRequest
     */
    nome?: string;
    /**
     * 
     * @type {UnitrierGestaoCategoriaPeriodo}
     * @memberof UnitrierCreateGestaoCategoriaRequest
     */
    periodo?: UnitrierGestaoCategoriaPeriodo;
    /**
     * 
     * @type {GestaoCategoriaRankingCurva}
     * @memberof UnitrierCreateGestaoCategoriaRequest
     */
    tipo_ranking?: GestaoCategoriaRankingCurva;
    /**
     * 
     * @type {Array<UnitrierUnidade>}
     * @memberof UnitrierCreateGestaoCategoriaRequest
     */
    unidades?: Array<UnitrierUnidade>;
    /**
     * 
     * @type {Array<UnitrierDepartamento>}
     * @memberof UnitrierCreateGestaoCategoriaRequest
     */
    departamentos?: Array<UnitrierDepartamento>;
}

/**
 * 
 * @export
 * @interface UnitrierCreatePerfilRequest
 */
export interface UnitrierCreatePerfilRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierCreatePerfilRequest
     */
    nome?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierCreatePerfilRequest
     */
    descricao?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierCreatePerfilRequest
     */
    permissoes_uuid?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierCreatePerfilRequest
     */
    categorias_uuid?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierCreatePerfilRequest
     */
    departamentos_uuid?: Array<string>;
}

/**
 * 
 * @export
 * @interface UnitrierCreatePermissaoRequest
 */
export interface UnitrierCreatePermissaoRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierCreatePermissaoRequest
     */
    permissao?: string;
}

/**
 * 
 * @export
 * @interface UnitrierCreatePesquisaRequest
 */
export interface UnitrierCreatePesquisaRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierCreatePesquisaRequest
     */
    descricao?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierCreatePesquisaRequest
     */
    data_pesquisa?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierCreatePesquisaRequest
     */
    unidades?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierCreatePesquisaRequest
     */
    concorrentes?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierCreatePesquisaRequest
     */
    produtos?: Array<string>;
}

/**
 * 
 * @export
 * @interface UnitrierCreateTipoAcaoVendaRequest
 */
export interface UnitrierCreateTipoAcaoVendaRequest {
    /**
     * 
     * @type {UnitrierTipoAcaoVenda}
     * @memberof UnitrierCreateTipoAcaoVendaRequest
     */
    tipo?: UnitrierTipoAcaoVenda;
}

/**
 * 
 * @export
 * @interface UnitrierCurva
 */
export interface UnitrierCurva {
    /**
     * 
     * @type {string}
     * @memberof UnitrierCurva
     */
    letra?: string;
    /**
     * 
     * @type {number}
     * @memberof UnitrierCurva
     */
    porcentagem?: number;
}

/**
 * 
 * @export
 * @interface UnitrierDataRange
 */
export interface UnitrierDataRange {
    /**
     * 
     * @type {string}
     * @memberof UnitrierDataRange
     */
    inicio?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierDataRange
     */
    fim?: string;
}

/**
 * 
 * @export
 * @interface UnitrierDepartamento
 */
export interface UnitrierDepartamento {
    /**
     * 
     * @type {string}
     * @memberof UnitrierDepartamento
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierDepartamento
     */
    codigo?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierDepartamento
     */
    nome?: string;
    /**
     * 
     * @type {number}
     * @memberof UnitrierDepartamento
     */
    custo_operacional?: number;
}

/**
 * 
 * @export
 * @interface UnitrierDepartamentoSearchRequestFiltro
 */
export interface UnitrierDepartamentoSearchRequestFiltro {
    /**
     * 
     * @type {string}
     * @memberof UnitrierDepartamentoSearchRequestFiltro
     */
    nome?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierDepartamentoSearchRequestFiltro
     */
    perfil?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UnitrierDepartamentoSearchRequestFiltro
     */
    codigo?: string;
}

/**
 * 
 * @export
 * @interface UnitrierDistribuicaoVendasDetalhadoRequest
 */
export interface UnitrierDistribuicaoVendasDetalhadoRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierDistribuicaoVendasDetalhadoRequest
     */
    ano_mes?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierDistribuicaoVendasDetalhadoRequest
     */
    unidades?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierDistribuicaoVendasDetalhadoRequest
     */
    detalhado?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UnitrierDistribuicaoVendasDetalhadoRequest
     */
    departamento?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierDistribuicaoVendasDetalhadoRequest
     */
    categoria?: string;
}

/**
 * 
 * @export
 * @interface UnitrierDistribuicaoVendasRequest
 */
export interface UnitrierDistribuicaoVendasRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierDistribuicaoVendasRequest
     */
    ano_mes?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierDistribuicaoVendasRequest
     */
    unidades?: Array<string>;
}

/**
 * 
 * @export
 * @interface UnitrierEntidade
 */
export interface UnitrierEntidade {
    /**
     * 
     * @type {string}
     * @memberof UnitrierEntidade
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierEntidade
     */
    nome?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierEntidade
     */
    data_cadastro?: string;
}

/**
 * 
 * @export
 * @interface UnitrierEscalonamentoPrecoProdutosResponse
 */
export interface UnitrierEscalonamentoPrecoProdutosResponse {
    /**
     * 
     * @type {Array<UnitrierProdutoUnidade>}
     * @memberof UnitrierEscalonamentoPrecoProdutosResponse
     */
    produtos?: Array<UnitrierProdutoUnidade>;
}

/**
 * 
 * @export
 * @interface UnitrierFieldMask
 */
export interface UnitrierFieldMask {
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierFieldMask
     */
    paths?: Array<string>;
}

/**
 * 
 * @export
 * @interface UnitrierFinalizarCategoriaGCRequest
 */
export interface UnitrierFinalizarCategoriaGCRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierFinalizarCategoriaGCRequest
     */
    processo?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierFinalizarCategoriaGCRequest
     */
    categoria?: string;
}

/**
 * 
 * @export
 * @interface UnitrierFluxo
 */
export interface UnitrierFluxo {
    /**
     * 
     * @type {string}
     * @memberof UnitrierFluxo
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierFluxo
     */
    nome?: string;
    /**
     * 
     * @type {FluxoOrigem}
     * @memberof UnitrierFluxo
     */
    origem?: FluxoOrigem;
    /**
     * 
     * @type {string}
     * @memberof UnitrierFluxo
     */
    origem_uuid?: string;
    /**
     * 
     * @type {Array<UnitrierUnidade>}
     * @memberof UnitrierFluxo
     */
    unidades?: Array<UnitrierUnidade>;
    /**
     * 
     * @type {Array<UnitrierProduto>}
     * @memberof UnitrierFluxo
     */
    produtos?: Array<UnitrierProduto>;
    /**
     * 
     * @type {FluxoAutorizacao}
     * @memberof UnitrierFluxo
     */
    autorizacao?: FluxoAutorizacao;
    /**
     * 
     * @type {UnitrierFluxoStatus}
     * @memberof UnitrierFluxo
     */
    status?: UnitrierFluxoStatus;
    /**
     * 
     * @type {string}
     * @memberof UnitrierFluxo
     */
    data_cadastro?: string;
    /**
     * 
     * @type {UnitrierAcaoVenda}
     * @memberof UnitrierFluxo
     */
    acao_venda?: UnitrierAcaoVenda;
    /**
     * 
     * @type {UnitrierPesquisa}
     * @memberof UnitrierFluxo
     */
    pesquisa?: UnitrierPesquisa;
    /**
     * 
     * @type {UnitrierGestaoCategoria}
     * @memberof UnitrierFluxo
     */
    gestao_categoria?: UnitrierGestaoCategoria;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierFluxo
     */
    sincronizado?: boolean;
    /**
     * 
     * @type {UnitrierFluxoStats}
     * @memberof UnitrierFluxo
     */
    stats?: UnitrierFluxoStats;
}

/**
 * 
 * @export
 * @interface UnitrierFluxoProdutoUnidade
 */
export interface UnitrierFluxoProdutoUnidade {
    /**
     * 
     * @type {UnitrierProdutoUnidade}
     * @memberof UnitrierFluxoProdutoUnidade
     */
    produto_unidade?: UnitrierProdutoUnidade;
    /**
     * 
     * @type {UnitrierFluxoProdutoUpdate}
     * @memberof UnitrierFluxoProdutoUnidade
     */
    update?: UnitrierFluxoProdutoUpdate;
    /**
     * 
     * @type {UnitrierFluxoProdutoUnidadeStatus}
     * @memberof UnitrierFluxoProdutoUnidade
     */
    status?: UnitrierFluxoProdutoUnidadeStatus;
    /**
     * 
     * @type {FluxoProdutoUnidadeStatusSincronizacao}
     * @memberof UnitrierFluxoProdutoUnidade
     */
    status_sincronizacao?: FluxoProdutoUnidadeStatusSincronizacao;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierFluxoProdutoUnidade
     */
    has_alteracoes?: boolean;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum UnitrierFluxoProdutoUnidadeStatus {
    STATUSUNDEFINED = <any> 'STATUS_UNDEFINED',
    PENDENTE = <any> 'PENDENTE',
    APROVADO = <any> 'APROVADO',
    RECUSADO = <any> 'RECUSADO'
}

/**
 * 
 * @export
 * @interface UnitrierFluxoProdutoUpdate
 */
export interface UnitrierFluxoProdutoUpdate {
    /**
     * 
     * @type {UnitrierFluxoProdutoUpdateOferta}
     * @memberof UnitrierFluxoProdutoUpdate
     */
    oferta?: UnitrierFluxoProdutoUpdateOferta;
    /**
     * 
     * @type {FluxoProdutoUpdatePreco}
     * @memberof UnitrierFluxoProdutoUpdate
     */
    preco1?: FluxoProdutoUpdatePreco;
    /**
     * 
     * @type {FluxoProdutoUpdatePreco}
     * @memberof UnitrierFluxoProdutoUpdate
     */
    preco2?: FluxoProdutoUpdatePreco;
    /**
     * 
     * @type {FluxoProdutoUpdatePreco}
     * @memberof UnitrierFluxoProdutoUpdate
     */
    preco3?: FluxoProdutoUpdatePreco;
    /**
     * 
     * @type {FluxoProdutoUpdatePreco}
     * @memberof UnitrierFluxoProdutoUpdate
     */
    preco4?: FluxoProdutoUpdatePreco;
    /**
     * 
     * @type {FluxoProdutoUpdatePreco}
     * @memberof UnitrierFluxoProdutoUpdate
     */
    preco5?: FluxoProdutoUpdatePreco;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierFluxoProdutoUpdate
     */
    ativo?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierFluxoProdutoUpdate
     */
    bloqueado?: boolean;
    /**
     * Lista de campos alterados no produto, caso tenha necessidade de realizar atualização parcial. Os valores seguem o \"path\" dos campos no objeto. Exemplo: preco1.valor,preco1.margem,oferta.periodo.inicio Apenas Leitura.
     * @type {Array<string>}
     * @memberof UnitrierFluxoProdutoUpdate
     */
    campos_alterados?: Array<string>;
    /**
     * Lista de alterações realizadas. Apenas Leitura.
     * @type {Array<FluxoProdutoUpdateAlteracaoCampo>}
     * @memberof UnitrierFluxoProdutoUpdate
     */
    alteracoes?: Array<FluxoProdutoUpdateAlteracaoCampo>;
}

/**
 * 
 * @export
 * @interface UnitrierFluxoProdutoUpdateOferta
 */
export interface UnitrierFluxoProdutoUpdateOferta {
    /**
     * 
     * @type {number}
     * @memberof UnitrierFluxoProdutoUpdateOferta
     */
    valor?: number;
    /**
     * 
     * @type {UnitrierDataRange}
     * @memberof UnitrierFluxoProdutoUpdateOferta
     */
    periodo?: UnitrierDataRange;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierFluxoProdutoUpdateOferta
     */
    ativo?: boolean;
}

/**
 * 
 * @export
 * @interface UnitrierFluxoStats
 */
export interface UnitrierFluxoStats {
    /**
     * 
     * @type {number}
     * @memberof UnitrierFluxoStats
     */
    quantidade_produtos?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierFluxoStats
     */
    quantidade_produtos_alterados?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierFluxoStats
     */
    quantidade_produtos_aprovados?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierFluxoStats
     */
    quantidade_produtos_recusados?: number;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum UnitrierFluxoStatus {
    STATUSUNDEFINED = <any> 'STATUS_UNDEFINED',
    PENDENTE = <any> 'PENDENTE',
    APROVADO = <any> 'APROVADO',
    RECUSADO = <any> 'RECUSADO',
    SINCRONIZANDO = <any> 'SINCRONIZANDO',
    SINCRONIZADO = <any> 'SINCRONIZADO'
}

/**
 * 
 * @export
 * @interface UnitrierFornecedor
 */
export interface UnitrierFornecedor {
    /**
     * 
     * @type {string}
     * @memberof UnitrierFornecedor
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierFornecedor
     */
    codigo?: string;
    /**
     * 
     * @type {FornecedorTipoInscricao}
     * @memberof UnitrierFornecedor
     */
    tipo_inscricao?: FornecedorTipoInscricao;
    /**
     * 
     * @type {string}
     * @memberof UnitrierFornecedor
     */
    numero_inscricao?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierFornecedor
     */
    nome?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierFornecedor
     */
    razao_social?: string;
}

/**
 * 
 * @export
 * @interface UnitrierGenerateAPIKeyRequest
 */
export interface UnitrierGenerateAPIKeyRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierGenerateAPIKeyRequest
     */
    email?: string;
}

/**
 * 
 * @export
 * @interface UnitrierGenerateAPIKeyResponse
 */
export interface UnitrierGenerateAPIKeyResponse {
    /**
     * 
     * @type {string}
     * @memberof UnitrierGenerateAPIKeyResponse
     */
    access_key?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierGenerateAPIKeyResponse
     */
    secret_key?: string;
}

/**
 * 
 * @export
 * @interface UnitrierGerarAnalisePerformanceGestaoCategoriaRequest
 */
export interface UnitrierGerarAnalisePerformanceGestaoCategoriaRequest {
    /**
     * 
     * @type {UnitrierGerarAnalisePerformanceGestaoCategoriaRequestPeriodo}
     * @memberof UnitrierGerarAnalisePerformanceGestaoCategoriaRequest
     */
    analise?: UnitrierGerarAnalisePerformanceGestaoCategoriaRequestPeriodo;
    /**
     * 
     * @type {UnitrierGerarAnalisePerformanceGestaoCategoriaRequestPeriodo}
     * @memberof UnitrierGerarAnalisePerformanceGestaoCategoriaRequest
     */
    referencia?: UnitrierGerarAnalisePerformanceGestaoCategoriaRequestPeriodo;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierGerarAnalisePerformanceGestaoCategoriaRequest
     */
    unidades?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierGerarAnalisePerformanceGestaoCategoriaRequest
     */
    departamentos?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierGerarAnalisePerformanceGestaoCategoriaRequest
     */
    categorias?: Array<string>;
}

/**
 * 
 * @export
 * @interface UnitrierGerarAnalisePerformanceGestaoCategoriaRequestPeriodo
 */
export interface UnitrierGerarAnalisePerformanceGestaoCategoriaRequestPeriodo {
    /**
     * 
     * @type {string}
     * @memberof UnitrierGerarAnalisePerformanceGestaoCategoriaRequestPeriodo
     */
    inicio?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierGerarAnalisePerformanceGestaoCategoriaRequestPeriodo
     */
    fim?: string;
}

/**
 * 
 * @export
 * @interface UnitrierGerarAnalisePerformanceGestaoCategoriaResponse
 */
export interface UnitrierGerarAnalisePerformanceGestaoCategoriaResponse {
    /**
     * 
     * @type {Array<UnitrierGerarAnalisePerformanceGestaoCategoriaResponseCategoria>}
     * @memberof UnitrierGerarAnalisePerformanceGestaoCategoriaResponse
     */
    categorias?: Array<UnitrierGerarAnalisePerformanceGestaoCategoriaResponseCategoria>;
    /**
     * 
     * @type {Array<UnitrierGerarAnalisePerformanceGestaoCategoriaResponseDepartamento>}
     * @memberof UnitrierGerarAnalisePerformanceGestaoCategoriaResponse
     */
    departamentos?: Array<UnitrierGerarAnalisePerformanceGestaoCategoriaResponseDepartamento>;
    /**
     * 
     * @type {Array<UnitrierGerarAnalisePerformanceGestaoCategoriaResponseUnidade>}
     * @memberof UnitrierGerarAnalisePerformanceGestaoCategoriaResponse
     */
    unidades?: Array<UnitrierGerarAnalisePerformanceGestaoCategoriaResponseUnidade>;
    /**
     * 
     * @type {GerarAnalisePerformanceGestaoCategoriaResponseStatsRecurso}
     * @memberof UnitrierGerarAnalisePerformanceGestaoCategoriaResponse
     */
    grupo?: GerarAnalisePerformanceGestaoCategoriaResponseStatsRecurso;
    /**
     * 
     * @type {Array<GerarAnalisePerformanceGestaoCategoriaResponseResumoDesempenho>}
     * @memberof UnitrierGerarAnalisePerformanceGestaoCategoriaResponse
     */
    resumo_desempenho?: Array<GerarAnalisePerformanceGestaoCategoriaResponseResumoDesempenho>;
}

/**
 * 
 * @export
 * @interface UnitrierGerarAnalisePerformanceGestaoCategoriaResponseAnalise
 */
export interface UnitrierGerarAnalisePerformanceGestaoCategoriaResponseAnalise {
    /**
     * 
     * @type {number}
     * @memberof UnitrierGerarAnalisePerformanceGestaoCategoriaResponseAnalise
     */
    quantidade?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierGerarAnalisePerformanceGestaoCategoriaResponseAnalise
     */
    valor_venda?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierGerarAnalisePerformanceGestaoCategoriaResponseAnalise
     */
    custo?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierGerarAnalisePerformanceGestaoCategoriaResponseAnalise
     */
    lucro?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierGerarAnalisePerformanceGestaoCategoriaResponseAnalise
     */
    lucro_percentual?: number;
}

/**
 * 
 * @export
 * @interface UnitrierGerarAnalisePerformanceGestaoCategoriaResponseCategoria
 */
export interface UnitrierGerarAnalisePerformanceGestaoCategoriaResponseCategoria {
    /**
     * 
     * @type {UnitrierCategoria}
     * @memberof UnitrierGerarAnalisePerformanceGestaoCategoriaResponseCategoria
     */
    categoria?: UnitrierCategoria;
    /**
     * 
     * @type {GerarAnalisePerformanceGestaoCategoriaResponseStatsRecurso}
     * @memberof UnitrierGerarAnalisePerformanceGestaoCategoriaResponseCategoria
     */
    stats?: GerarAnalisePerformanceGestaoCategoriaResponseStatsRecurso;
}

/**
 * 
 * @export
 * @interface UnitrierGerarAnalisePerformanceGestaoCategoriaResponseDepartamento
 */
export interface UnitrierGerarAnalisePerformanceGestaoCategoriaResponseDepartamento {
    /**
     * 
     * @type {UnitrierDepartamento}
     * @memberof UnitrierGerarAnalisePerformanceGestaoCategoriaResponseDepartamento
     */
    departamento?: UnitrierDepartamento;
    /**
     * 
     * @type {GerarAnalisePerformanceGestaoCategoriaResponseStatsRecurso}
     * @memberof UnitrierGerarAnalisePerformanceGestaoCategoriaResponseDepartamento
     */
    stats?: GerarAnalisePerformanceGestaoCategoriaResponseStatsRecurso;
}

/**
 * 
 * @export
 * @interface UnitrierGerarAnalisePerformanceGestaoCategoriaResponseUnidade
 */
export interface UnitrierGerarAnalisePerformanceGestaoCategoriaResponseUnidade {
    /**
     * 
     * @type {UnitrierUnidade}
     * @memberof UnitrierGerarAnalisePerformanceGestaoCategoriaResponseUnidade
     */
    unidade?: UnitrierUnidade;
    /**
     * 
     * @type {GerarAnalisePerformanceGestaoCategoriaResponseStatsRecurso}
     * @memberof UnitrierGerarAnalisePerformanceGestaoCategoriaResponseUnidade
     */
    stats?: GerarAnalisePerformanceGestaoCategoriaResponseStatsRecurso;
}

/**
 * 
 * @export
 * @interface UnitrierGerarAnalisePerformanceRequest
 */
export interface UnitrierGerarAnalisePerformanceRequest {
    /**
     * 
     * @type {Array<UnitrierAcaoVenda>}
     * @memberof UnitrierGerarAnalisePerformanceRequest
     */
    acoes?: Array<UnitrierAcaoVenda>;
    /**
     * 
     * @type {UnitrierGerarAnalisePerformanceRequestPeriodo}
     * @memberof UnitrierGerarAnalisePerformanceRequest
     */
    analise?: UnitrierGerarAnalisePerformanceRequestPeriodo;
    /**
     * 
     * @type {UnitrierGerarAnalisePerformanceRequestPeriodo}
     * @memberof UnitrierGerarAnalisePerformanceRequest
     */
    referencia?: UnitrierGerarAnalisePerformanceRequestPeriodo;
}

/**
 * 
 * @export
 * @interface UnitrierGerarAnalisePerformanceRequestPeriodo
 */
export interface UnitrierGerarAnalisePerformanceRequestPeriodo {
    /**
     * 
     * @type {string}
     * @memberof UnitrierGerarAnalisePerformanceRequestPeriodo
     */
    inicio?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierGerarAnalisePerformanceRequestPeriodo
     */
    fim?: string;
}

/**
 * 
 * @export
 * @interface UnitrierGerarGraficoAnalisePerformanceRequest
 */
export interface UnitrierGerarGraficoAnalisePerformanceRequest {
    /**
     * 
     * @type {UnitrierGerarAnalisePerformanceRequest}
     * @memberof UnitrierGerarGraficoAnalisePerformanceRequest
     */
    analise?: UnitrierGerarAnalisePerformanceRequest;
    /**
     * 
     * @type {UnitrierGerarGraficoAnalisePerformanceRequestTipo}
     * @memberof UnitrierGerarGraficoAnalisePerformanceRequest
     */
    tipo?: UnitrierGerarGraficoAnalisePerformanceRequestTipo;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum UnitrierGerarGraficoAnalisePerformanceRequestTipo {
    UNSPECIFIED = <any> 'UNSPECIFIED',
    PRODUTO = <any> 'PRODUTO',
    CATEGORIA = <any> 'CATEGORIA',
    DEPARTAMENTO = <any> 'DEPARTAMENTO'
}

/**
 * 
 * @export
 * @interface UnitrierGerarGraficoAnalisePerformanceResponse
 */
export interface UnitrierGerarGraficoAnalisePerformanceResponse {
    /**
     * 
     * @type {UnitrierAnalyticsGraph}
     * @memberof UnitrierGerarGraficoAnalisePerformanceResponse
     */
    quantidade?: UnitrierAnalyticsGraph;
    /**
     * 
     * @type {UnitrierAnalyticsGraph}
     * @memberof UnitrierGerarGraficoAnalisePerformanceResponse
     */
    valor?: UnitrierAnalyticsGraph;
    /**
     * 
     * @type {UnitrierAnalyticsGraph}
     * @memberof UnitrierGerarGraficoAnalisePerformanceResponse
     */
    margem?: UnitrierAnalyticsGraph;
}

/**
 * 
 * @export
 * @interface UnitrierGerarRelatorioPrecificacaoRequest
 */
export interface UnitrierGerarRelatorioPrecificacaoRequest {
    /**
     * 
     * @type {number}
     * @memberof UnitrierGerarRelatorioPrecificacaoRequest
     */
    page_number?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierGerarRelatorioPrecificacaoRequest
     */
    page_size?: number;
    /**
     * 
     * @type {UnitrierGerarRelatorioPrecificacaoRequestModo}
     * @memberof UnitrierGerarRelatorioPrecificacaoRequest
     */
    modo?: UnitrierGerarRelatorioPrecificacaoRequestModo;
    /**
     * 
     * @type {Array<UnitrierMovimentoTipo>}
     * @memberof UnitrierGerarRelatorioPrecificacaoRequest
     */
    entradas_documentos?: Array<UnitrierMovimentoTipo>;
    /**
     * 
     * @type {UnitrierDataRange}
     * @memberof UnitrierGerarRelatorioPrecificacaoRequest
     */
    entradas_periodo?: UnitrierDataRange;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierGerarRelatorioPrecificacaoRequest
     */
    unidades?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierGerarRelatorioPrecificacaoRequest
     */
    departamentos?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierGerarRelatorioPrecificacaoRequest
     */
    categorias?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UnitrierGerarRelatorioPrecificacaoRequest
     */
    marca?: string;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum UnitrierGerarRelatorioPrecificacaoRequestModo {
    UNDEFINED = <any> 'UNDEFINED',
    ENTRADAS = <any> 'ENTRADAS',
    CADASTROPRODUTOS = <any> 'CADASTRO_PRODUTOS'
}

/**
 * 
 * @export
 * @interface UnitrierGerarRelatorioPrecificacaoResponse
 */
export interface UnitrierGerarRelatorioPrecificacaoResponse {
    /**
     * 
     * @type {number}
     * @memberof UnitrierGerarRelatorioPrecificacaoResponse
     */
    total_count?: number;
    /**
     * 
     * @type {UnitrierGerarRelatorioPrecificacaoRequestModo}
     * @memberof UnitrierGerarRelatorioPrecificacaoResponse
     */
    modo?: UnitrierGerarRelatorioPrecificacaoRequestModo;
    /**
     * 
     * @type {Array<UnitrierProdutoUnidade>}
     * @memberof UnitrierGerarRelatorioPrecificacaoResponse
     */
    produtos?: Array<UnitrierProdutoUnidade>;
    /**
     * 
     * @type {Array<UnitrierGerarRelatorioPrecificacaoResponseMovimento>}
     * @memberof UnitrierGerarRelatorioPrecificacaoResponse
     */
    movimentos?: Array<UnitrierGerarRelatorioPrecificacaoResponseMovimento>;
}

/**
 * 
 * @export
 * @interface UnitrierGerarRelatorioPrecificacaoResponseMovimento
 */
export interface UnitrierGerarRelatorioPrecificacaoResponseMovimento {
    /**
     * 
     * @type {UnitrierMovimento}
     * @memberof UnitrierGerarRelatorioPrecificacaoResponseMovimento
     */
    movimento?: UnitrierMovimento;
    /**
     * 
     * @type {UnitrierProdutoUnidade}
     * @memberof UnitrierGerarRelatorioPrecificacaoResponseMovimento
     */
    produto_unidade?: UnitrierProdutoUnidade;
    /**
     * 
     * @type {number}
     * @memberof UnitrierGerarRelatorioPrecificacaoResponseMovimento
     */
    valor_unitario?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierGerarRelatorioPrecificacaoResponseMovimento
     */
    margem_atual?: number;
}

/**
 * 
 * @export
 * @interface UnitrierGestaoCategoria
 */
export interface UnitrierGestaoCategoria {
    /**
     * 
     * @type {string}
     * @memberof UnitrierGestaoCategoria
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierGestaoCategoria
     */
    nome?: string;
    /**
     * 
     * @type {UnitrierGestaoCategoriaPeriodo}
     * @memberof UnitrierGestaoCategoria
     */
    periodo?: UnitrierGestaoCategoriaPeriodo;
    /**
     * 
     * @type {GestaoCategoriaRankingCurva}
     * @memberof UnitrierGestaoCategoria
     */
    tipo_ranking?: GestaoCategoriaRankingCurva;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierGestaoCategoria
     */
    todas_unidades?: boolean;
    /**
     * 
     * @type {Array<UnitrierUnidade>}
     * @memberof UnitrierGestaoCategoria
     */
    unidades?: Array<UnitrierUnidade>;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierGestaoCategoria
     */
    todos_departamentos?: boolean;
    /**
     * 
     * @type {Array<UnitrierDepartamento>}
     * @memberof UnitrierGestaoCategoria
     */
    departamentos?: Array<UnitrierDepartamento>;
    /**
     * 
     * @type {UnitrierFluxo}
     * @memberof UnitrierGestaoCategoria
     */
    fluxo?: UnitrierFluxo;
    /**
     * 
     * @type {GestaoCategoriaCategoriaStatsStatus}
     * @memberof UnitrierGestaoCategoria
     */
    status_categorias?: GestaoCategoriaCategoriaStatsStatus;
}

/**
 * 
 * @export
 * @interface UnitrierGestaoCategoriaPeriodo
 */
export interface UnitrierGestaoCategoriaPeriodo {
    /**
     * 
     * @type {string}
     * @memberof UnitrierGestaoCategoriaPeriodo
     */
    inicio?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierGestaoCategoriaPeriodo
     */
    fim?: string;
}

/**
 * 
 * @export
 * @interface UnitrierGetDepartamentosResponse
 */
export interface UnitrierGetDepartamentosResponse {
    /**
     * 
     * @type {Array<UnitrierDepartamento>}
     * @memberof UnitrierGetDepartamentosResponse
     */
    departamentos?: Array<UnitrierDepartamento>;
}

/**
 * 
 * @export
 * @interface UnitrierGetHistoricoProdutoFluxosResponse
 */
export interface UnitrierGetHistoricoProdutoFluxosResponse {
    /**
     * 
     * @type {Array<GetHistoricoProdutoFluxosResponseHistorico>}
     * @memberof UnitrierGetHistoricoProdutoFluxosResponse
     */
    unidades?: Array<GetHistoricoProdutoFluxosResponseHistorico>;
}

/**
 * 
 * @export
 * @interface UnitrierGetPesquisaExternaResponse
 */
export interface UnitrierGetPesquisaExternaResponse {
    /**
     * 
     * @type {UnitrierPesquisaExterna}
     * @memberof UnitrierGetPesquisaExternaResponse
     */
    pesquisa?: UnitrierPesquisaExterna;
}

/**
 * 
 * @export
 * @interface UnitrierGetProdutoFluxoResponse
 */
export interface UnitrierGetProdutoFluxoResponse {
    /**
     * 
     * @type {Array<UnitrierGetProdutoFluxoResponseUnidade>}
     * @memberof UnitrierGetProdutoFluxoResponse
     */
    unidades?: Array<UnitrierGetProdutoFluxoResponseUnidade>;
}

/**
 * 
 * @export
 * @interface UnitrierGetProdutoFluxoResponseUnidade
 */
export interface UnitrierGetProdutoFluxoResponseUnidade {
    /**
     * 
     * @type {UnitrierUnidade}
     * @memberof UnitrierGetProdutoFluxoResponseUnidade
     */
    unidade?: UnitrierUnidade;
    /**
     * 
     * @type {UnitrierFluxoProdutoUpdate}
     * @memberof UnitrierGetProdutoFluxoResponseUnidade
     */
    produto?: UnitrierFluxoProdutoUpdate;
    /**
     * Informa se o produto na unidade atual pode ser alterado. Não poderá ser alterado unidades fora do fluxo atual.
     * @type {boolean}
     * @memberof UnitrierGetProdutoFluxoResponseUnidade
     */
    pode_alterar?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierGetProdutoFluxoResponseUnidade
     */
    has_alteracoes?: boolean;
}

/**
 * 
 * @export
 * @interface UnitrierGetProdutoStatsResponse
 */
export interface UnitrierGetProdutoStatsResponse {
    /**
     * 
     * @type {{ [key: string]: UnitrierProdutoStats; }}
     * @memberof UnitrierGetProdutoStatsResponse
     */
    stats?: { [key: string]: UnitrierProdutoStats; };
}

/**
 * 
 * @export
 * @interface UnitrierGetProdutoUnidadesAdquiridoResponse
 */
export interface UnitrierGetProdutoUnidadesAdquiridoResponse {
    /**
     * 
     * @type {Array<UnitrierGetProdutoUnidadesAdquiridoResponseProdutoUnidade>}
     * @memberof UnitrierGetProdutoUnidadesAdquiridoResponse
     */
    unidades?: Array<UnitrierGetProdutoUnidadesAdquiridoResponseProdutoUnidade>;
}

/**
 * 
 * @export
 * @interface UnitrierGetProdutoUnidadesAdquiridoResponseProdutoUnidade
 */
export interface UnitrierGetProdutoUnidadesAdquiridoResponseProdutoUnidade {
    /**
     * 
     * @type {UnitrierUnidade}
     * @memberof UnitrierGetProdutoUnidadesAdquiridoResponseProdutoUnidade
     */
    unidade?: UnitrierUnidade;
    /**
     * 
     * @type {UnitrierProduto}
     * @memberof UnitrierGetProdutoUnidadesAdquiridoResponseProdutoUnidade
     */
    produto?: UnitrierProduto;
    /**
     * 
     * @type {number}
     * @memberof UnitrierGetProdutoUnidadesAdquiridoResponseProdutoUnidade
     */
    preco_venda?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierGetProdutoUnidadesAdquiridoResponseProdutoUnidade
     */
    preco_venda2?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierGetProdutoUnidadesAdquiridoResponseProdutoUnidade
     */
    preco_venda3?: number;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierGetProdutoUnidadesAdquiridoResponseProdutoUnidade
     */
    em_oferta?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UnitrierGetProdutoUnidadesAdquiridoResponseProdutoUnidade
     */
    oferta_inicio?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierGetProdutoUnidadesAdquiridoResponseProdutoUnidade
     */
    oferta_fim?: string;
}

/**
 * 
 * @export
 * @interface UnitrierGetSugestaoProdutosTipoPesquisaResponse
 */
export interface UnitrierGetSugestaoProdutosTipoPesquisaResponse {
    /**
     * 
     * @type {Array<UnitrierProduto>}
     * @memberof UnitrierGetSugestaoProdutosTipoPesquisaResponse
     */
    produtos?: Array<UnitrierProduto>;
}

/**
 * 
 * @export
 * @interface UnitrierGetUnidadesResponse
 */
export interface UnitrierGetUnidadesResponse {
    /**
     * 
     * @type {Array<UnitrierUnidade>}
     * @memberof UnitrierGetUnidadesResponse
     */
    unidades?: Array<UnitrierUnidade>;
}

/**
 * 
 * @export
 * @interface UnitrierGetUsuarioPerfisResponse
 */
export interface UnitrierGetUsuarioPerfisResponse {
    /**
     * 
     * @type {Array<UnitrierPerfil>}
     * @memberof UnitrierGetUsuarioPerfisResponse
     */
    perfis?: Array<UnitrierPerfil>;
}

/**
 * 
 * @export
 * @interface UnitrierGetValoresProdutosResponse
 */
export interface UnitrierGetValoresProdutosResponse {
    /**
     * 
     * @type {Array<UnitrierPesquisaProdutoUnidade>}
     * @memberof UnitrierGetValoresProdutosResponse
     */
    unidades?: Array<UnitrierPesquisaProdutoUnidade>;
    /**
     * 
     * @type {Array<PesquisaProdutoConcorrente>}
     * @memberof UnitrierGetValoresProdutosResponse
     */
    concorrentes?: Array<PesquisaProdutoConcorrente>;
}

/**
 * 
 * @export
 * @interface UnitrierGiroEstoqueRequest
 */
export interface UnitrierGiroEstoqueRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierGiroEstoqueRequest
     */
    unidades?: Array<string>;
}

/**
 * 
 * @export
 * @interface UnitrierHistoricIntegratorResponse
 */
export interface UnitrierHistoricIntegratorResponse {
    /**
     * 
     * @type {Array<UnitrierLastStatusIntegrator>}
     * @memberof UnitrierHistoricIntegratorResponse
     */
    historico?: Array<UnitrierLastStatusIntegrator>;
    /**
     * 
     * @type {number}
     * @memberof UnitrierHistoricIntegratorResponse
     */
    total_count?: number;
}

/**
 * 
 * @export
 * @interface UnitrierImportCategoriasRequest
 */
export interface UnitrierImportCategoriasRequest {
    /**
     * 
     * @type {Array<UnitrierImportCategoriasRequestCategoria>}
     * @memberof UnitrierImportCategoriasRequest
     */
    categorias?: Array<UnitrierImportCategoriasRequestCategoria>;
}

/**
 * 
 * @export
 * @interface UnitrierImportCategoriasRequestCategoria
 */
export interface UnitrierImportCategoriasRequestCategoria {
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportCategoriasRequestCategoria
     */
    codigo?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportCategoriasRequestCategoria
     */
    classificacao?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportCategoriasRequestCategoria
     */
    nome?: string;
}

/**
 * 
 * @export
 * @interface UnitrierImportCategoriasResponse
 */
export interface UnitrierImportCategoriasResponse {
}

/**
 * 
 * @export
 * @interface UnitrierImportConcorrentesRequest
 */
export interface UnitrierImportConcorrentesRequest {
    /**
     * 
     * @type {Array<UnitrierImportConcorrentesRequestConcorrente>}
     * @memberof UnitrierImportConcorrentesRequest
     */
    concorrentes?: Array<UnitrierImportConcorrentesRequestConcorrente>;
}

/**
 * 
 * @export
 * @interface UnitrierImportConcorrentesRequestConcorrente
 */
export interface UnitrierImportConcorrentesRequestConcorrente {
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportConcorrentesRequestConcorrente
     */
    codigo?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportConcorrentesRequestConcorrente
     */
    cnpj?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportConcorrentesRequestConcorrente
     */
    razao_social?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportConcorrentesRequestConcorrente
     */
    nome_fantasia?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierImportConcorrentesRequestConcorrente
     */
    unidades?: Array<string>;
}

/**
 * 
 * @export
 * @interface UnitrierImportConcorrentesResponse
 */
export interface UnitrierImportConcorrentesResponse {
}

/**
 * 
 * @export
 * @interface UnitrierImportDepartamentosRequest
 */
export interface UnitrierImportDepartamentosRequest {
    /**
     * 
     * @type {Array<UnitrierImportDepartamentosRequestDepartamento>}
     * @memberof UnitrierImportDepartamentosRequest
     */
    departamentos?: Array<UnitrierImportDepartamentosRequestDepartamento>;
}

/**
 * 
 * @export
 * @interface UnitrierImportDepartamentosRequestDepartamento
 */
export interface UnitrierImportDepartamentosRequestDepartamento {
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportDepartamentosRequestDepartamento
     */
    codigo?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportDepartamentosRequestDepartamento
     */
    nome?: string;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportDepartamentosRequestDepartamento
     */
    custo_operacional?: number;
}

/**
 * 
 * @export
 * @interface UnitrierImportDepartamentosResponse
 */
export interface UnitrierImportDepartamentosResponse {
}

/**
 * 
 * @export
 * @interface UnitrierImportFornecedoresRequest
 */
export interface UnitrierImportFornecedoresRequest {
    /**
     * 
     * @type {Array<UnitrierImportFornecedoresRequestFornecedor>}
     * @memberof UnitrierImportFornecedoresRequest
     */
    Fornecedores?: Array<UnitrierImportFornecedoresRequestFornecedor>;
}

/**
 * 
 * @export
 * @interface UnitrierImportFornecedoresRequestFornecedor
 */
export interface UnitrierImportFornecedoresRequestFornecedor {
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportFornecedoresRequestFornecedor
     */
    codigo?: string;
    /**
     * 
     * @type {FornecedorTipoInscricao}
     * @memberof UnitrierImportFornecedoresRequestFornecedor
     */
    tipo_inscricao?: FornecedorTipoInscricao;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportFornecedoresRequestFornecedor
     */
    numero_inscricao?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportFornecedoresRequestFornecedor
     */
    nome?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportFornecedoresRequestFornecedor
     */
    razao_social?: string;
}

/**
 * 
 * @export
 * @interface UnitrierImportFornecedoresResponse
 */
export interface UnitrierImportFornecedoresResponse {
}

/**
 * 
 * @export
 * @interface UnitrierImportMetasRequest
 */
export interface UnitrierImportMetasRequest {
    /**
     * 
     * @type {Array<UnitrierImportMetasRequestMeta>}
     * @memberof UnitrierImportMetasRequest
     */
    metas?: Array<UnitrierImportMetasRequestMeta>;
}

/**
 * 
 * @export
 * @interface UnitrierImportMetasRequestMeta
 */
export interface UnitrierImportMetasRequestMeta {
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportMetasRequestMeta
     */
    unidade?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportMetasRequestMeta
     */
    departamento?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportMetasRequestMeta
     */
    data?: string;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportMetasRequestMeta
     */
    venda?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportMetasRequestMeta
     */
    lucro?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportMetasRequestMeta
     */
    estoque?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportMetasRequestMeta
     */
    compra?: number;
}

/**
 * 
 * @export
 * @interface UnitrierImportMetasResponse
 */
export interface UnitrierImportMetasResponse {
}

/**
 * 
 * @export
 * @interface UnitrierImportMovimentosPesquisaRequest
 */
export interface UnitrierImportMovimentosPesquisaRequest {
    /**
     * 
     * @type {Array<UnitrierImportMovimentosPesquisaRequestMovimentoPesquisa>}
     * @memberof UnitrierImportMovimentosPesquisaRequest
     */
    movimentos?: Array<UnitrierImportMovimentosPesquisaRequestMovimentoPesquisa>;
}

/**
 * 
 * @export
 * @interface UnitrierImportMovimentosPesquisaRequestMovimentoPesquisa
 */
export interface UnitrierImportMovimentosPesquisaRequestMovimentoPesquisa {
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportMovimentosPesquisaRequestMovimentoPesquisa
     */
    codigo?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportMovimentosPesquisaRequestMovimentoPesquisa
     */
    unidade?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportMovimentosPesquisaRequestMovimentoPesquisa
     */
    concorrente?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportMovimentosPesquisaRequestMovimentoPesquisa
     */
    produto?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportMovimentosPesquisaRequestMovimentoPesquisa
     */
    data?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportMovimentosPesquisaRequestMovimentoPesquisa
     */
    validade?: string;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportMovimentosPesquisaRequestMovimentoPesquisa
     */
    preco?: number;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierImportMovimentosPesquisaRequestMovimentoPesquisa
     */
    oferta?: boolean;
    /**
     * 
     * @type {UnitrierMovimentoPesquisaTipo}
     * @memberof UnitrierImportMovimentosPesquisaRequestMovimentoPesquisa
     */
    tipo?: UnitrierMovimentoPesquisaTipo;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportMovimentosPesquisaRequestMovimentoPesquisa
     */
    fator?: number;
}

/**
 * 
 * @export
 * @interface UnitrierImportMovimentosPesquisaResponse
 */
export interface UnitrierImportMovimentosPesquisaResponse {
}

/**
 * 
 * @export
 * @interface UnitrierImportMovimentosRequest
 */
export interface UnitrierImportMovimentosRequest {
    /**
     * 
     * @type {Array<UnitrierImportMovimentosRequestMovimento>}
     * @memberof UnitrierImportMovimentosRequest
     */
    movimentos?: Array<UnitrierImportMovimentosRequestMovimento>;
}

/**
 * 
 * @export
 * @interface UnitrierImportMovimentosRequestMovimento
 */
export interface UnitrierImportMovimentosRequestMovimento {
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportMovimentosRequestMovimento
     */
    codigo?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportMovimentosRequestMovimento
     */
    unidade?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportMovimentosRequestMovimento
     */
    produto?: string;
    /**
     * 
     * @type {UnitrierMovimentoTipo}
     * @memberof UnitrierImportMovimentosRequestMovimento
     */
    tipo?: UnitrierMovimentoTipo;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportMovimentosRequestMovimento
     */
    tipo_obs?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportMovimentosRequestMovimento
     */
    data?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierImportMovimentosRequestMovimento
     */
    oferta?: boolean;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportMovimentosRequestMovimento
     */
    quantidade?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportMovimentosRequestMovimento
     */
    custo_medio?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportMovimentosRequestMovimento
     */
    valor?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportMovimentosRequestMovimento
     */
    lucro?: number;
    /**
     * Informa se o movimento foi cancelado.
     * @type {boolean}
     * @memberof UnitrierImportMovimentosRequestMovimento
     */
    cancelado?: boolean;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportMovimentosRequestMovimento
     */
    tributacao_icms?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportMovimentosRequestMovimento
     */
    tributacao_pis?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportMovimentosRequestMovimento
     */
    tributacao_cofins?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportMovimentosRequestMovimento
     */
    outros_acrescimos?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportMovimentosRequestMovimento
     */
    outros_descontos?: number;
}

/**
 * 
 * @export
 * @interface UnitrierImportMovimentosResponse
 */
export interface UnitrierImportMovimentosResponse {
}

/**
 * 
 * @export
 * @interface UnitrierImportProdutosRequest
 */
export interface UnitrierImportProdutosRequest {
    /**
     * 
     * @type {Array<UnitrierImportProdutosRequestProduto>}
     * @memberof UnitrierImportProdutosRequest
     */
    produtos?: Array<UnitrierImportProdutosRequestProduto>;
}

/**
 * 
 * @export
 * @interface UnitrierImportProdutosRequestProduto
 */
export interface UnitrierImportProdutosRequestProduto {
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    unidade?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    codigo?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    descricao?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    descricao_pdv?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    codigo_barra?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    ativo?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    bloqueado?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    departamento_id?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    grupo_id?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    codigo_preco?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    marca?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    complemento?: string;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    preco_atual?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    preco_normal?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    preco_compra?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    custo_compra?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    custo_medio?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    custo_total?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    custo_transferencia?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    custo_fiscal?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    custo_venda?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    custo_empresa?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    margem?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    margem_minima?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    estoque?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    estoque2?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    estoque3?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    estoque4?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    estoque5?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    preco_venda2?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    preco_venda3?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    preco_venda4?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    preco_venda5?: number;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    oferta?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    oferta_inicio?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    oferta_fim?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    preco2_ativo?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    preco3_ativo?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    preco4_ativo?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    preco5_ativo?: boolean;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    preco3_margem?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    preco4_margem?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    preco5_margem?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    preco3_fator?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    preco4_fator?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    preco5_fator?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    tributacao_icms?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    tributacao_ipi?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    tributacao_pis?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    tributacao_cofins?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    tributacao_icms_st?: number;
    /**
     * 
     * @type {Array<ProdutoUnidadeCampoAdicional>}
     * @memberof UnitrierImportProdutosRequestProduto
     */
    campos_adicionais?: Array<ProdutoUnidadeCampoAdicional>;
}

/**
 * 
 * @export
 * @interface UnitrierImportProdutosResponse
 */
export interface UnitrierImportProdutosResponse {
}

/**
 * 
 * @export
 * @interface UnitrierImportUnidadesRequest
 */
export interface UnitrierImportUnidadesRequest {
    /**
     * 
     * @type {Array<UnitrierImportUnidadesRequestUnidade>}
     * @memberof UnitrierImportUnidadesRequest
     */
    unidades?: Array<UnitrierImportUnidadesRequestUnidade>;
}

/**
 * 
 * @export
 * @interface UnitrierImportUnidadesRequestUnidade
 */
export interface UnitrierImportUnidadesRequestUnidade {
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportUnidadesRequestUnidade
     */
    codigo?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportUnidadesRequestUnidade
     */
    cnpj?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierImportUnidadesRequestUnidade
     */
    nome?: string;
}

/**
 * 
 * @export
 * @interface UnitrierImportUnidadesResponse
 */
export interface UnitrierImportUnidadesResponse {
}

/**
 * 
 * @export
 * @interface UnitrierInicializarPrecosAcaoVendaRequest
 */
export interface UnitrierInicializarPrecosAcaoVendaRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierInicializarPrecosAcaoVendaRequest
     */
    uuid?: string;
    /**
     * 
     * @type {UnitrierInicializarPrecosAcaoVendaRequestAcao}
     * @memberof UnitrierInicializarPrecosAcaoVendaRequest
     */
    acao?: UnitrierInicializarPrecosAcaoVendaRequestAcao;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum UnitrierInicializarPrecosAcaoVendaRequestAcao {
    UNDEFINED = <any> 'UNDEFINED',
    LIMPAR = <any> 'LIMPAR',
    MINIMO = <any> 'MINIMO',
    MEDIO = <any> 'MEDIO',
    MAXIMO = <any> 'MAXIMO'
}

/**
 * 
 * @export
 * @interface UnitrierInicializarPrecosRequest
 */
export interface UnitrierInicializarPrecosRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierInicializarPrecosRequest
     */
    uuid?: string;
    /**
     * 
     * @type {UnitrierInicializarPrecosRequestModo}
     * @memberof UnitrierInicializarPrecosRequest
     */
    modo?: UnitrierInicializarPrecosRequestModo;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierInicializarPrecosRequest
     */
    bloquear_margem_minima?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierInicializarPrecosRequest
     */
    aplicar_ajuste_preco?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UnitrierInicializarPrecosRequest
     */
    concorrente_uuid?: string;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum UnitrierInicializarPrecosRequestModo {
    UNDEFINED = <any> 'UNDEFINED',
    MENORPRECO = <any> 'MENOR_PRECO',
    MAIORPRECO = <any> 'MAIOR_PRECO',
    CONCORRENTE = <any> 'CONCORRENTE'
}

/**
 * 
 * @export
 * @interface UnitrierInicializarProdutosAcaoVendaRequest
 */
export interface UnitrierInicializarProdutosAcaoVendaRequest {
    /**
     * 
     * @type {AcaoVendaModelo}
     * @memberof UnitrierInicializarProdutosAcaoVendaRequest
     */
    modelo?: AcaoVendaModelo;
    /**
     * 
     * @type {string}
     * @memberof UnitrierInicializarProdutosAcaoVendaRequest
     */
    tipo_acao_uuid?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierInicializarProdutosAcaoVendaRequest
     */
    unidades_uuids?: Array<string>;
    /**
     * 
     * @type {UnitrierInicializarProdutosAcaoVendaRequestFiltro}
     * @memberof UnitrierInicializarProdutosAcaoVendaRequest
     */
    filtro?: UnitrierInicializarProdutosAcaoVendaRequestFiltro;
}

/**
 * 
 * @export
 * @interface UnitrierInicializarProdutosAcaoVendaRequestFiltro
 */
export interface UnitrierInicializarProdutosAcaoVendaRequestFiltro {
    /**
     * 
     * @type {string}
     * @memberof UnitrierInicializarProdutosAcaoVendaRequestFiltro
     */
    curva?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierInicializarProdutosAcaoVendaRequestFiltro
     */
    categorias?: Array<string>;
}

/**
 * 
 * @export
 * @interface UnitrierInicializarProdutosAcaoVendaResponse
 */
export interface UnitrierInicializarProdutosAcaoVendaResponse {
    /**
     * 
     * @type {Array<UnitrierProduto>}
     * @memberof UnitrierInicializarProdutosAcaoVendaResponse
     */
    produtos?: Array<UnitrierProduto>;
}

/**
 * 
 * @export
 * @interface UnitrierIniciarAnaliseRequest
 */
export interface UnitrierIniciarAnaliseRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierIniciarAnaliseRequest
     */
    uuid?: string;
}

/**
 * 
 * @export
 * @interface UnitrierInsertSimilarRequest
 */
export interface UnitrierInsertSimilarRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierInsertSimilarRequest
     */
    categoria_uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierInsertSimilarRequest
     */
    categoria_similar_uuid?: string;
}

/**
 * 
 * @export
 * @interface UnitrierIntegratorID
 */
export interface UnitrierIntegratorID {
    /**
     * 
     * @type {string}
     * @memberof UnitrierIntegratorID
     */
    id?: string;
}

/**
 * 
 * @export
 * @interface UnitrierLastStatusIntegrator
 */
export interface UnitrierLastStatusIntegrator {
    /**
     * 
     * @type {number}
     * @memberof UnitrierLastStatusIntegrator
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof UnitrierLastStatusIntegrator
     */
    nome?: string;
    /**
     * 
     * @type {number}
     * @memberof UnitrierLastStatusIntegrator
     */
    status?: number;
    /**
     * 
     * @type {string}
     * @memberof UnitrierLastStatusIntegrator
     */
    last_update?: string;
}

/**
 * 
 * @export
 * @interface UnitrierListAPIKeysResponse
 */
export interface UnitrierListAPIKeysResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierListAPIKeysResponse
     */
    apikey?: Array<string>;
}

/**
 * 
 * @export
 * @interface UnitrierListAcoesVendasResponse
 */
export interface UnitrierListAcoesVendasResponse {
    /**
     * 
     * @type {Array<UnitrierAcaoVenda>}
     * @memberof UnitrierListAcoesVendasResponse
     */
    acoes?: Array<UnitrierAcaoVenda>;
}

/**
 * 
 * @export
 * @interface UnitrierListAdminResponse
 */
export interface UnitrierListAdminResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierListAdminResponse
     */
    emails?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof UnitrierListAdminResponse
     */
    total_count?: number;
}

/**
 * 
 * @export
 * @interface UnitrierListAlertasEntidadeResponse
 */
export interface UnitrierListAlertasEntidadeResponse {
    /**
     * 
     * @type {Array<ListAlertasEntidadeResponseAlerta>}
     * @memberof UnitrierListAlertasEntidadeResponse
     */
    alertas?: Array<ListAlertasEntidadeResponseAlerta>;
}

/**
 * 
 * @export
 * @interface UnitrierListAutorizadosDesincronizadosResponse
 */
export interface UnitrierListAutorizadosDesincronizadosResponse {
    /**
     * 
     * @type {Array<UnitrierListAutorizadosDesincronizadosResponseFluxo>}
     * @memberof UnitrierListAutorizadosDesincronizadosResponse
     */
    fluxos?: Array<UnitrierListAutorizadosDesincronizadosResponseFluxo>;
}

/**
 * 
 * @export
 * @interface UnitrierListAutorizadosDesincronizadosResponseFluxo
 */
export interface UnitrierListAutorizadosDesincronizadosResponseFluxo {
    /**
     * 
     * @type {UnitrierFluxo}
     * @memberof UnitrierListAutorizadosDesincronizadosResponseFluxo
     */
    fluxo?: UnitrierFluxo;
    /**
     * 
     * @type {Array<UnitrierFluxoProdutoUnidade>}
     * @memberof UnitrierListAutorizadosDesincronizadosResponseFluxo
     */
    produtos?: Array<UnitrierFluxoProdutoUnidade>;
}

/**
 * 
 * @export
 * @interface UnitrierListCategoriasResponse
 */
export interface UnitrierListCategoriasResponse {
    /**
     * 
     * @type {Array<UnitrierCategoria>}
     * @memberof UnitrierListCategoriasResponse
     */
    categorias?: Array<UnitrierCategoria>;
}

/**
 * 
 * @export
 * @interface UnitrierListConcorrentesResponse
 */
export interface UnitrierListConcorrentesResponse {
    /**
     * 
     * @type {Array<UnitrierConcorrente>}
     * @memberof UnitrierListConcorrentesResponse
     */
    concorrentes?: Array<UnitrierConcorrente>;
    /**
     * 
     * @type {number}
     * @memberof UnitrierListConcorrentesResponse
     */
    total_count?: number;
}

/**
 * 
 * @export
 * @interface UnitrierListCurvasResponse
 */
export interface UnitrierListCurvasResponse {
    /**
     * 
     * @type {Array<UnitrierCurva>}
     * @memberof UnitrierListCurvasResponse
     */
    curvas?: Array<UnitrierCurva>;
}

/**
 * 
 * @export
 * @interface UnitrierListDepartamentosResponse
 */
export interface UnitrierListDepartamentosResponse {
    /**
     * 
     * @type {Array<UnitrierDepartamento>}
     * @memberof UnitrierListDepartamentosResponse
     */
    departamentos?: Array<UnitrierDepartamento>;
}

/**
 * 
 * @export
 * @interface UnitrierListEntidadesResponse
 */
export interface UnitrierListEntidadesResponse {
    /**
     * 
     * @type {Array<UnitrierEntidade>}
     * @memberof UnitrierListEntidadesResponse
     */
    entidades?: Array<UnitrierEntidade>;
    /**
     * 
     * @type {number}
     * @memberof UnitrierListEntidadesResponse
     */
    total_count?: number;
}

/**
 * 
 * @export
 * @interface UnitrierListFluxosResponse
 */
export interface UnitrierListFluxosResponse {
    /**
     * 
     * @type {Array<UnitrierFluxo>}
     * @memberof UnitrierListFluxosResponse
     */
    fluxos?: Array<UnitrierFluxo>;
}

/**
 * 
 * @export
 * @interface UnitrierListFornecedoresResponse
 */
export interface UnitrierListFornecedoresResponse {
    /**
     * 
     * @type {Array<UnitrierFornecedor>}
     * @memberof UnitrierListFornecedoresResponse
     */
    fornecedores?: Array<UnitrierFornecedor>;
    /**
     * 
     * @type {number}
     * @memberof UnitrierListFornecedoresResponse
     */
    total_count?: number;
}

/**
 * 
 * @export
 * @interface UnitrierListGestaoCategoriasResponse
 */
export interface UnitrierListGestaoCategoriasResponse {
    /**
     * 
     * @type {Array<UnitrierGestaoCategoria>}
     * @memberof UnitrierListGestaoCategoriasResponse
     */
    processos?: Array<UnitrierGestaoCategoria>;
}

/**
 * 
 * @export
 * @interface UnitrierListLastStatusIntegratorsResponse
 */
export interface UnitrierListLastStatusIntegratorsResponse {
    /**
     * 
     * @type {Array<UnitrierLastStatusIntegrator>}
     * @memberof UnitrierListLastStatusIntegratorsResponse
     */
    integrators?: Array<UnitrierLastStatusIntegrator>;
}

/**
 * 
 * @export
 * @interface UnitrierListModeloPrecificacaoResponse
 */
export interface UnitrierListModeloPrecificacaoResponse {
    /**
     * 
     * @type {Array<UnitrierModeloPrecificacao>}
     * @memberof UnitrierListModeloPrecificacaoResponse
     */
    modelos?: Array<UnitrierModeloPrecificacao>;
}

/**
 * 
 * @export
 * @interface UnitrierListMovimentosAdminResponse
 */
export interface UnitrierListMovimentosAdminResponse {
    /**
     * 
     * @type {Array<UnitrierMovimento>}
     * @memberof UnitrierListMovimentosAdminResponse
     */
    movimentos?: Array<UnitrierMovimento>;
    /**
     * 
     * @type {number}
     * @memberof UnitrierListMovimentosAdminResponse
     */
    total_count?: number;
}

/**
 * 
 * @export
 * @interface UnitrierListPerfisResponse
 */
export interface UnitrierListPerfisResponse {
    /**
     * 
     * @type {Array<UnitrierPerfil>}
     * @memberof UnitrierListPerfisResponse
     */
    perfis?: Array<UnitrierPerfil>;
}

/**
 * 
 * @export
 * @interface UnitrierListPermissoesResponse
 */
export interface UnitrierListPermissoesResponse {
    /**
     * 
     * @type {Array<UnitrierPermissao>}
     * @memberof UnitrierListPermissoesResponse
     */
    permissoes?: Array<UnitrierPermissao>;
    /**
     * 
     * @type {number}
     * @memberof UnitrierListPermissoesResponse
     */
    total_count?: number;
}

/**
 * 
 * @export
 * @interface UnitrierListPesquisasExternasResponse
 */
export interface UnitrierListPesquisasExternasResponse {
    /**
     * 
     * @type {Array<UnitrierListPesquisasExternasResponsePesquisa>}
     * @memberof UnitrierListPesquisasExternasResponse
     */
    pesquisas?: Array<UnitrierListPesquisasExternasResponsePesquisa>;
}

/**
 * 
 * @export
 * @interface UnitrierListPesquisasExternasResponsePesquisa
 */
export interface UnitrierListPesquisasExternasResponsePesquisa {
    /**
     * 
     * @type {string}
     * @memberof UnitrierListPesquisasExternasResponsePesquisa
     */
    data?: string;
    /**
     * 
     * @type {number}
     * @memberof UnitrierListPesquisasExternasResponsePesquisa
     */
    produtos_count?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierListPesquisasExternasResponsePesquisa
     */
    concorrentes_count?: number;
}

/**
 * 
 * @export
 * @interface UnitrierListPesquisasResponse
 */
export interface UnitrierListPesquisasResponse {
    /**
     * 
     * @type {Array<UnitrierPesquisa>}
     * @memberof UnitrierListPesquisasResponse
     */
    pesquisas?: Array<UnitrierPesquisa>;
}

/**
 * 
 * @export
 * @interface UnitrierListProdutosAdquiridosRequest
 */
export interface UnitrierListProdutosAdquiridosRequest {
    /**
     * 
     * @type {UnitrierListProdutosAdquiridosRequestPeriodo}
     * @memberof UnitrierListProdutosAdquiridosRequest
     */
    periodo?: UnitrierListProdutosAdquiridosRequestPeriodo;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierListProdutosAdquiridosRequest
     */
    unidades?: Array<string>;
    /**
     * 
     * @type {ListProdutosAdquiridosRequestSituacao}
     * @memberof UnitrierListProdutosAdquiridosRequest
     */
    situacao?: ListProdutosAdquiridosRequestSituacao;
    /**
     * 
     * @type {number}
     * @memberof UnitrierListProdutosAdquiridosRequest
     */
    page_number?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierListProdutosAdquiridosRequest
     */
    page_size?: number;
}

/**
 * 
 * @export
 * @interface UnitrierListProdutosAdquiridosRequestPeriodo
 */
export interface UnitrierListProdutosAdquiridosRequestPeriodo {
    /**
     * 
     * @type {string}
     * @memberof UnitrierListProdutosAdquiridosRequestPeriodo
     */
    inicio?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierListProdutosAdquiridosRequestPeriodo
     */
    fim?: string;
}

/**
 * 
 * @export
 * @interface UnitrierListProdutosAdquiridosResponse
 */
export interface UnitrierListProdutosAdquiridosResponse {
    /**
     * 
     * @type {Array<ListProdutosAdquiridosResponseProdutoAdquirido>}
     * @memberof UnitrierListProdutosAdquiridosResponse
     */
    produtos?: Array<ListProdutosAdquiridosResponseProdutoAdquirido>;
    /**
     * 
     * @type {number}
     * @memberof UnitrierListProdutosAdquiridosResponse
     */
    total_count?: number;
}

/**
 * 
 * @export
 * @interface UnitrierListProdutosFluxoResponse
 */
export interface UnitrierListProdutosFluxoResponse {
    /**
     * 
     * @type {Array<UnitrierFluxoProdutoUnidade>}
     * @memberof UnitrierListProdutosFluxoResponse
     */
    produtos?: Array<UnitrierFluxoProdutoUnidade>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierListProdutosFluxoResponse
     */
    meses_vendas?: Array<string>;
}

/**
 * 
 * @export
 * @interface UnitrierListProdutosResponse
 */
export interface UnitrierListProdutosResponse {
    /**
     * 
     * @type {Array<UnitrierProduto>}
     * @memberof UnitrierListProdutosResponse
     */
    produtos?: Array<UnitrierProduto>;
    /**
     * 
     * @type {number}
     * @memberof UnitrierListProdutosResponse
     */
    total_count?: number;
}

/**
 * 
 * @export
 * @interface UnitrierListSimilaresResponse
 */
export interface UnitrierListSimilaresResponse {
    /**
     * 
     * @type {Array<UnitrierCategoriaSimilares>}
     * @memberof UnitrierListSimilaresResponse
     */
    categorias?: Array<UnitrierCategoriaSimilares>;
    /**
     * 
     * @type {number}
     * @memberof UnitrierListSimilaresResponse
     */
    total_count?: number;
}

/**
 * 
 * @export
 * @interface UnitrierListTipoPesquisaResponse
 */
export interface UnitrierListTipoPesquisaResponse {
    /**
     * 
     * @type {Array<UnitrierTipoPesquisa>}
     * @memberof UnitrierListTipoPesquisaResponse
     */
    tipos?: Array<UnitrierTipoPesquisa>;
}

/**
 * 
 * @export
 * @interface UnitrierListTiposAcaoVendaResponse
 */
export interface UnitrierListTiposAcaoVendaResponse {
    /**
     * 
     * @type {Array<UnitrierTipoAcaoVenda>}
     * @memberof UnitrierListTiposAcaoVendaResponse
     */
    tipos?: Array<UnitrierTipoAcaoVenda>;
}

/**
 * 
 * @export
 * @interface UnitrierListUnidadesAdminResponse
 */
export interface UnitrierListUnidadesAdminResponse {
    /**
     * 
     * @type {Array<UnitrierUnidade>}
     * @memberof UnitrierListUnidadesAdminResponse
     */
    unidades?: Array<UnitrierUnidade>;
    /**
     * 
     * @type {number}
     * @memberof UnitrierListUnidadesAdminResponse
     */
    total_count?: number;
}

/**
 * 
 * @export
 * @interface UnitrierListUnidadesEntidadeResponse
 */
export interface UnitrierListUnidadesEntidadeResponse {
    /**
     * 
     * @type {Array<UnitrierUnidade>}
     * @memberof UnitrierListUnidadesEntidadeResponse
     */
    unidades?: Array<UnitrierUnidade>;
}

/**
 * 
 * @export
 * @interface UnitrierListUnidadesResponse
 */
export interface UnitrierListUnidadesResponse {
    /**
     * 
     * @type {Array<UnitrierUnidade>}
     * @memberof UnitrierListUnidadesResponse
     */
    unidades?: Array<UnitrierUnidade>;
}

/**
 * 
 * @export
 * @interface UnitrierListUsuariosResponse
 */
export interface UnitrierListUsuariosResponse {
    /**
     * 
     * @type {Array<UnitrierUsuario>}
     * @memberof UnitrierListUsuariosResponse
     */
    usuarios?: Array<UnitrierUsuario>;
}

/**
 * 
 * @export
 * @interface UnitrierLucroRecuperadoRequest
 */
export interface UnitrierLucroRecuperadoRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierLucroRecuperadoRequest
     */
    ano_mes?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierLucroRecuperadoRequest
     */
    unidades?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierLucroRecuperadoRequest
     */
    detalhado?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UnitrierLucroRecuperadoRequest
     */
    departamento?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierLucroRecuperadoRequest
     */
    categoria?: string;
}

/**
 * 
 * @export
 * @interface UnitrierModeloPrecificacao
 */
export interface UnitrierModeloPrecificacao {
    /**
     * 
     * @type {string}
     * @memberof UnitrierModeloPrecificacao
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierModeloPrecificacao
     */
    departamento?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierModeloPrecificacao
     */
    grupo?: string;
    /**
     * 
     * @type {UnitrierTipoPesquisa}
     * @memberof UnitrierModeloPrecificacao
     */
    tipo_pesquisa?: UnitrierTipoPesquisa;
    /**
     * 
     * @type {ModeloPrecificacaoTipoPrecificacao}
     * @memberof UnitrierModeloPrecificacao
     */
    tipo_precificacao?: ModeloPrecificacaoTipoPrecificacao;
}

/**
 * 
 * @export
 * @interface UnitrierMovimento
 */
export interface UnitrierMovimento {
    /**
     * 
     * @type {UnitrierUnidade}
     * @memberof UnitrierMovimento
     */
    unidade?: UnitrierUnidade;
    /**
     * 
     * @type {UnitrierProduto}
     * @memberof UnitrierMovimento
     */
    produto?: UnitrierProduto;
    /**
     * 
     * @type {UnitrierMovimentoTipo}
     * @memberof UnitrierMovimento
     */
    tipo?: UnitrierMovimentoTipo;
    /**
     * 
     * @type {string}
     * @memberof UnitrierMovimento
     */
    data?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierMovimento
     */
    oferta?: boolean;
    /**
     * 
     * @type {number}
     * @memberof UnitrierMovimento
     */
    quantidade?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierMovimento
     */
    custo_medio?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierMovimento
     */
    valor?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierMovimento
     */
    lucro?: number;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierMovimento
     */
    cancelado?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UnitrierMovimento
     */
    data_cadastro?: string;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum UnitrierMovimentoPesquisaTipo {
    UNKNOWN = <any> 'UNKNOWN',
    NORMAL = <any> 'NORMAL',
    FRACIONADO = <any> 'FRACIONADO'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum UnitrierMovimentoTipo {
    UNKNOWN = <any> 'UNKNOWN',
    ENTRADAAQUISICAO = <any> 'ENTRADA_AQUISICAO',
    ENTRADABONIFICACAORECEBIDA = <any> 'ENTRADA_BONIFICACAO_RECEBIDA',
    ENTRADATRANSFERENCIA = <any> 'ENTRADA_TRANSFERENCIA',
    ENTRADADEVOLUCAOVENDA = <any> 'ENTRADA_DEVOLUCAO_VENDA',
    SAIDAVENDAPDV = <any> 'SAIDA_VENDA_PDV',
    SAIDAVENDADIRETA = <any> 'SAIDA_VENDA_DIRETA',
    SAIDAVENDAENTRELOJAS = <any> 'SAIDA_VENDA_ENTRE_LOJAS',
    SAIDAVENDAATACADO = <any> 'SAIDA_VENDA_ATACADO'
}

/**
 * 
 * @export
 * @interface UnitrierMovimentosAdminResumeDetailsRequestFiltros
 */
export interface UnitrierMovimentosAdminResumeDetailsRequestFiltros {
    /**
     * 
     * @type {string}
     * @memberof UnitrierMovimentosAdminResumeDetailsRequestFiltros
     */
    unidade_uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierMovimentosAdminResumeDetailsRequestFiltros
     */
    tipo?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierMovimentosAdminResumeDetailsRequestFiltros
     */
    data_inicio?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierMovimentosAdminResumeDetailsRequestFiltros
     */
    data_fim?: string;
}

/**
 * 
 * @export
 * @interface UnitrierMovimentosAdminResumeRequestFiltros
 */
export interface UnitrierMovimentosAdminResumeRequestFiltros {
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierMovimentosAdminResumeRequestFiltros
     */
    unidades_uuid?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierMovimentosAdminResumeRequestFiltros
     */
    tipos?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UnitrierMovimentosAdminResumeRequestFiltros
     */
    data_inicio?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierMovimentosAdminResumeRequestFiltros
     */
    data_fim?: string;
}

/**
 * 
 * @export
 * @interface UnitrierNegarFluxoRequest
 */
export interface UnitrierNegarFluxoRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierNegarFluxoRequest
     */
    fluxo_uuid?: string;
}

/**
 * 
 * @export
 * @interface UnitrierOportunidadeLucroMesRequest
 */
export interface UnitrierOportunidadeLucroMesRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierOportunidadeLucroMesRequest
     */
    ano_mes?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierOportunidadeLucroMesRequest
     */
    unidades?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierOportunidadeLucroMesRequest
     */
    detalhado?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UnitrierOportunidadeLucroMesRequest
     */
    departamento?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierOportunidadeLucroMesRequest
     */
    categoria?: string;
}

/**
 * 
 * @export
 * @interface UnitrierPerfil
 */
export interface UnitrierPerfil {
    /**
     * 
     * @type {string}
     * @memberof UnitrierPerfil
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierPerfil
     */
    nome?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierPerfil
     */
    descricao?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierPerfil
     */
    data_cadastro?: string;
}

/**
 * 
 * @export
 * @interface UnitrierPerfilPermissoes
 */
export interface UnitrierPerfilPermissoes {
    /**
     * 
     * @type {string}
     * @memberof UnitrierPerfilPermissoes
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierPerfilPermissoes
     */
    nome?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierPerfilPermissoes
     */
    descricao?: string;
    /**
     * 
     * @type {Array<UnitrierPermissao>}
     * @memberof UnitrierPerfilPermissoes
     */
    permissoes?: Array<UnitrierPermissao>;
    /**
     * 
     * @type {Array<UnitrierDepartamento>}
     * @memberof UnitrierPerfilPermissoes
     */
    departamentos?: Array<UnitrierDepartamento>;
    /**
     * 
     * @type {Array<UnitrierCategoria>}
     * @memberof UnitrierPerfilPermissoes
     */
    categorias?: Array<UnitrierCategoria>;
}

/**
 * 
 * @export
 * @interface UnitrierPermissao
 */
export interface UnitrierPermissao {
    /**
     * 
     * @type {string}
     * @memberof UnitrierPermissao
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierPermissao
     */
    permissao?: string;
}

/**
 * 
 * @export
 * @interface UnitrierPesquisa
 */
export interface UnitrierPesquisa {
    /**
     * 
     * @type {string}
     * @memberof UnitrierPesquisa
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierPesquisa
     */
    descricao?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierPesquisa
     */
    data_cadastro?: string;
    /**
     * 
     * @type {PesquisaEtapa}
     * @memberof UnitrierPesquisa
     */
    etapa?: PesquisaEtapa;
    /**
     * 
     * @type {UnitrierFluxo}
     * @memberof UnitrierPesquisa
     */
    fluxo?: UnitrierFluxo;
    /**
     * 
     * @type {Array<UnitrierUnidade>}
     * @memberof UnitrierPesquisa
     */
    unidades?: Array<UnitrierUnidade>;
    /**
     * 
     * @type {Array<UnitrierConcorrente>}
     * @memberof UnitrierPesquisa
     */
    concorrentes?: Array<UnitrierConcorrente>;
    /**
     * 
     * @type {Array<UnitrierProduto>}
     * @memberof UnitrierPesquisa
     */
    produtos?: Array<UnitrierProduto>;
}

/**
 * 
 * @export
 * @interface UnitrierPesquisaExterna
 */
export interface UnitrierPesquisaExterna {
    /**
     * 
     * @type {string}
     * @memberof UnitrierPesquisaExterna
     */
    data?: string;
    /**
     * 
     * @type {Array<UnitrierUnidade>}
     * @memberof UnitrierPesquisaExterna
     */
    unidades?: Array<UnitrierUnidade>;
    /**
     * 
     * @type {Array<UnitrierConcorrente>}
     * @memberof UnitrierPesquisaExterna
     */
    concorrentes?: Array<UnitrierConcorrente>;
    /**
     * 
     * @type {Array<UnitrierProduto>}
     * @memberof UnitrierPesquisaExterna
     */
    produtos?: Array<UnitrierProduto>;
}

/**
 * 
 * @export
 * @interface UnitrierPesquisaProdutoUnidade
 */
export interface UnitrierPesquisaProdutoUnidade {
    /**
     * 
     * @type {UnitrierProdutoUnidade}
     * @memberof UnitrierPesquisaProdutoUnidade
     */
    produto_unidade?: UnitrierProdutoUnidade;
    /**
     * 
     * @type {number}
     * @memberof UnitrierPesquisaProdutoUnidade
     */
    preco_compra?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierPesquisaProdutoUnidade
     */
    custo_total?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierPesquisaProdutoUnidade
     */
    margem_ideal?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierPesquisaProdutoUnidade
     */
    preco_sugerido?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierPesquisaProdutoUnidade
     */
    preco_venda?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierPesquisaProdutoUnidade
     */
    margem_atual?: number;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierPesquisaProdutoUnidade
     */
    em_oferta?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UnitrierPesquisaProdutoUnidade
     */
    oferta_inicio?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierPesquisaProdutoUnidade
     */
    oferta_fim?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierPesquisaProdutoUnidade
     */
    has_pesquisa?: boolean;
}

/**
 * 
 * @export
 * @interface UnitrierProduto
 */
export interface UnitrierProduto {
    /**
     * 
     * @type {string}
     * @memberof UnitrierProduto
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierProduto
     */
    codigo?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierProduto
     */
    descricao?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierProduto
     */
    descricao_pdv?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierProduto
     */
    marca?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierProduto
     */
    complemento?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierProduto
     */
    codigo_barra?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierProduto
     */
    codigo_preco?: string;
    /**
     * 
     * @type {UnitrierCategoria}
     * @memberof UnitrierProduto
     */
    categoria?: UnitrierCategoria;
    /**
     * 
     * @type {UnitrierDepartamento}
     * @memberof UnitrierProduto
     */
    departamento?: UnitrierDepartamento;
    /**
     * 
     * @type {Array<UnitrierProdutoUnidade>}
     * @memberof UnitrierProduto
     */
    unidades?: Array<UnitrierProdutoUnidade>;
    /**
     * 
     * @type {UnitrierProdutoStats}
     * @memberof UnitrierProduto
     */
    stats?: UnitrierProdutoStats;
    /**
     * 
     * @type {UnitrierProdutoCurva}
     * @memberof UnitrierProduto
     */
    curvas?: UnitrierProdutoCurva;
}

/**
 * 
 * @export
 * @interface UnitrierProdutoCurva
 */
export interface UnitrierProdutoCurva {
    /**
     * 
     * @type {string}
     * @memberof UnitrierProdutoCurva
     */
    venda?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierProdutoCurva
     */
    lucro?: string;
}

/**
 * 
 * @export
 * @interface UnitrierProdutoStats
 */
export interface UnitrierProdutoStats {
    /**
     * 
     * @type {Array<ProdutoStatsMes>}
     * @memberof UnitrierProdutoStats
     */
    vendas_trimestre?: Array<ProdutoStatsMes>;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoStats
     */
    quantidade_venda_mes_corrente?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoStats
     */
    venda_media_diaria?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoStats
     */
    lucro_atual?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoStats
     */
    estoque?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoStats
     */
    valor_lucro_medio?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoStats
     */
    percentual_lucro_medio?: number;
}

/**
 * 
 * @export
 * @interface UnitrierProdutoUnidade
 */
export interface UnitrierProdutoUnidade {
    /**
     * 
     * @type {UnitrierUnidade}
     * @memberof UnitrierProdutoUnidade
     */
    unidade?: UnitrierUnidade;
    /**
     * 
     * @type {UnitrierProduto}
     * @memberof UnitrierProdutoUnidade
     */
    produto?: UnitrierProduto;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierProdutoUnidade
     */
    bloqueado?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierProdutoUnidade
     */
    ativo?: boolean;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidade
     */
    preco_atual?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidade
     */
    preco_compra?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidade
     */
    preco_normal?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidade
     */
    preco_sugerido?: number;
    /**
     * 
     * @type {ProdutoUnidadePrecoVenda}
     * @memberof UnitrierProdutoUnidade
     */
    preco1?: ProdutoUnidadePrecoVenda;
    /**
     * 
     * @type {ProdutoUnidadePrecoVenda}
     * @memberof UnitrierProdutoUnidade
     */
    preco2?: ProdutoUnidadePrecoVenda;
    /**
     * 
     * @type {ProdutoUnidadePrecoVenda}
     * @memberof UnitrierProdutoUnidade
     */
    preco3?: ProdutoUnidadePrecoVenda;
    /**
     * 
     * @type {ProdutoUnidadePrecoVenda}
     * @memberof UnitrierProdutoUnidade
     */
    preco4?: ProdutoUnidadePrecoVenda;
    /**
     * 
     * @type {ProdutoUnidadePrecoVenda}
     * @memberof UnitrierProdutoUnidade
     */
    preco5?: ProdutoUnidadePrecoVenda;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidade
     */
    margem?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidade
     */
    margem_atual?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidade
     */
    margem_minima?: number;
    /**
     * 
     * @type {UnitrierProdutoUnidadeOferta}
     * @memberof UnitrierProdutoUnidade
     */
    oferta?: UnitrierProdutoUnidadeOferta;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidade
     */
    estoque?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidade
     */
    estoque2?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidade
     */
    estoque3?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidade
     */
    estoque4?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidade
     */
    estoque5?: number;
    /**
     * 
     * @type {UnitrierProdutoStats}
     * @memberof UnitrierProdutoUnidade
     */
    stats?: UnitrierProdutoStats;
    /**
     * 
     * @type {UnitrierProdutoCurva}
     * @memberof UnitrierProdutoUnidade
     */
    curvas?: UnitrierProdutoCurva;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidade
     */
    lucro_atual?: number;
    /**
     * 
     * @type {ProdutoUnidadeCustos}
     * @memberof UnitrierProdutoUnidade
     */
    custos?: ProdutoUnidadeCustos;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidade
     */
    custo_compra?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidade
     */
    custo_medio?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidade
     */
    custo_total?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidade
     */
    debito_icms?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidade
     */
    debito_ipi?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidade
     */
    debito_pis?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidade
     */
    debito_cofins?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidade
     */
    debito_icms_st?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidade
     */
    credito_icms?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidade
     */
    credito_pis?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidade
     */
    credito_cofins?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidade
     */
    outros_acrescimos?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidade
     */
    outros_descontos?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidade
     */
    custos_operacionais?: number;
    /**
     * 
     * @type {Array<ProdutoUnidadeCampoAdicional>}
     * @memberof UnitrierProdutoUnidade
     */
    campos_adicionais?: Array<ProdutoUnidadeCampoAdicional>;
}

/**
 * 
 * @export
 * @interface UnitrierProdutoUnidadeOferta
 */
export interface UnitrierProdutoUnidadeOferta {
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierProdutoUnidadeOferta
     */
    ativo?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UnitrierProdutoUnidadeOferta
     */
    data_inicial?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierProdutoUnidadeOferta
     */
    data_final?: string;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProdutoUnidadeOferta
     */
    valor?: number;
}

/**
 * 
 * @export
 * @interface UnitrierProjecaoLucroAcaoRequest
 */
export interface UnitrierProjecaoLucroAcaoRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierProjecaoLucroAcaoRequest
     */
    tipo_acao_uuid?: string;
    /**
     * 
     * @type {ProjecaoLucroAcaoRequestMargens}
     * @memberof UnitrierProjecaoLucroAcaoRequest
     */
    margens?: ProjecaoLucroAcaoRequestMargens;
    /**
     * 
     * @type {number}
     * @memberof UnitrierProjecaoLucroAcaoRequest
     */
    valor?: number;
}

/**
 * 
 * @export
 * @interface UnitrierProjecaoLucroAcaoResponse
 */
export interface UnitrierProjecaoLucroAcaoResponse {
    /**
     * 
     * @type {ProjecaoLucroAcaoResponseValores}
     * @memberof UnitrierProjecaoLucroAcaoResponse
     */
    margem?: ProjecaoLucroAcaoResponseValores;
    /**
     * 
     * @type {ProjecaoLucroAcaoResponseValores}
     * @memberof UnitrierProjecaoLucroAcaoResponse
     */
    projecao?: ProjecaoLucroAcaoResponseValores;
}

/**
 * 
 * @export
 * @interface UnitrierProjecaoLucrosResponse
 */
export interface UnitrierProjecaoLucrosResponse {
    /**
     * 
     * @type {ProjecaoLucrosResponsePrevisao}
     * @memberof UnitrierProjecaoLucrosResponse
     */
    acao?: ProjecaoLucrosResponsePrevisao;
    /**
     * 
     * @type {ProjecaoLucrosResponsePrevisao}
     * @memberof UnitrierProjecaoLucrosResponse
     */
    combate?: ProjecaoLucrosResponsePrevisao;
    /**
     * 
     * @type {ProjecaoLucrosResponsePrevisao}
     * @memberof UnitrierProjecaoLucrosResponse
     */
    recuperacao?: ProjecaoLucrosResponsePrevisao;
    /**
     * 
     * @type {ProjecaoLucrosResponsePrevisao}
     * @memberof UnitrierProjecaoLucrosResponse
     */
    total?: ProjecaoLucrosResponsePrevisao;
}

/**
 * 
 * @export
 * @interface UnitrierRecusarAcaoVendaRequest
 */
export interface UnitrierRecusarAcaoVendaRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierRecusarAcaoVendaRequest
     */
    uuid?: string;
}

/**
 * 
 * @export
 * @interface UnitrierRegisterIntegratorRequest
 */
export interface UnitrierRegisterIntegratorRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierRegisterIntegratorRequest
     */
    nome?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierRegisterIntegratorRequest
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierRegisterIntegratorRequest
     */
    port?: string;
}

/**
 * 
 * @export
 * @interface UnitrierRegisterUsuarioAdminRequest
 */
export interface UnitrierRegisterUsuarioAdminRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierRegisterUsuarioAdminRequest
     */
    email?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierRegisterUsuarioAdminRequest
     */
    permissoes_uuid?: Array<string>;
}

/**
 * 
 * @export
 * @interface UnitrierRegisterUsuarioRequest
 */
export interface UnitrierRegisterUsuarioRequest {
    /**
     * 
     * @type {UnitrierUsuario}
     * @memberof UnitrierRegisterUsuarioRequest
     */
    usuario?: UnitrierUsuario;
    /**
     * 
     * @type {string}
     * @memberof UnitrierRegisterUsuarioRequest
     */
    senha?: string;
}

/**
 * 
 * @export
 * @interface UnitrierRelatorioAlteracoesProdutosFluxoResponse
 */
export interface UnitrierRelatorioAlteracoesProdutosFluxoResponse {
    /**
     * 
     * @type {Array<UnitrierFluxoProdutoUnidade>}
     * @memberof UnitrierRelatorioAlteracoesProdutosFluxoResponse
     */
    produtos?: Array<UnitrierFluxoProdutoUnidade>;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum UnitrierRelatorioOutput {
    API = <any> 'API',
    XLS = <any> 'XLS',
    PDF = <any> 'PDF'
}

/**
 * 
 * @export
 * @interface UnitrierRelatorioPricingCompetitividadeComparativoRequest
 */
export interface UnitrierRelatorioPricingCompetitividadeComparativoRequest {
    /**
     * 
     * @type {UnitrierRelatorioOutput}
     * @memberof UnitrierRelatorioPricingCompetitividadeComparativoRequest
     */
    output?: UnitrierRelatorioOutput;
    /**
     * 
     * @type {string}
     * @memberof UnitrierRelatorioPricingCompetitividadeComparativoRequest
     */
    pesquisa?: string;
}

/**
 * 
 * @export
 * @interface UnitrierRelatorioPricingCompetitividadeProdutosRequest
 */
export interface UnitrierRelatorioPricingCompetitividadeProdutosRequest {
    /**
     * 
     * @type {UnitrierRelatorioOutput}
     * @memberof UnitrierRelatorioPricingCompetitividadeProdutosRequest
     */
    output?: UnitrierRelatorioOutput;
    /**
     * 
     * @type {string}
     * @memberof UnitrierRelatorioPricingCompetitividadeProdutosRequest
     */
    pesquisa?: string;
}

/**
 * 
 * @export
 * @interface UnitrierRelatorioPricingPrecificacaoPrecosAlteradosRequest
 */
export interface UnitrierRelatorioPricingPrecificacaoPrecosAlteradosRequest {
    /**
     * 
     * @type {UnitrierRelatorioOutput}
     * @memberof UnitrierRelatorioPricingPrecificacaoPrecosAlteradosRequest
     */
    output?: UnitrierRelatorioOutput;
}

/**
 * 
 * @export
 * @interface UnitrierRelatorioPricingPrecificacaoProdutosLucroAtualABaixoMinimoIdealRequest
 */
export interface UnitrierRelatorioPricingPrecificacaoProdutosLucroAtualABaixoMinimoIdealRequest {
    /**
     * 
     * @type {UnitrierRelatorioOutput}
     * @memberof UnitrierRelatorioPricingPrecificacaoProdutosLucroAtualABaixoMinimoIdealRequest
     */
    output?: UnitrierRelatorioOutput;
}

/**
 * 
 * @export
 * @interface UnitrierRelatorioPricingWorkflowProdutosRequest
 */
export interface UnitrierRelatorioPricingWorkflowProdutosRequest {
    /**
     * 
     * @type {UnitrierRelatorioOutput}
     * @memberof UnitrierRelatorioPricingWorkflowProdutosRequest
     */
    output?: UnitrierRelatorioOutput;
    /**
     * 
     * @type {string}
     * @memberof UnitrierRelatorioPricingWorkflowProdutosRequest
     */
    fluxo?: string;
}

/**
 * 
 * @export
 * @interface UnitrierRelatorioPricingWorkflowStatusRequest
 */
export interface UnitrierRelatorioPricingWorkflowStatusRequest {
    /**
     * 
     * @type {UnitrierRelatorioOutput}
     * @memberof UnitrierRelatorioPricingWorkflowStatusRequest
     */
    output?: UnitrierRelatorioOutput;
}

/**
 * 
 * @export
 * @interface UnitrierRemoveSimilarRequest
 */
export interface UnitrierRemoveSimilarRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierRemoveSimilarRequest
     */
    categoria_uuid?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierRemoveSimilarRequest
     */
    categorias_similares_uuid?: Array<string>;
}

/**
 * 
 * @export
 * @interface UnitrierSearchCategoriasRequest
 */
export interface UnitrierSearchCategoriasRequest {
    /**
     * 
     * @type {UnitrierSearchCategoriasRequestFiltro}
     * @memberof UnitrierSearchCategoriasRequest
     */
    filtros?: UnitrierSearchCategoriasRequestFiltro;
}

/**
 * 
 * @export
 * @interface UnitrierSearchCategoriasRequestFiltro
 */
export interface UnitrierSearchCategoriasRequestFiltro {
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierSearchCategoriasRequestFiltro
     */
    departamentos_uuid?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UnitrierSearchCategoriasRequestFiltro
     */
    nome?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierSearchCategoriasRequestFiltro
     */
    classificacao?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierSearchCategoriasRequestFiltro
     */
    codigo?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierSearchCategoriasRequestFiltro
     */
    unidades_uuid?: Array<string>;
}

/**
 * 
 * @export
 * @interface UnitrierSearchProdutosRequest
 */
export interface UnitrierSearchProdutosRequest {
    /**
     * 
     * @type {number}
     * @memberof UnitrierSearchProdutosRequest
     */
    page_number?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierSearchProdutosRequest
     */
    page_size?: number;
    /**
     * 
     * @type {UnitrierSearchProdutosRequestFiltros}
     * @memberof UnitrierSearchProdutosRequest
     */
    filtros?: UnitrierSearchProdutosRequestFiltros;
}

/**
 * 
 * @export
 * @interface UnitrierSearchProdutosRequestFiltros
 */
export interface UnitrierSearchProdutosRequestFiltros {
    /**
     * 
     * @type {string}
     * @memberof UnitrierSearchProdutosRequestFiltros
     */
    codigo?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierSearchProdutosRequestFiltros
     */
    descricao?: string;
}

/**
 * 
 * @export
 * @interface UnitrierSearchSimilaresRequestFiltro
 */
export interface UnitrierSearchSimilaresRequestFiltro {
    /**
     * 
     * @type {string}
     * @memberof UnitrierSearchSimilaresRequestFiltro
     */
    nome?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierSearchSimilaresRequestFiltro
     */
    classificacao?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierSearchSimilaresRequestFiltro
     */
    codigo?: string;
}

/**
 * 
 * @export
 * @interface UnitrierTipoAcaoVenda
 */
export interface UnitrierTipoAcaoVenda {
    /**
     * 
     * @type {string}
     * @memberof UnitrierTipoAcaoVenda
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierTipoAcaoVenda
     */
    nome?: string;
    /**
     * 
     * @type {Array<UnitrierUnidade>}
     * @memberof UnitrierTipoAcaoVenda
     */
    unidades?: Array<UnitrierUnidade>;
    /**
     * 
     * @type {Array<UnitrierDepartamento>}
     * @memberof UnitrierTipoAcaoVenda
     */
    departamentos?: Array<UnitrierDepartamento>;
    /**
     * 
     * @type {Array<UnitrierCategoria>}
     * @memberof UnitrierTipoAcaoVenda
     */
    categorias?: Array<UnitrierCategoria>;
    /**
     * 
     * @type {number}
     * @memberof UnitrierTipoAcaoVenda
     */
    quantidade_dias?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierTipoAcaoVenda
     */
    quantidade_itens?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierTipoAcaoVenda
     */
    valor_simulacao?: number;
    /**
     * 
     * @type {{ [key: string]: UnitrierTipoAcaoVendaMargemCurva; }}
     * @memberof UnitrierTipoAcaoVenda
     */
    margens_curvas?: { [key: string]: UnitrierTipoAcaoVendaMargemCurva; };
}

/**
 * 
 * @export
 * @interface UnitrierTipoAcaoVendaMargemCurva
 */
export interface UnitrierTipoAcaoVendaMargemCurva {
    /**
     * 
     * @type {number}
     * @memberof UnitrierTipoAcaoVendaMargemCurva
     */
    percentual?: number;
    /**
     * Campo read-only. A informação é gerada baseado na quantidade de itens do tipo, e o percentual informado.
     * @type {number}
     * @memberof UnitrierTipoAcaoVendaMargemCurva
     */
    quantidade_itens?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierTipoAcaoVendaMargemCurva
     */
    minima?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierTipoAcaoVendaMargemCurva
     */
    media?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitrierTipoAcaoVendaMargemCurva
     */
    maxima?: number;
}

/**
 * 
 * @export
 * @interface UnitrierTipoPesquisa
 */
export interface UnitrierTipoPesquisa {
    /**
     * 
     * @type {string}
     * @memberof UnitrierTipoPesquisa
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierTipoPesquisa
     */
    nome?: string;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof UnitrierTipoPesquisa
     */
    curvas_produtos?: { [key: string]: number; };
}

/**
 * 
 * @export
 * @interface UnitrierTotalCompraMesRequest
 */
export interface UnitrierTotalCompraMesRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierTotalCompraMesRequest
     */
    ano_mes?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierTotalCompraMesRequest
     */
    unidades?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierTotalCompraMesRequest
     */
    detalhado?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UnitrierTotalCompraMesRequest
     */
    departamento?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierTotalCompraMesRequest
     */
    categoria?: string;
}

/**
 * 
 * @export
 * @interface UnitrierTotalLucroMesRequest
 */
export interface UnitrierTotalLucroMesRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierTotalLucroMesRequest
     */
    ano_mes?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierTotalLucroMesRequest
     */
    unidades?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierTotalLucroMesRequest
     */
    detalhado?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UnitrierTotalLucroMesRequest
     */
    departamento?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierTotalLucroMesRequest
     */
    categoria?: string;
}

/**
 * 
 * @export
 * @interface UnitrierTotalVendaMesRequest
 */
export interface UnitrierTotalVendaMesRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierTotalVendaMesRequest
     */
    ano_mes?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierTotalVendaMesRequest
     */
    unidades?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierTotalVendaMesRequest
     */
    detalhado?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UnitrierTotalVendaMesRequest
     */
    departamento?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierTotalVendaMesRequest
     */
    categoria?: string;
}

/**
 * 
 * @export
 * @interface UnitrierUnidade
 */
export interface UnitrierUnidade {
    /**
     * 
     * @type {string}
     * @memberof UnitrierUnidade
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierUnidade
     */
    codigo?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierUnidade
     */
    cnpj?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierUnidade
     */
    nome?: string;
}

/**
 * 
 * @export
 * @interface UnitrierUpdateAcaoVendaRequest
 */
export interface UnitrierUpdateAcaoVendaRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierUpdateAcaoVendaRequest
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierUpdateAcaoVendaRequest
     */
    nome?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierUpdateAcaoVendaRequest
     */
    validade_inicio?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierUpdateAcaoVendaRequest
     */
    validade_fim?: string;
    /**
     * 
     * @type {Array<UnitrierUnidade>}
     * @memberof UnitrierUpdateAcaoVendaRequest
     */
    unidades?: Array<UnitrierUnidade>;
    /**
     * 
     * @type {Array<UnitrierAcaoVendaProduto>}
     * @memberof UnitrierUpdateAcaoVendaRequest
     */
    produtos?: Array<UnitrierAcaoVendaProduto>;
}

/**
 * 
 * @export
 * @interface UnitrierUpdatePerfilRequest
 */
export interface UnitrierUpdatePerfilRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierUpdatePerfilRequest
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierUpdatePerfilRequest
     */
    nome?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierUpdatePerfilRequest
     */
    descricao?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierUpdatePerfilRequest
     */
    permissoes_uuid?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierUpdatePerfilRequest
     */
    departamentos_uuid?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierUpdatePerfilRequest
     */
    categorias_uuid?: Array<string>;
}

/**
 * 
 * @export
 * @interface UnitrierUpdatePrecoVendaConcorrenteRequest
 */
export interface UnitrierUpdatePrecoVendaConcorrenteRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierUpdatePrecoVendaConcorrenteRequest
     */
    pesquisa_uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierUpdatePrecoVendaConcorrenteRequest
     */
    produto_uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierUpdatePrecoVendaConcorrenteRequest
     */
    concorrente_uuid?: string;
    /**
     * 
     * @type {number}
     * @memberof UnitrierUpdatePrecoVendaConcorrenteRequest
     */
    preco_venda?: number;
}

/**
 * 
 * @export
 * @interface UnitrierUpdateProdutoAdquiridoRequest
 */
export interface UnitrierUpdateProdutoAdquiridoRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierUpdateProdutoAdquiridoRequest
     */
    produto_uuid?: string;
    /**
     * 
     * @type {{ [key: string]: UpdateProdutoAdquiridoRequestAlteracaoPrecoUnidade; }}
     * @memberof UnitrierUpdateProdutoAdquiridoRequest
     */
    unidades?: { [key: string]: UpdateProdutoAdquiridoRequestAlteracaoPrecoUnidade; };
    /**
     * 
     * @type {GoogleprotobufFieldMask}
     * @memberof UnitrierUpdateProdutoAdquiridoRequest
     */
    update_mask?: GoogleprotobufFieldMask;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierUpdateProdutoAdquiridoRequest
     */
    update_codigo_preco?: boolean;
}

/**
 * 
 * @export
 * @interface UnitrierUpdateProdutoFluxoRequest
 */
export interface UnitrierUpdateProdutoFluxoRequest {
    /**
     * Quando não existe um fluxo criado, e o processo de atualização é através da aquisição, fluxo_uuid deve possuir o valor \"-\".
     * @type {string}
     * @memberof UnitrierUpdateProdutoFluxoRequest
     */
    fluxo_uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierUpdateProdutoFluxoRequest
     */
    produto_uuid?: string;
    /**
     * Caso o produto esteja sendo alterado através de uma aquisição, o campo \"fluxo_uuid\" deve ser passado com o valor \"-\" e o campo \"origem\" com o valor \"AQUISICAO\". Para os demais casos em que existe um fluxo, o campo \"origem\" é ignorado.
     * @type {FluxoOrigem}
     * @memberof UnitrierUpdateProdutoFluxoRequest
     */
    origem?: FluxoOrigem;
    /**
     * 
     * @type {Array<UnitrierUpdateProdutoFluxoRequestUnidade>}
     * @memberof UnitrierUpdateProdutoFluxoRequest
     */
    unidades?: Array<UnitrierUpdateProdutoFluxoRequestUnidade>;
    /**
     * Caso o produto tenha código de preço vinculado, realizar atualização do preço em todos os outros produtos de mesmo código de preço.
     * @type {boolean}
     * @memberof UnitrierUpdateProdutoFluxoRequest
     */
    update_codigo_preco?: boolean;
    /**
     * Observação: A estrutura dos campos, deve ser respeitada a partir do objeto \"FluxoProdutoUnidade\". Campo obrigatório, caso deseje realizar a atualização de todos os campos, enviar {paths: ['*']}
     * @type {UnitrierFieldMask}
     * @memberof UnitrierUpdateProdutoFluxoRequest
     */
    update_mask?: UnitrierFieldMask;
}

/**
 * 
 * @export
 * @interface UnitrierUpdateProdutoFluxoRequestUnidade
 */
export interface UnitrierUpdateProdutoFluxoRequestUnidade {
    /**
     * 
     * @type {string}
     * @memberof UnitrierUpdateProdutoFluxoRequestUnidade
     */
    unidade_uuid?: string;
    /**
     * 
     * @type {UnitrierFluxoProdutoUpdate}
     * @memberof UnitrierUpdateProdutoFluxoRequestUnidade
     */
    update?: UnitrierFluxoProdutoUpdate;
}

/**
 * 
 * @export
 * @interface UnitrierUpdateSimilaresRequest
 */
export interface UnitrierUpdateSimilaresRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierUpdateSimilaresRequest
     */
    categoria_uuid?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierUpdateSimilaresRequest
     */
    similares_uuid?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierUpdateSimilaresRequest
     */
    children?: boolean;
}

/**
 * 
 * @export
 * @interface UnitrierUpdateStatusFluxoRequest
 */
export interface UnitrierUpdateStatusFluxoRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierUpdateStatusFluxoRequest
     */
    fluxo_uuid?: string;
    /**
     * 
     * @type {UnitrierFluxoStatus}
     * @memberof UnitrierUpdateStatusFluxoRequest
     */
    status?: UnitrierFluxoStatus;
}

/**
 * 
 * @export
 * @interface UnitrierUpdateStatusSincronizacaoProdutoRequest
 */
export interface UnitrierUpdateStatusSincronizacaoProdutoRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierUpdateStatusSincronizacaoProdutoRequest
     */
    fluxo_uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierUpdateStatusSincronizacaoProdutoRequest
     */
    produto_uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierUpdateStatusSincronizacaoProdutoRequest
     */
    unidade_uuid?: string;
    /**
     * 
     * @type {FluxoProdutoUnidadeStatusSincronizacao}
     * @memberof UnitrierUpdateStatusSincronizacaoProdutoRequest
     */
    status?: FluxoProdutoUnidadeStatusSincronizacao;
    /**
     * 
     * @type {string}
     * @memberof UnitrierUpdateStatusSincronizacaoProdutoRequest
     */
    observacao?: string;
}

/**
 * 
 * @export
 * @interface UnitrierUpdateTabelaAjustePrecoRequest
 */
export interface UnitrierUpdateTabelaAjustePrecoRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierUpdateTabelaAjustePrecoRequest
     */
    uuid?: string;
    /**
     * 
     * @type {Array<UpdateTabelaAjustePrecoRequestFaixa>}
     * @memberof UnitrierUpdateTabelaAjustePrecoRequest
     */
    faixas?: Array<UpdateTabelaAjustePrecoRequestFaixa>;
}

/**
 * 
 * @export
 * @interface UnitrierUpdateUsuarioAdminRequest
 */
export interface UnitrierUpdateUsuarioAdminRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierUpdateUsuarioAdminRequest
     */
    email?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierUpdateUsuarioAdminRequest
     */
    permissoes?: Array<string>;
}

/**
 * 
 * @export
 * @interface UnitrierUpdateUsuarioPerfisRequest
 */
export interface UnitrierUpdateUsuarioPerfisRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierUpdateUsuarioPerfisRequest
     */
    usuario_uuid?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierUpdateUsuarioPerfisRequest
     */
    perfis_uuid?: Array<string>;
}

/**
 * 
 * @export
 * @interface UnitrierUpdateUsuarioRequest
 */
export interface UnitrierUpdateUsuarioRequest {
    /**
     * 
     * @type {UnitrierUsuario}
     * @memberof UnitrierUpdateUsuarioRequest
     */
    usuario?: UnitrierUsuario;
    /**
     * 
     * @type {string}
     * @memberof UnitrierUpdateUsuarioRequest
     */
    senha?: string;
}

/**
 * 
 * @export
 * @interface UnitrierUpdateUsuarioUnidadesRequest
 */
export interface UnitrierUpdateUsuarioUnidadesRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierUpdateUsuarioUnidadesRequest
     */
    usuario_uuid?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierUpdateUsuarioUnidadesRequest
     */
    unidades_uuid?: Array<string>;
}

/**
 * 
 * @export
 * @interface UnitrierUsuario
 */
export interface UnitrierUsuario {
    /**
     * 
     * @type {string}
     * @memberof UnitrierUsuario
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierUsuario
     */
    nome?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierUsuario
     */
    sobrenome?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierUsuario
     */
    nome_completo?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierUsuario
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierUsuario
     */
    data_cadastro?: string;
}

/**
 * 
 * @export
 * @interface UnitrierUsuarioLogadoResponse
 */
export interface UnitrierUsuarioLogadoResponse {
    /**
     * 
     * @type {UnitrierUsuario}
     * @memberof UnitrierUsuarioLogadoResponse
     */
    usuario?: UnitrierUsuario;
    /**
     * 
     * @type {UnitrierEntidade}
     * @memberof UnitrierUsuarioLogadoResponse
     */
    entidade?: UnitrierEntidade;
    /**
     * 
     * @type {Array<UnitrierEntidade>}
     * @memberof UnitrierUsuarioLogadoResponse
     */
    entidades?: Array<UnitrierEntidade>;
    /**
     * 
     * @type {Array<UnitrierPermissao>}
     * @memberof UnitrierUsuarioLogadoResponse
     */
    permissoes?: Array<UnitrierPermissao>;
    /**
     * 
     * @type {Array<UnitrierUnidade>}
     * @memberof UnitrierUsuarioLogadoResponse
     */
    unidades?: Array<UnitrierUnidade>;
}

/**
 * 
 * @export
 * @interface UnitrierValorEstoqueAtualRequest
 */
export interface UnitrierValorEstoqueAtualRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierValorEstoqueAtualRequest
     */
    ano_mes?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UnitrierValorEstoqueAtualRequest
     */
    unidades?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof UnitrierValorEstoqueAtualRequest
     */
    detalhado?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UnitrierValorEstoqueAtualRequest
     */
    departamento?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierValorEstoqueAtualRequest
     */
    categoria?: string;
}

/**
 * 
 * @export
 * @interface UnitrierVincularUsuarioEntidadeRequest
 */
export interface UnitrierVincularUsuarioEntidadeRequest {
    /**
     * 
     * @type {string}
     * @memberof UnitrierVincularUsuarioEntidadeRequest
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UnitrierVincularUsuarioEntidadeRequest
     */
    senha?: string;
}

/**
 * 
 * @export
 * @interface UpdateProdutoAdquiridoRequestAlteracaoPrecoUnidade
 */
export interface UpdateProdutoAdquiridoRequestAlteracaoPrecoUnidade {
    /**
     * 
     * @type {number}
     * @memberof UpdateProdutoAdquiridoRequestAlteracaoPrecoUnidade
     */
    preco_venda?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateProdutoAdquiridoRequestAlteracaoPrecoUnidade
     */
    preco_venda2?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateProdutoAdquiridoRequestAlteracaoPrecoUnidade
     */
    preco_venda3?: number;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateProdutoAdquiridoRequestAlteracaoPrecoUnidade
     */
    em_oferta?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateProdutoAdquiridoRequestAlteracaoPrecoUnidade
     */
    oferta_inicio?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProdutoAdquiridoRequestAlteracaoPrecoUnidade
     */
    oferta_fim?: string;
}

/**
 * 
 * @export
 * @interface UpdateTabelaAjustePrecoRequestFaixa
 */
export interface UpdateTabelaAjustePrecoRequestFaixa {
    /**
     * 
     * @type {number}
     * @memberof UpdateTabelaAjustePrecoRequestFaixa
     */
    de?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateTabelaAjustePrecoRequestFaixa
     */
    ate?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateTabelaAjustePrecoRequestFaixa
     */
    preco?: number;
}


/**
 * AcaoVendaServiceApi - fetch parameter creator
 * @export
 */
export const AcaoVendaServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierAprovarAcaoVendaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aprovarAcaoVenda(uuid: string, body: UnitrierAprovarAcaoVendaRequest, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling aprovarAcaoVenda.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling aprovarAcaoVenda.');
            }
            const localVarPath = `/acoes-venda/{uuid}:aprovar`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierAprovarAcaoVendaRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierCalcularMargemAcaoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calcularMargemAcao(body: UnitrierCalcularMargemAcaoRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling calcularMargemAcao.');
            }
            const localVarPath = `/acao-venda:calcularMargemAcao`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierCalcularMargemAcaoRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tipo_acao_uuid 
         * @param {UnitrierCalcularSugestaoPrecoTipoAcaoVendaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calcularSugestaoPreco(tipo_acao_uuid: string, body: UnitrierCalcularSugestaoPrecoTipoAcaoVendaRequest, options: any = {}): FetchArgs {
            // verify required parameter 'tipo_acao_uuid' is not null or undefined
            if (tipo_acao_uuid === null || tipo_acao_uuid === undefined) {
                throw new RequiredError('tipo_acao_uuid','Required parameter tipo_acao_uuid was null or undefined when calling calcularSugestaoPreco.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling calcularSugestaoPreco.');
            }
            const localVarPath = `/tipos-acao-venda/{tipo_acao_uuid}:calcularSugestaoPreco`
                .replace(`{${"tipo_acao_uuid"}}`, encodeURIComponent(String(tipo_acao_uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierCalcularSugestaoPrecoTipoAcaoVendaRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierCreateAcaoVendaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAcaoVenda(body: UnitrierCreateAcaoVendaRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createAcaoVenda.');
            }
            const localVarPath = `/acoes-venda`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierCreateAcaoVendaRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierCreateTipoAcaoVendaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTipoAcaoVenda(body: UnitrierCreateTipoAcaoVendaRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createTipoAcaoVenda.');
            }
            const localVarPath = `/tipos-acao-venda`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierCreateTipoAcaoVendaRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finalizarAcao(uuid: string, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling finalizarAcao.');
            }
            const localVarPath = `/acao-venda/{uuid}:finalizarAcao`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierGerarAnalisePerformanceRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gerarAnalisePerformance(body: UnitrierGerarAnalisePerformanceRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling gerarAnalisePerformance.');
            }
            const localVarPath = `/acao-venda:gerarAnalisePerformance`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierGerarAnalisePerformanceRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierGerarGraficoAnalisePerformanceRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gerarGraficoAnalisePerformance(body: UnitrierGerarGraficoAnalisePerformanceRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling gerarGraficoAnalisePerformance.');
            }
            const localVarPath = `/acao-venda:gerarGraficoAnalisePerformance`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierGerarGraficoAnalisePerformanceRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAcaoVenda(uuid: string, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling getAcaoVenda.');
            }
            const localVarPath = `/acoes-venda/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTipoAcaoVenda(uuid: string, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling getTipoAcaoVenda.');
            }
            const localVarPath = `/tipos-acao-venda/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierInicializarPrecosAcaoVendaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inicializarPrecos(uuid: string, body: UnitrierInicializarPrecosAcaoVendaRequest, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling inicializarPrecos.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling inicializarPrecos.');
            }
            const localVarPath = `/acao-venda/{uuid}:inicializarPrecos`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierInicializarPrecosAcaoVendaRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierInicializarProdutosAcaoVendaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inicializarProdutos(body: UnitrierInicializarProdutosAcaoVendaRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling inicializarProdutos.');
            }
            const localVarPath = `/acao-venda:inicializarProdutos`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierInicializarProdutosAcaoVendaRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {'INDEFINIDO' | 'ACAO' | 'COMBATE' | 'RECUPERACAO'} [modelo] 
         * @param {string} [validade] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(modelo?: 'INDEFINIDO' | 'ACAO' | 'COMBATE' | 'RECUPERACAO', validade?: string, options: any = {}): FetchArgs {
            const localVarPath = `/acoes-venda`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (modelo !== undefined) {
                localVarQueryParameter['modelo'] = modelo;
            }

            if (validade !== undefined) {
                localVarQueryParameter['validade'] = validade;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTiposAcaoVenda(options: any = {}): FetchArgs {
            const localVarPath = `/tipos-acao-venda`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierProjecaoLucroAcaoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projecaoLucroAcao(body: UnitrierProjecaoLucroAcaoRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling projecaoLucroAcao.');
            }
            const localVarPath = `/acao-venda:projecaoLucroAcao`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierProjecaoLucroAcaoRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierCreateAcaoVendaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projecaoLucros(body: UnitrierCreateAcaoVendaRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling projecaoLucros.');
            }
            const localVarPath = `/acao-venda:projecaoLucros`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierCreateAcaoVendaRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierRecusarAcaoVendaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recusarAcaoVenda(uuid: string, body: UnitrierRecusarAcaoVendaRequest, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling recusarAcaoVenda.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling recusarAcaoVenda.');
            }
            const localVarPath = `/acoes-venda/{uuid}:recusar`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierRecusarAcaoVendaRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierUpdateAcaoVendaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAcaoVenda(uuid: string, body: UnitrierUpdateAcaoVendaRequest, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling updateAcaoVenda.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateAcaoVenda.');
            }
            const localVarPath = `/acoes-venda/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierUpdateAcaoVendaRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierTipoAcaoVenda} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTipoAcaoVenda(uuid: string, body: UnitrierTipoAcaoVenda, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling updateTipoAcaoVenda.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateTipoAcaoVenda.');
            }
            const localVarPath = `/tipos-acao-venda/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierTipoAcaoVenda" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AcaoVendaServiceApi - functional programming interface
 * @export
 */
export const AcaoVendaServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierAprovarAcaoVendaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aprovarAcaoVenda(uuid: string, body: UnitrierAprovarAcaoVendaRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = AcaoVendaServiceApiFetchParamCreator(configuration).aprovarAcaoVenda(uuid, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierCalcularMargemAcaoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calcularMargemAcao(body: UnitrierCalcularMargemAcaoRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierCalcularMargemAcaoResponse> {
            const localVarFetchArgs = AcaoVendaServiceApiFetchParamCreator(configuration).calcularMargemAcao(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} tipo_acao_uuid 
         * @param {UnitrierCalcularSugestaoPrecoTipoAcaoVendaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calcularSugestaoPreco(tipo_acao_uuid: string, body: UnitrierCalcularSugestaoPrecoTipoAcaoVendaRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierCalcularSugestaoPrecoTipoAcaoVendaResponse> {
            const localVarFetchArgs = AcaoVendaServiceApiFetchParamCreator(configuration).calcularSugestaoPreco(tipo_acao_uuid, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierCreateAcaoVendaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAcaoVenda(body: UnitrierCreateAcaoVendaRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierAcaoVenda> {
            const localVarFetchArgs = AcaoVendaServiceApiFetchParamCreator(configuration).createAcaoVenda(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierCreateTipoAcaoVendaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTipoAcaoVenda(body: UnitrierCreateTipoAcaoVendaRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierTipoAcaoVenda> {
            const localVarFetchArgs = AcaoVendaServiceApiFetchParamCreator(configuration).createTipoAcaoVenda(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finalizarAcao(uuid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = AcaoVendaServiceApiFetchParamCreator(configuration).finalizarAcao(uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierGerarAnalisePerformanceRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gerarAnalisePerformance(body: UnitrierGerarAnalisePerformanceRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierAnalisePerformance> {
            const localVarFetchArgs = AcaoVendaServiceApiFetchParamCreator(configuration).gerarAnalisePerformance(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierGerarGraficoAnalisePerformanceRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gerarGraficoAnalisePerformance(body: UnitrierGerarGraficoAnalisePerformanceRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierGerarGraficoAnalisePerformanceResponse> {
            const localVarFetchArgs = AcaoVendaServiceApiFetchParamCreator(configuration).gerarGraficoAnalisePerformance(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAcaoVenda(uuid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierAcaoVenda> {
            const localVarFetchArgs = AcaoVendaServiceApiFetchParamCreator(configuration).getAcaoVenda(uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTipoAcaoVenda(uuid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierTipoAcaoVenda> {
            const localVarFetchArgs = AcaoVendaServiceApiFetchParamCreator(configuration).getTipoAcaoVenda(uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierInicializarPrecosAcaoVendaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inicializarPrecos(uuid: string, body: UnitrierInicializarPrecosAcaoVendaRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = AcaoVendaServiceApiFetchParamCreator(configuration).inicializarPrecos(uuid, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierInicializarProdutosAcaoVendaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inicializarProdutos(body: UnitrierInicializarProdutosAcaoVendaRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierInicializarProdutosAcaoVendaResponse> {
            const localVarFetchArgs = AcaoVendaServiceApiFetchParamCreator(configuration).inicializarProdutos(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {'INDEFINIDO' | 'ACAO' | 'COMBATE' | 'RECUPERACAO'} [modelo] 
         * @param {string} [validade] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(modelo?: 'INDEFINIDO' | 'ACAO' | 'COMBATE' | 'RECUPERACAO', validade?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListAcoesVendasResponse> {
            const localVarFetchArgs = AcaoVendaServiceApiFetchParamCreator(configuration).list(modelo, validade, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTiposAcaoVenda(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListTiposAcaoVendaResponse> {
            const localVarFetchArgs = AcaoVendaServiceApiFetchParamCreator(configuration).listTiposAcaoVenda(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierProjecaoLucroAcaoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projecaoLucroAcao(body: UnitrierProjecaoLucroAcaoRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierProjecaoLucroAcaoResponse> {
            const localVarFetchArgs = AcaoVendaServiceApiFetchParamCreator(configuration).projecaoLucroAcao(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierCreateAcaoVendaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projecaoLucros(body: UnitrierCreateAcaoVendaRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierProjecaoLucrosResponse> {
            const localVarFetchArgs = AcaoVendaServiceApiFetchParamCreator(configuration).projecaoLucros(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierRecusarAcaoVendaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recusarAcaoVenda(uuid: string, body: UnitrierRecusarAcaoVendaRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = AcaoVendaServiceApiFetchParamCreator(configuration).recusarAcaoVenda(uuid, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierUpdateAcaoVendaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAcaoVenda(uuid: string, body: UnitrierUpdateAcaoVendaRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierAcaoVenda> {
            const localVarFetchArgs = AcaoVendaServiceApiFetchParamCreator(configuration).updateAcaoVenda(uuid, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierTipoAcaoVenda} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTipoAcaoVenda(uuid: string, body: UnitrierTipoAcaoVenda, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierTipoAcaoVenda> {
            const localVarFetchArgs = AcaoVendaServiceApiFetchParamCreator(configuration).updateTipoAcaoVenda(uuid, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AcaoVendaServiceApi - factory interface
 * @export
 */
export const AcaoVendaServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierAprovarAcaoVendaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aprovarAcaoVenda(uuid: string, body: UnitrierAprovarAcaoVendaRequest, options?: any) {
            return AcaoVendaServiceApiFp(configuration).aprovarAcaoVenda(uuid, body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierCalcularMargemAcaoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calcularMargemAcao(body: UnitrierCalcularMargemAcaoRequest, options?: any) {
            return AcaoVendaServiceApiFp(configuration).calcularMargemAcao(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} tipo_acao_uuid 
         * @param {UnitrierCalcularSugestaoPrecoTipoAcaoVendaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calcularSugestaoPreco(tipo_acao_uuid: string, body: UnitrierCalcularSugestaoPrecoTipoAcaoVendaRequest, options?: any) {
            return AcaoVendaServiceApiFp(configuration).calcularSugestaoPreco(tipo_acao_uuid, body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierCreateAcaoVendaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAcaoVenda(body: UnitrierCreateAcaoVendaRequest, options?: any) {
            return AcaoVendaServiceApiFp(configuration).createAcaoVenda(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierCreateTipoAcaoVendaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTipoAcaoVenda(body: UnitrierCreateTipoAcaoVendaRequest, options?: any) {
            return AcaoVendaServiceApiFp(configuration).createTipoAcaoVenda(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finalizarAcao(uuid: string, options?: any) {
            return AcaoVendaServiceApiFp(configuration).finalizarAcao(uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierGerarAnalisePerformanceRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gerarAnalisePerformance(body: UnitrierGerarAnalisePerformanceRequest, options?: any) {
            return AcaoVendaServiceApiFp(configuration).gerarAnalisePerformance(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierGerarGraficoAnalisePerformanceRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gerarGraficoAnalisePerformance(body: UnitrierGerarGraficoAnalisePerformanceRequest, options?: any) {
            return AcaoVendaServiceApiFp(configuration).gerarGraficoAnalisePerformance(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAcaoVenda(uuid: string, options?: any) {
            return AcaoVendaServiceApiFp(configuration).getAcaoVenda(uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTipoAcaoVenda(uuid: string, options?: any) {
            return AcaoVendaServiceApiFp(configuration).getTipoAcaoVenda(uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierInicializarPrecosAcaoVendaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inicializarPrecos(uuid: string, body: UnitrierInicializarPrecosAcaoVendaRequest, options?: any) {
            return AcaoVendaServiceApiFp(configuration).inicializarPrecos(uuid, body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierInicializarProdutosAcaoVendaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inicializarProdutos(body: UnitrierInicializarProdutosAcaoVendaRequest, options?: any) {
            return AcaoVendaServiceApiFp(configuration).inicializarProdutos(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {'INDEFINIDO' | 'ACAO' | 'COMBATE' | 'RECUPERACAO'} [modelo] 
         * @param {string} [validade] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(modelo?: 'INDEFINIDO' | 'ACAO' | 'COMBATE' | 'RECUPERACAO', validade?: string, options?: any) {
            return AcaoVendaServiceApiFp(configuration).list(modelo, validade, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTiposAcaoVenda(options?: any) {
            return AcaoVendaServiceApiFp(configuration).listTiposAcaoVenda(options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierProjecaoLucroAcaoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projecaoLucroAcao(body: UnitrierProjecaoLucroAcaoRequest, options?: any) {
            return AcaoVendaServiceApiFp(configuration).projecaoLucroAcao(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierCreateAcaoVendaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projecaoLucros(body: UnitrierCreateAcaoVendaRequest, options?: any) {
            return AcaoVendaServiceApiFp(configuration).projecaoLucros(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierRecusarAcaoVendaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recusarAcaoVenda(uuid: string, body: UnitrierRecusarAcaoVendaRequest, options?: any) {
            return AcaoVendaServiceApiFp(configuration).recusarAcaoVenda(uuid, body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierUpdateAcaoVendaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAcaoVenda(uuid: string, body: UnitrierUpdateAcaoVendaRequest, options?: any) {
            return AcaoVendaServiceApiFp(configuration).updateAcaoVenda(uuid, body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierTipoAcaoVenda} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTipoAcaoVenda(uuid: string, body: UnitrierTipoAcaoVenda, options?: any) {
            return AcaoVendaServiceApiFp(configuration).updateTipoAcaoVenda(uuid, body, options)(fetch, basePath);
        },
    };
};

/**
 * AcaoVendaServiceApi - object-oriented interface
 * @export
 * @class AcaoVendaServiceApi
 * @extends {BaseAPI}
 */
export class AcaoVendaServiceApi extends BaseAPI {
    /**
     * 
     * @param {string} uuid 
     * @param {UnitrierAprovarAcaoVendaRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcaoVendaServiceApi
     */
    public aprovarAcaoVenda(uuid: string, body: UnitrierAprovarAcaoVendaRequest, options?: any) {
        return AcaoVendaServiceApiFp(this.configuration).aprovarAcaoVenda(uuid, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierCalcularMargemAcaoRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcaoVendaServiceApi
     */
    public calcularMargemAcao(body: UnitrierCalcularMargemAcaoRequest, options?: any) {
        return AcaoVendaServiceApiFp(this.configuration).calcularMargemAcao(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} tipo_acao_uuid 
     * @param {UnitrierCalcularSugestaoPrecoTipoAcaoVendaRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcaoVendaServiceApi
     */
    public calcularSugestaoPreco(tipo_acao_uuid: string, body: UnitrierCalcularSugestaoPrecoTipoAcaoVendaRequest, options?: any) {
        return AcaoVendaServiceApiFp(this.configuration).calcularSugestaoPreco(tipo_acao_uuid, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierCreateAcaoVendaRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcaoVendaServiceApi
     */
    public createAcaoVenda(body: UnitrierCreateAcaoVendaRequest, options?: any) {
        return AcaoVendaServiceApiFp(this.configuration).createAcaoVenda(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierCreateTipoAcaoVendaRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcaoVendaServiceApi
     */
    public createTipoAcaoVenda(body: UnitrierCreateTipoAcaoVendaRequest, options?: any) {
        return AcaoVendaServiceApiFp(this.configuration).createTipoAcaoVenda(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcaoVendaServiceApi
     */
    public finalizarAcao(uuid: string, options?: any) {
        return AcaoVendaServiceApiFp(this.configuration).finalizarAcao(uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierGerarAnalisePerformanceRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcaoVendaServiceApi
     */
    public gerarAnalisePerformance(body: UnitrierGerarAnalisePerformanceRequest, options?: any) {
        return AcaoVendaServiceApiFp(this.configuration).gerarAnalisePerformance(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierGerarGraficoAnalisePerformanceRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcaoVendaServiceApi
     */
    public gerarGraficoAnalisePerformance(body: UnitrierGerarGraficoAnalisePerformanceRequest, options?: any) {
        return AcaoVendaServiceApiFp(this.configuration).gerarGraficoAnalisePerformance(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcaoVendaServiceApi
     */
    public getAcaoVenda(uuid: string, options?: any) {
        return AcaoVendaServiceApiFp(this.configuration).getAcaoVenda(uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcaoVendaServiceApi
     */
    public getTipoAcaoVenda(uuid: string, options?: any) {
        return AcaoVendaServiceApiFp(this.configuration).getTipoAcaoVenda(uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} uuid 
     * @param {UnitrierInicializarPrecosAcaoVendaRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcaoVendaServiceApi
     */
    public inicializarPrecos(uuid: string, body: UnitrierInicializarPrecosAcaoVendaRequest, options?: any) {
        return AcaoVendaServiceApiFp(this.configuration).inicializarPrecos(uuid, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierInicializarProdutosAcaoVendaRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcaoVendaServiceApi
     */
    public inicializarProdutos(body: UnitrierInicializarProdutosAcaoVendaRequest, options?: any) {
        return AcaoVendaServiceApiFp(this.configuration).inicializarProdutos(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {'INDEFINIDO' | 'ACAO' | 'COMBATE' | 'RECUPERACAO'} [modelo] 
     * @param {string} [validade] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcaoVendaServiceApi
     */
    public list(modelo?: 'INDEFINIDO' | 'ACAO' | 'COMBATE' | 'RECUPERACAO', validade?: string, options?: any) {
        return AcaoVendaServiceApiFp(this.configuration).list(modelo, validade, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcaoVendaServiceApi
     */
    public listTiposAcaoVenda(options?: any) {
        return AcaoVendaServiceApiFp(this.configuration).listTiposAcaoVenda(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierProjecaoLucroAcaoRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcaoVendaServiceApi
     */
    public projecaoLucroAcao(body: UnitrierProjecaoLucroAcaoRequest, options?: any) {
        return AcaoVendaServiceApiFp(this.configuration).projecaoLucroAcao(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierCreateAcaoVendaRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcaoVendaServiceApi
     */
    public projecaoLucros(body: UnitrierCreateAcaoVendaRequest, options?: any) {
        return AcaoVendaServiceApiFp(this.configuration).projecaoLucros(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} uuid 
     * @param {UnitrierRecusarAcaoVendaRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcaoVendaServiceApi
     */
    public recusarAcaoVenda(uuid: string, body: UnitrierRecusarAcaoVendaRequest, options?: any) {
        return AcaoVendaServiceApiFp(this.configuration).recusarAcaoVenda(uuid, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} uuid 
     * @param {UnitrierUpdateAcaoVendaRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcaoVendaServiceApi
     */
    public updateAcaoVenda(uuid: string, body: UnitrierUpdateAcaoVendaRequest, options?: any) {
        return AcaoVendaServiceApiFp(this.configuration).updateAcaoVenda(uuid, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} uuid 
     * @param {UnitrierTipoAcaoVenda} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcaoVendaServiceApi
     */
    public updateTipoAcaoVenda(uuid: string, body: UnitrierTipoAcaoVenda, options?: any) {
        return AcaoVendaServiceApiFp(this.configuration).updateTipoAcaoVenda(uuid, body, options)(this.fetch, this.basePath);
    }

}

/**
 * AdquiridoServiceApi - fetch parameter creator
 * @export
 */
export const AdquiridoServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UnitrierGerarRelatorioPrecificacaoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gerarRelatorioPrecificacao(body: UnitrierGerarRelatorioPrecificacaoRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling gerarRelatorioPrecificacao.');
            }
            const localVarPath = `/adquiridos:gerarRelatorioPrecificacao`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierGerarRelatorioPrecificacaoRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [produto_uuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProdutoUnidades(produto_uuid?: string, options: any = {}): FetchArgs {
            const localVarPath = `/adquiridos:getProduto`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (produto_uuid !== undefined) {
                localVarQueryParameter['produto_uuid'] = produto_uuid;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierListProdutosAdquiridosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProdutosAdquiridos(body: UnitrierListProdutosAdquiridosRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling listProdutosAdquiridos.');
            }
            const localVarPath = `/produtos:listAdquiridos`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierListProdutosAdquiridosRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierUpdateProdutoAdquiridoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduto(body: UnitrierUpdateProdutoAdquiridoRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateProduto.');
            }
            const localVarPath = `/adquiridos:updateProduto`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierUpdateProdutoAdquiridoRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdquiridoServiceApi - functional programming interface
 * @export
 */
export const AdquiridoServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UnitrierGerarRelatorioPrecificacaoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gerarRelatorioPrecificacao(body: UnitrierGerarRelatorioPrecificacaoRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierGerarRelatorioPrecificacaoResponse> {
            const localVarFetchArgs = AdquiridoServiceApiFetchParamCreator(configuration).gerarRelatorioPrecificacao(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [produto_uuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProdutoUnidades(produto_uuid?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierGetProdutoUnidadesAdquiridoResponse> {
            const localVarFetchArgs = AdquiridoServiceApiFetchParamCreator(configuration).getProdutoUnidades(produto_uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierListProdutosAdquiridosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProdutosAdquiridos(body: UnitrierListProdutosAdquiridosRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListProdutosAdquiridosResponse> {
            const localVarFetchArgs = AdquiridoServiceApiFetchParamCreator(configuration).listProdutosAdquiridos(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierUpdateProdutoAdquiridoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduto(body: UnitrierUpdateProdutoAdquiridoRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = AdquiridoServiceApiFetchParamCreator(configuration).updateProduto(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AdquiridoServiceApi - factory interface
 * @export
 */
export const AdquiridoServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {UnitrierGerarRelatorioPrecificacaoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gerarRelatorioPrecificacao(body: UnitrierGerarRelatorioPrecificacaoRequest, options?: any) {
            return AdquiridoServiceApiFp(configuration).gerarRelatorioPrecificacao(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [produto_uuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProdutoUnidades(produto_uuid?: string, options?: any) {
            return AdquiridoServiceApiFp(configuration).getProdutoUnidades(produto_uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierListProdutosAdquiridosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProdutosAdquiridos(body: UnitrierListProdutosAdquiridosRequest, options?: any) {
            return AdquiridoServiceApiFp(configuration).listProdutosAdquiridos(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierUpdateProdutoAdquiridoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduto(body: UnitrierUpdateProdutoAdquiridoRequest, options?: any) {
            return AdquiridoServiceApiFp(configuration).updateProduto(body, options)(fetch, basePath);
        },
    };
};

/**
 * AdquiridoServiceApi - object-oriented interface
 * @export
 * @class AdquiridoServiceApi
 * @extends {BaseAPI}
 */
export class AdquiridoServiceApi extends BaseAPI {
    /**
     * 
     * @param {UnitrierGerarRelatorioPrecificacaoRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdquiridoServiceApi
     */
    public gerarRelatorioPrecificacao(body: UnitrierGerarRelatorioPrecificacaoRequest, options?: any) {
        return AdquiridoServiceApiFp(this.configuration).gerarRelatorioPrecificacao(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [produto_uuid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdquiridoServiceApi
     */
    public getProdutoUnidades(produto_uuid?: string, options?: any) {
        return AdquiridoServiceApiFp(this.configuration).getProdutoUnidades(produto_uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierListProdutosAdquiridosRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdquiridoServiceApi
     */
    public listProdutosAdquiridos(body: UnitrierListProdutosAdquiridosRequest, options?: any) {
        return AdquiridoServiceApiFp(this.configuration).listProdutosAdquiridos(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierUpdateProdutoAdquiridoRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdquiridoServiceApi
     */
    public updateProduto(body: UnitrierUpdateProdutoAdquiridoRequest, options?: any) {
        return AdquiridoServiceApiFp(this.configuration).updateProduto(body, options)(this.fetch, this.basePath);
    }

}

/**
 * AnalyticsApi - fetch parameter creator
 * @export
 */
export const AnalyticsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UnitrierDistribuicaoVendasRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distribuicaoVendas(body: UnitrierDistribuicaoVendasRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling distribuicaoVendas.');
            }
            const localVarPath = `/analytics/distribuicao-vendas`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierDistribuicaoVendasRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierDistribuicaoVendasDetalhadoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distribuicaoVendasDetalhado(body: UnitrierDistribuicaoVendasDetalhadoRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling distribuicaoVendasDetalhado.');
            }
            const localVarPath = `/analytics/distribuicao-vendas:detalhado`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierDistribuicaoVendasDetalhadoRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierGiroEstoqueRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giroEstoque(body: UnitrierGiroEstoqueRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling giroEstoque.');
            }
            const localVarPath = `/analytics/giro-estoque`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierGiroEstoqueRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierLucroRecuperadoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lucroRecuperado(body: UnitrierLucroRecuperadoRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling lucroRecuperado.');
            }
            const localVarPath = `/analytics/lucro-recuperado`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierLucroRecuperadoRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierOportunidadeLucroMesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oportunidadeLucroMes(body: UnitrierOportunidadeLucroMesRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oportunidadeLucroMes.');
            }
            const localVarPath = `/analytics/oportunidade-lucro-mes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierOportunidadeLucroMesRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierTotalCompraMesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalCompraMes(body: UnitrierTotalCompraMesRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling totalCompraMes.');
            }
            const localVarPath = `/analytics/total-compra-mes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierTotalCompraMesRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierTotalLucroMesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalLucroMes(body: UnitrierTotalLucroMesRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling totalLucroMes.');
            }
            const localVarPath = `/analytics/total-lucro-mes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierTotalLucroMesRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierTotalVendaMesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalVendaMes(body: UnitrierTotalVendaMesRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling totalVendaMes.');
            }
            const localVarPath = `/analytics/total-venda-mes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierTotalVendaMesRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierValorEstoqueAtualRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        valorEstoqueAtual(body: UnitrierValorEstoqueAtualRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling valorEstoqueAtual.');
            }
            const localVarPath = `/analytics/valor-estoque-atual`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierValorEstoqueAtualRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnalyticsApi - functional programming interface
 * @export
 */
export const AnalyticsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UnitrierDistribuicaoVendasRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distribuicaoVendas(body: UnitrierDistribuicaoVendasRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierAnalyticsPieChart> {
            const localVarFetchArgs = AnalyticsApiFetchParamCreator(configuration).distribuicaoVendas(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierDistribuicaoVendasDetalhadoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distribuicaoVendasDetalhado(body: UnitrierDistribuicaoVendasDetalhadoRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierAnalyticsGraphs> {
            const localVarFetchArgs = AnalyticsApiFetchParamCreator(configuration).distribuicaoVendasDetalhado(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierGiroEstoqueRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giroEstoque(body: UnitrierGiroEstoqueRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierAnalyticsGraphs> {
            const localVarFetchArgs = AnalyticsApiFetchParamCreator(configuration).giroEstoque(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierLucroRecuperadoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lucroRecuperado(body: UnitrierLucroRecuperadoRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierAnalyticsGraphs> {
            const localVarFetchArgs = AnalyticsApiFetchParamCreator(configuration).lucroRecuperado(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierOportunidadeLucroMesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oportunidadeLucroMes(body: UnitrierOportunidadeLucroMesRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierAnalyticsGraphs> {
            const localVarFetchArgs = AnalyticsApiFetchParamCreator(configuration).oportunidadeLucroMes(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierTotalCompraMesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalCompraMes(body: UnitrierTotalCompraMesRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierAnalyticsGraphs> {
            const localVarFetchArgs = AnalyticsApiFetchParamCreator(configuration).totalCompraMes(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierTotalLucroMesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalLucroMes(body: UnitrierTotalLucroMesRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierAnalyticsGraphs> {
            const localVarFetchArgs = AnalyticsApiFetchParamCreator(configuration).totalLucroMes(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierTotalVendaMesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalVendaMes(body: UnitrierTotalVendaMesRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierAnalyticsGraphs> {
            const localVarFetchArgs = AnalyticsApiFetchParamCreator(configuration).totalVendaMes(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierValorEstoqueAtualRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        valorEstoqueAtual(body: UnitrierValorEstoqueAtualRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierAnalyticsGraphs> {
            const localVarFetchArgs = AnalyticsApiFetchParamCreator(configuration).valorEstoqueAtual(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AnalyticsApi - factory interface
 * @export
 */
export const AnalyticsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {UnitrierDistribuicaoVendasRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distribuicaoVendas(body: UnitrierDistribuicaoVendasRequest, options?: any) {
            return AnalyticsApiFp(configuration).distribuicaoVendas(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierDistribuicaoVendasDetalhadoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distribuicaoVendasDetalhado(body: UnitrierDistribuicaoVendasDetalhadoRequest, options?: any) {
            return AnalyticsApiFp(configuration).distribuicaoVendasDetalhado(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierGiroEstoqueRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        giroEstoque(body: UnitrierGiroEstoqueRequest, options?: any) {
            return AnalyticsApiFp(configuration).giroEstoque(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierLucroRecuperadoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lucroRecuperado(body: UnitrierLucroRecuperadoRequest, options?: any) {
            return AnalyticsApiFp(configuration).lucroRecuperado(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierOportunidadeLucroMesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oportunidadeLucroMes(body: UnitrierOportunidadeLucroMesRequest, options?: any) {
            return AnalyticsApiFp(configuration).oportunidadeLucroMes(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierTotalCompraMesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalCompraMes(body: UnitrierTotalCompraMesRequest, options?: any) {
            return AnalyticsApiFp(configuration).totalCompraMes(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierTotalLucroMesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalLucroMes(body: UnitrierTotalLucroMesRequest, options?: any) {
            return AnalyticsApiFp(configuration).totalLucroMes(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierTotalVendaMesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalVendaMes(body: UnitrierTotalVendaMesRequest, options?: any) {
            return AnalyticsApiFp(configuration).totalVendaMes(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierValorEstoqueAtualRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        valorEstoqueAtual(body: UnitrierValorEstoqueAtualRequest, options?: any) {
            return AnalyticsApiFp(configuration).valorEstoqueAtual(body, options)(fetch, basePath);
        },
    };
};

/**
 * AnalyticsApi - object-oriented interface
 * @export
 * @class AnalyticsApi
 * @extends {BaseAPI}
 */
export class AnalyticsApi extends BaseAPI {
    /**
     * 
     * @param {UnitrierDistribuicaoVendasRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public distribuicaoVendas(body: UnitrierDistribuicaoVendasRequest, options?: any) {
        return AnalyticsApiFp(this.configuration).distribuicaoVendas(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierDistribuicaoVendasDetalhadoRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public distribuicaoVendasDetalhado(body: UnitrierDistribuicaoVendasDetalhadoRequest, options?: any) {
        return AnalyticsApiFp(this.configuration).distribuicaoVendasDetalhado(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierGiroEstoqueRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public giroEstoque(body: UnitrierGiroEstoqueRequest, options?: any) {
        return AnalyticsApiFp(this.configuration).giroEstoque(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierLucroRecuperadoRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public lucroRecuperado(body: UnitrierLucroRecuperadoRequest, options?: any) {
        return AnalyticsApiFp(this.configuration).lucroRecuperado(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierOportunidadeLucroMesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public oportunidadeLucroMes(body: UnitrierOportunidadeLucroMesRequest, options?: any) {
        return AnalyticsApiFp(this.configuration).oportunidadeLucroMes(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierTotalCompraMesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public totalCompraMes(body: UnitrierTotalCompraMesRequest, options?: any) {
        return AnalyticsApiFp(this.configuration).totalCompraMes(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierTotalLucroMesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public totalLucroMes(body: UnitrierTotalLucroMesRequest, options?: any) {
        return AnalyticsApiFp(this.configuration).totalLucroMes(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierTotalVendaMesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public totalVendaMes(body: UnitrierTotalVendaMesRequest, options?: any) {
        return AnalyticsApiFp(this.configuration).totalVendaMes(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierValorEstoqueAtualRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public valorEstoqueAtual(body: UnitrierValorEstoqueAtualRequest, options?: any) {
        return AnalyticsApiFp(this.configuration).valorEstoqueAtual(body, options)(this.fetch, this.basePath);
    }

}

/**
 * CategoriaServiceApi - fetch parameter creator
 * @export
 */
export const CategoriaServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} categoria_uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDepartamentos(categoria_uuid: string, options: any = {}): FetchArgs {
            // verify required parameter 'categoria_uuid' is not null or undefined
            if (categoria_uuid === null || categoria_uuid === undefined) {
                throw new RequiredError('categoria_uuid','Required parameter categoria_uuid was null or undefined when calling getDepartamentos.');
            }
            const localVarPath = `/categorias/{categoria_uuid}/departamentos`
                .replace(`{${"categoria_uuid"}}`, encodeURIComponent(String(categoria_uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} categoria_uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilares(categoria_uuid: string, options: any = {}): FetchArgs {
            // verify required parameter 'categoria_uuid' is not null or undefined
            if (categoria_uuid === null || categoria_uuid === undefined) {
                throw new RequiredError('categoria_uuid','Required parameter categoria_uuid was null or undefined when calling getSimilares.');
            }
            const localVarPath = `/categorias/{categoria_uuid}/similares`
                .replace(`{${"categoria_uuid"}}`, encodeURIComponent(String(categoria_uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} categoria_uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnidades(categoria_uuid: string, options: any = {}): FetchArgs {
            // verify required parameter 'categoria_uuid' is not null or undefined
            if (categoria_uuid === null || categoria_uuid === undefined) {
                throw new RequiredError('categoria_uuid','Required parameter categoria_uuid was null or undefined when calling getUnidades.');
            }
            const localVarPath = `/categorias/{categoria_uuid}/unidades`
                .replace(`{${"categoria_uuid"}}`, encodeURIComponent(String(categoria_uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} categoria_uuid 
         * @param {UnitrierInsertSimilarRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertSimilar(categoria_uuid: string, body: UnitrierInsertSimilarRequest, options: any = {}): FetchArgs {
            // verify required parameter 'categoria_uuid' is not null or undefined
            if (categoria_uuid === null || categoria_uuid === undefined) {
                throw new RequiredError('categoria_uuid','Required parameter categoria_uuid was null or undefined when calling insertSimilar.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling insertSimilar.');
            }
            const localVarPath = `/categorias/{categoria_uuid}/similar`
                .replace(`{${"categoria_uuid"}}`, encodeURIComponent(String(categoria_uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierInsertSimilarRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options: any = {}): FetchArgs {
            const localVarPath = `/categorias`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSimilares(page_number?: number, page_size?: number, options: any = {}): FetchArgs {
            const localVarPath = `/categorias/similares`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (page_number !== undefined) {
                localVarQueryParameter['page_number'] = page_number;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} categoria_uuid 
         * @param {UnitrierRemoveSimilarRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSimilar(categoria_uuid: string, body: UnitrierRemoveSimilarRequest, options: any = {}): FetchArgs {
            // verify required parameter 'categoria_uuid' is not null or undefined
            if (categoria_uuid === null || categoria_uuid === undefined) {
                throw new RequiredError('categoria_uuid','Required parameter categoria_uuid was null or undefined when calling removeSimilar.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling removeSimilar.');
            }
            const localVarPath = `/categorias/{categoria_uuid}`
                .replace(`{${"categoria_uuid"}}`, encodeURIComponent(String(categoria_uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierRemoveSimilarRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierSearchCategoriasRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(body: UnitrierSearchCategoriasRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling search.');
            }
            const localVarPath = `/categorias:search`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierSearchCategoriasRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [filtros_nome] 
         * @param {string} [filtros_classificacao] 
         * @param {string} [filtros_codigo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSimilares(filtros_nome?: string, filtros_classificacao?: string, filtros_codigo?: string, options: any = {}): FetchArgs {
            const localVarPath = `/categorias/similares:search`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (filtros_nome !== undefined) {
                localVarQueryParameter['filtros.nome'] = filtros_nome;
            }

            if (filtros_classificacao !== undefined) {
                localVarQueryParameter['filtros.classificacao'] = filtros_classificacao;
            }

            if (filtros_codigo !== undefined) {
                localVarQueryParameter['filtros.codigo'] = filtros_codigo;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} categoria_uuid 
         * @param {UnitrierUpdateSimilaresRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSimilares(categoria_uuid: string, body: UnitrierUpdateSimilaresRequest, options: any = {}): FetchArgs {
            // verify required parameter 'categoria_uuid' is not null or undefined
            if (categoria_uuid === null || categoria_uuid === undefined) {
                throw new RequiredError('categoria_uuid','Required parameter categoria_uuid was null or undefined when calling updateSimilares.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateSimilares.');
            }
            const localVarPath = `/categorias/{categoria_uuid}/similares`
                .replace(`{${"categoria_uuid"}}`, encodeURIComponent(String(categoria_uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierUpdateSimilaresRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriaServiceApi - functional programming interface
 * @export
 */
export const CategoriaServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} categoria_uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDepartamentos(categoria_uuid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierGetDepartamentosResponse> {
            const localVarFetchArgs = CategoriaServiceApiFetchParamCreator(configuration).getDepartamentos(categoria_uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} categoria_uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilares(categoria_uuid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierCategoriaSimilares> {
            const localVarFetchArgs = CategoriaServiceApiFetchParamCreator(configuration).getSimilares(categoria_uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} categoria_uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnidades(categoria_uuid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierGetUnidadesResponse> {
            const localVarFetchArgs = CategoriaServiceApiFetchParamCreator(configuration).getUnidades(categoria_uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} categoria_uuid 
         * @param {UnitrierInsertSimilarRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertSimilar(categoria_uuid: string, body: UnitrierInsertSimilarRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = CategoriaServiceApiFetchParamCreator(configuration).insertSimilar(categoria_uuid, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListCategoriasResponse> {
            const localVarFetchArgs = CategoriaServiceApiFetchParamCreator(configuration).list(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSimilares(page_number?: number, page_size?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListSimilaresResponse> {
            const localVarFetchArgs = CategoriaServiceApiFetchParamCreator(configuration).listSimilares(page_number, page_size, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} categoria_uuid 
         * @param {UnitrierRemoveSimilarRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSimilar(categoria_uuid: string, body: UnitrierRemoveSimilarRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = CategoriaServiceApiFetchParamCreator(configuration).removeSimilar(categoria_uuid, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierSearchCategoriasRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(body: UnitrierSearchCategoriasRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListCategoriasResponse> {
            const localVarFetchArgs = CategoriaServiceApiFetchParamCreator(configuration).search(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [filtros_nome] 
         * @param {string} [filtros_classificacao] 
         * @param {string} [filtros_codigo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSimilares(filtros_nome?: string, filtros_classificacao?: string, filtros_codigo?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListSimilaresResponse> {
            const localVarFetchArgs = CategoriaServiceApiFetchParamCreator(configuration).searchSimilares(filtros_nome, filtros_classificacao, filtros_codigo, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} categoria_uuid 
         * @param {UnitrierUpdateSimilaresRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSimilares(categoria_uuid: string, body: UnitrierUpdateSimilaresRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = CategoriaServiceApiFetchParamCreator(configuration).updateSimilares(categoria_uuid, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CategoriaServiceApi - factory interface
 * @export
 */
export const CategoriaServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} categoria_uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDepartamentos(categoria_uuid: string, options?: any) {
            return CategoriaServiceApiFp(configuration).getDepartamentos(categoria_uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} categoria_uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilares(categoria_uuid: string, options?: any) {
            return CategoriaServiceApiFp(configuration).getSimilares(categoria_uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} categoria_uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnidades(categoria_uuid: string, options?: any) {
            return CategoriaServiceApiFp(configuration).getUnidades(categoria_uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} categoria_uuid 
         * @param {UnitrierInsertSimilarRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertSimilar(categoria_uuid: string, body: UnitrierInsertSimilarRequest, options?: any) {
            return CategoriaServiceApiFp(configuration).insertSimilar(categoria_uuid, body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: any) {
            return CategoriaServiceApiFp(configuration).list(options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSimilares(page_number?: number, page_size?: number, options?: any) {
            return CategoriaServiceApiFp(configuration).listSimilares(page_number, page_size, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} categoria_uuid 
         * @param {UnitrierRemoveSimilarRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSimilar(categoria_uuid: string, body: UnitrierRemoveSimilarRequest, options?: any) {
            return CategoriaServiceApiFp(configuration).removeSimilar(categoria_uuid, body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierSearchCategoriasRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(body: UnitrierSearchCategoriasRequest, options?: any) {
            return CategoriaServiceApiFp(configuration).search(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [filtros_nome] 
         * @param {string} [filtros_classificacao] 
         * @param {string} [filtros_codigo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSimilares(filtros_nome?: string, filtros_classificacao?: string, filtros_codigo?: string, options?: any) {
            return CategoriaServiceApiFp(configuration).searchSimilares(filtros_nome, filtros_classificacao, filtros_codigo, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} categoria_uuid 
         * @param {UnitrierUpdateSimilaresRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSimilares(categoria_uuid: string, body: UnitrierUpdateSimilaresRequest, options?: any) {
            return CategoriaServiceApiFp(configuration).updateSimilares(categoria_uuid, body, options)(fetch, basePath);
        },
    };
};

/**
 * CategoriaServiceApi - object-oriented interface
 * @export
 * @class CategoriaServiceApi
 * @extends {BaseAPI}
 */
export class CategoriaServiceApi extends BaseAPI {
    /**
     * 
     * @param {string} categoria_uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriaServiceApi
     */
    public getDepartamentos(categoria_uuid: string, options?: any) {
        return CategoriaServiceApiFp(this.configuration).getDepartamentos(categoria_uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} categoria_uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriaServiceApi
     */
    public getSimilares(categoria_uuid: string, options?: any) {
        return CategoriaServiceApiFp(this.configuration).getSimilares(categoria_uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} categoria_uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriaServiceApi
     */
    public getUnidades(categoria_uuid: string, options?: any) {
        return CategoriaServiceApiFp(this.configuration).getUnidades(categoria_uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} categoria_uuid 
     * @param {UnitrierInsertSimilarRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriaServiceApi
     */
    public insertSimilar(categoria_uuid: string, body: UnitrierInsertSimilarRequest, options?: any) {
        return CategoriaServiceApiFp(this.configuration).insertSimilar(categoria_uuid, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriaServiceApi
     */
    public list(options?: any) {
        return CategoriaServiceApiFp(this.configuration).list(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [page_number] 
     * @param {number} [page_size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriaServiceApi
     */
    public listSimilares(page_number?: number, page_size?: number, options?: any) {
        return CategoriaServiceApiFp(this.configuration).listSimilares(page_number, page_size, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} categoria_uuid 
     * @param {UnitrierRemoveSimilarRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriaServiceApi
     */
    public removeSimilar(categoria_uuid: string, body: UnitrierRemoveSimilarRequest, options?: any) {
        return CategoriaServiceApiFp(this.configuration).removeSimilar(categoria_uuid, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierSearchCategoriasRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriaServiceApi
     */
    public search(body: UnitrierSearchCategoriasRequest, options?: any) {
        return CategoriaServiceApiFp(this.configuration).search(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [filtros_nome] 
     * @param {string} [filtros_classificacao] 
     * @param {string} [filtros_codigo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriaServiceApi
     */
    public searchSimilares(filtros_nome?: string, filtros_classificacao?: string, filtros_codigo?: string, options?: any) {
        return CategoriaServiceApiFp(this.configuration).searchSimilares(filtros_nome, filtros_classificacao, filtros_codigo, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} categoria_uuid 
     * @param {UnitrierUpdateSimilaresRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriaServiceApi
     */
    public updateSimilares(categoria_uuid: string, body: UnitrierUpdateSimilaresRequest, options?: any) {
        return CategoriaServiceApiFp(this.configuration).updateSimilares(categoria_uuid, body, options)(this.fetch, this.basePath);
    }

}

/**
 * ConcorrenteServiceApi - fetch parameter creator
 * @export
 */
export const ConcorrenteServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(page_number?: number, page_size?: number, options: any = {}): FetchArgs {
            const localVarPath = `/concorrentes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (page_number !== undefined) {
                localVarQueryParameter['page_number'] = page_number;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {string} [entidade_uuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdmin(page_number?: number, page_size?: number, entidade_uuid?: string, options: any = {}): FetchArgs {
            const localVarPath = `/admin/concorrentes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (page_number !== undefined) {
                localVarQueryParameter['page_number'] = page_number;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }

            if (entidade_uuid !== undefined) {
                localVarQueryParameter['entidade_uuid'] = entidade_uuid;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConcorrenteServiceApi - functional programming interface
 * @export
 */
export const ConcorrenteServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(page_number?: number, page_size?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListConcorrentesResponse> {
            const localVarFetchArgs = ConcorrenteServiceApiFetchParamCreator(configuration).list(page_number, page_size, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {string} [entidade_uuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdmin(page_number?: number, page_size?: number, entidade_uuid?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListConcorrentesResponse> {
            const localVarFetchArgs = ConcorrenteServiceApiFetchParamCreator(configuration).listAdmin(page_number, page_size, entidade_uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ConcorrenteServiceApi - factory interface
 * @export
 */
export const ConcorrenteServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(page_number?: number, page_size?: number, options?: any) {
            return ConcorrenteServiceApiFp(configuration).list(page_number, page_size, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {string} [entidade_uuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdmin(page_number?: number, page_size?: number, entidade_uuid?: string, options?: any) {
            return ConcorrenteServiceApiFp(configuration).listAdmin(page_number, page_size, entidade_uuid, options)(fetch, basePath);
        },
    };
};

/**
 * ConcorrenteServiceApi - object-oriented interface
 * @export
 * @class ConcorrenteServiceApi
 * @extends {BaseAPI}
 */
export class ConcorrenteServiceApi extends BaseAPI {
    /**
     * 
     * @param {number} [page_number] 
     * @param {number} [page_size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConcorrenteServiceApi
     */
    public list(page_number?: number, page_size?: number, options?: any) {
        return ConcorrenteServiceApiFp(this.configuration).list(page_number, page_size, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [page_number] 
     * @param {number} [page_size] 
     * @param {string} [entidade_uuid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConcorrenteServiceApi
     */
    public listAdmin(page_number?: number, page_size?: number, entidade_uuid?: string, options?: any) {
        return ConcorrenteServiceApiFp(this.configuration).listAdmin(page_number, page_size, entidade_uuid, options)(this.fetch, this.basePath);
    }

}

/**
 * CurvaServiceApi - fetch parameter creator
 * @export
 */
export const CurvaServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UnitrierCreateCurvaAdminRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdmin(body: UnitrierCreateCurvaAdminRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createAdmin.');
            }
            const localVarPath = `/admin/curvas`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierCreateCurvaAdminRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [entidade_uuid] 
         * @param {string} [curva_letra] 
         * @param {number} [curva_porcentagem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdmin(entidade_uuid?: string, curva_letra?: string, curva_porcentagem?: number, options: any = {}): FetchArgs {
            const localVarPath = `/admin/curvas`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (entidade_uuid !== undefined) {
                localVarQueryParameter['entidade_uuid'] = entidade_uuid;
            }

            if (curva_letra !== undefined) {
                localVarQueryParameter['curva.letra'] = curva_letra;
            }

            if (curva_porcentagem !== undefined) {
                localVarQueryParameter['curva.porcentagem'] = curva_porcentagem;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options: any = {}): FetchArgs {
            const localVarPath = `/curvas`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [entidade_uuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdmin(entidade_uuid?: string, options: any = {}): FetchArgs {
            const localVarPath = `/admin/curvas`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (entidade_uuid !== undefined) {
                localVarQueryParameter['entidade_uuid'] = entidade_uuid;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CurvaServiceApi - functional programming interface
 * @export
 */
export const CurvaServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UnitrierCreateCurvaAdminRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdmin(body: UnitrierCreateCurvaAdminRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = CurvaServiceApiFetchParamCreator(configuration).createAdmin(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [entidade_uuid] 
         * @param {string} [curva_letra] 
         * @param {number} [curva_porcentagem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdmin(entidade_uuid?: string, curva_letra?: string, curva_porcentagem?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = CurvaServiceApiFetchParamCreator(configuration).deleteAdmin(entidade_uuid, curva_letra, curva_porcentagem, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListCurvasResponse> {
            const localVarFetchArgs = CurvaServiceApiFetchParamCreator(configuration).list(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [entidade_uuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdmin(entidade_uuid?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListCurvasResponse> {
            const localVarFetchArgs = CurvaServiceApiFetchParamCreator(configuration).listAdmin(entidade_uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CurvaServiceApi - factory interface
 * @export
 */
export const CurvaServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {UnitrierCreateCurvaAdminRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdmin(body: UnitrierCreateCurvaAdminRequest, options?: any) {
            return CurvaServiceApiFp(configuration).createAdmin(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [entidade_uuid] 
         * @param {string} [curva_letra] 
         * @param {number} [curva_porcentagem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdmin(entidade_uuid?: string, curva_letra?: string, curva_porcentagem?: number, options?: any) {
            return CurvaServiceApiFp(configuration).deleteAdmin(entidade_uuid, curva_letra, curva_porcentagem, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: any) {
            return CurvaServiceApiFp(configuration).list(options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [entidade_uuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdmin(entidade_uuid?: string, options?: any) {
            return CurvaServiceApiFp(configuration).listAdmin(entidade_uuid, options)(fetch, basePath);
        },
    };
};

/**
 * CurvaServiceApi - object-oriented interface
 * @export
 * @class CurvaServiceApi
 * @extends {BaseAPI}
 */
export class CurvaServiceApi extends BaseAPI {
    /**
     * 
     * @param {UnitrierCreateCurvaAdminRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurvaServiceApi
     */
    public createAdmin(body: UnitrierCreateCurvaAdminRequest, options?: any) {
        return CurvaServiceApiFp(this.configuration).createAdmin(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [entidade_uuid] 
     * @param {string} [curva_letra] 
     * @param {number} [curva_porcentagem] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurvaServiceApi
     */
    public deleteAdmin(entidade_uuid?: string, curva_letra?: string, curva_porcentagem?: number, options?: any) {
        return CurvaServiceApiFp(this.configuration).deleteAdmin(entidade_uuid, curva_letra, curva_porcentagem, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurvaServiceApi
     */
    public list(options?: any) {
        return CurvaServiceApiFp(this.configuration).list(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [entidade_uuid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurvaServiceApi
     */
    public listAdmin(entidade_uuid?: string, options?: any) {
        return CurvaServiceApiFp(this.configuration).listAdmin(entidade_uuid, options)(this.fetch, this.basePath);
    }

}

/**
 * DepartamentoServiceApi - fetch parameter creator
 * @export
 */
export const DepartamentoServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options: any = {}): FetchArgs {
            const localVarPath = `/departamentos`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [filtros_nome] 
         * @param {boolean} [filtros_perfil] 
         * @param {string} [filtros_codigo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(filtros_nome?: string, filtros_perfil?: boolean, filtros_codigo?: string, options: any = {}): FetchArgs {
            const localVarPath = `/departamentos:search`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (filtros_nome !== undefined) {
                localVarQueryParameter['filtros.nome'] = filtros_nome;
            }

            if (filtros_perfil !== undefined) {
                localVarQueryParameter['filtros.perfil'] = filtros_perfil;
            }

            if (filtros_codigo !== undefined) {
                localVarQueryParameter['filtros.codigo'] = filtros_codigo;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DepartamentoServiceApi - functional programming interface
 * @export
 */
export const DepartamentoServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListDepartamentosResponse> {
            const localVarFetchArgs = DepartamentoServiceApiFetchParamCreator(configuration).list(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [filtros_nome] 
         * @param {boolean} [filtros_perfil] 
         * @param {string} [filtros_codigo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(filtros_nome?: string, filtros_perfil?: boolean, filtros_codigo?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListDepartamentosResponse> {
            const localVarFetchArgs = DepartamentoServiceApiFetchParamCreator(configuration).search(filtros_nome, filtros_perfil, filtros_codigo, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DepartamentoServiceApi - factory interface
 * @export
 */
export const DepartamentoServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: any) {
            return DepartamentoServiceApiFp(configuration).list(options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [filtros_nome] 
         * @param {boolean} [filtros_perfil] 
         * @param {string} [filtros_codigo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(filtros_nome?: string, filtros_perfil?: boolean, filtros_codigo?: string, options?: any) {
            return DepartamentoServiceApiFp(configuration).search(filtros_nome, filtros_perfil, filtros_codigo, options)(fetch, basePath);
        },
    };
};

/**
 * DepartamentoServiceApi - object-oriented interface
 * @export
 * @class DepartamentoServiceApi
 * @extends {BaseAPI}
 */
export class DepartamentoServiceApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartamentoServiceApi
     */
    public list(options?: any) {
        return DepartamentoServiceApiFp(this.configuration).list(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [filtros_nome] 
     * @param {boolean} [filtros_perfil] 
     * @param {string} [filtros_codigo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartamentoServiceApi
     */
    public search(filtros_nome?: string, filtros_perfil?: boolean, filtros_codigo?: string, options?: any) {
        return DepartamentoServiceApiFp(this.configuration).search(filtros_nome, filtros_perfil, filtros_codigo, options)(this.fetch, this.basePath);
    }

}

/**
 * EntidadeServiceApi - fetch parameter creator
 * @export
 */
export const EntidadeServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UnitrierCreateEntidadeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: UnitrierCreateEntidadeRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create.');
            }
            const localVarPath = `/admin/entidades`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierCreateEntidadeRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(page_number?: number, page_size?: number, options: any = {}): FetchArgs {
            const localVarPath = `/admin/entidades`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (page_number !== undefined) {
                localVarQueryParameter['page_number'] = page_number;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlertas(options: any = {}): FetchArgs {
            const localVarPath = `/entidade/alertas`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUnidadesEntidade(options: any = {}): FetchArgs {
            const localVarPath = `/entidade/unidades`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EntidadeServiceApi - functional programming interface
 * @export
 */
export const EntidadeServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UnitrierCreateEntidadeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: UnitrierCreateEntidadeRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = EntidadeServiceApiFetchParamCreator(configuration).create(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(page_number?: number, page_size?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListEntidadesResponse> {
            const localVarFetchArgs = EntidadeServiceApiFetchParamCreator(configuration).list(page_number, page_size, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlertas(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListAlertasEntidadeResponse> {
            const localVarFetchArgs = EntidadeServiceApiFetchParamCreator(configuration).listAlertas(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUnidadesEntidade(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListUnidadesEntidadeResponse> {
            const localVarFetchArgs = EntidadeServiceApiFetchParamCreator(configuration).listUnidadesEntidade(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * EntidadeServiceApi - factory interface
 * @export
 */
export const EntidadeServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {UnitrierCreateEntidadeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: UnitrierCreateEntidadeRequest, options?: any) {
            return EntidadeServiceApiFp(configuration).create(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(page_number?: number, page_size?: number, options?: any) {
            return EntidadeServiceApiFp(configuration).list(page_number, page_size, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlertas(options?: any) {
            return EntidadeServiceApiFp(configuration).listAlertas(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUnidadesEntidade(options?: any) {
            return EntidadeServiceApiFp(configuration).listUnidadesEntidade(options)(fetch, basePath);
        },
    };
};

/**
 * EntidadeServiceApi - object-oriented interface
 * @export
 * @class EntidadeServiceApi
 * @extends {BaseAPI}
 */
export class EntidadeServiceApi extends BaseAPI {
    /**
     * 
     * @param {UnitrierCreateEntidadeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntidadeServiceApi
     */
    public create(body: UnitrierCreateEntidadeRequest, options?: any) {
        return EntidadeServiceApiFp(this.configuration).create(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [page_number] 
     * @param {number} [page_size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntidadeServiceApi
     */
    public list(page_number?: number, page_size?: number, options?: any) {
        return EntidadeServiceApiFp(this.configuration).list(page_number, page_size, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntidadeServiceApi
     */
    public listAlertas(options?: any) {
        return EntidadeServiceApiFp(this.configuration).listAlertas(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntidadeServiceApi
     */
    public listUnidadesEntidade(options?: any) {
        return EntidadeServiceApiFp(this.configuration).listUnidadesEntidade(options)(this.fetch, this.basePath);
    }

}

/**
 * FluxoServiceApi - fetch parameter creator
 * @export
 */
export const FluxoServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} fluxo_uuid 
         * @param {UnitrierAlterarStatusProdutosFluxoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alterarStatusProdutos(fluxo_uuid: string, body: UnitrierAlterarStatusProdutosFluxoRequest, options: any = {}): FetchArgs {
            // verify required parameter 'fluxo_uuid' is not null or undefined
            if (fluxo_uuid === null || fluxo_uuid === undefined) {
                throw new RequiredError('fluxo_uuid','Required parameter fluxo_uuid was null or undefined when calling alterarStatusProdutos.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling alterarStatusProdutos.');
            }
            const localVarPath = `/fluxos/{fluxo_uuid}:alterarStatusProdutos`
                .replace(`{${"fluxo_uuid"}}`, encodeURIComponent(String(fluxo_uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierAlterarStatusProdutosFluxoRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fluxo_uuid 
         * @param {UnitrierAutorizarFluxoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autorizarFluxo(fluxo_uuid: string, body: UnitrierAutorizarFluxoRequest, options: any = {}): FetchArgs {
            // verify required parameter 'fluxo_uuid' is not null or undefined
            if (fluxo_uuid === null || fluxo_uuid === undefined) {
                throw new RequiredError('fluxo_uuid','Required parameter fluxo_uuid was null or undefined when calling autorizarFluxo.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling autorizarFluxo.');
            }
            const localVarPath = `/fluxos/{fluxo_uuid}:autorizar`
                .replace(`{${"fluxo_uuid"}}`, encodeURIComponent(String(fluxo_uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierAutorizarFluxoRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierCalcularProjecaoLucroFluxoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calcularProjecaoLucro(uuid: string, body: UnitrierCalcularProjecaoLucroFluxoRequest, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling calcularProjecaoLucro.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling calcularProjecaoLucro.');
            }
            const localVarPath = `/fluxos/{uuid}:calcularProjecaoLucro`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierCalcularProjecaoLucroFluxoRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {boolean} [todas_unidades] Retornar as informações, mesmo de unidades fora do fluxo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFluxo(uuid: string, todas_unidades?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling getFluxo.');
            }
            const localVarPath = `/fluxos/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (todas_unidades !== undefined) {
                localVarQueryParameter['todas_unidades'] = todas_unidades;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} produto_uuid 
         * @param {string} [unidade_uuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricoProdutoFluxos(produto_uuid: string, unidade_uuid?: string, options: any = {}): FetchArgs {
            // verify required parameter 'produto_uuid' is not null or undefined
            if (produto_uuid === null || produto_uuid === undefined) {
                throw new RequiredError('produto_uuid','Required parameter produto_uuid was null or undefined when calling getHistoricoProdutoFluxos.');
            }
            const localVarPath = `/produtos/{produto_uuid}/fluxos/historico`
                .replace(`{${"produto_uuid"}}`, encodeURIComponent(String(produto_uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (unidade_uuid !== undefined) {
                localVarQueryParameter['unidade_uuid'] = unidade_uuid;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retornar as informações do produto em todas as unidades do fluxo. Caso o produto nunca tenha sido atualizad, os dados retornados são os atuais.
         * @param {string} fluxo_uuid Quando não existe um fluxo criado, e o processo de atualização é através da aquisição, fluxo_uuid deve possuir o valor \&quot;-\&quot;.
         * @param {string} produto_uuid 
         * @param {'ORIGEM_UNDEFINED' | 'PESQUISA' | 'ACAO_VENDA' | 'GESTAO_CATEGORIA' | 'AQUISICAO' | 'GESTAO_CATEGORIA_CATEGORIA'} [origem] Caso o produto esteja sendo alterado através de uma aquisição, o campo \&quot;fluxo_uuid\&quot; deve ser passado com o valor \&quot;-\&quot; e o campo \&quot;origem\&quot; com o valor \&quot;AQUISICAO\&quot;. Para os demais casos em que existe um fluxo, o campo \&quot;origem\&quot; é ignorado.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProdutoFluxo(fluxo_uuid: string, produto_uuid: string, origem?: 'ORIGEM_UNDEFINED' | 'PESQUISA' | 'ACAO_VENDA' | 'GESTAO_CATEGORIA' | 'AQUISICAO' | 'GESTAO_CATEGORIA_CATEGORIA', options: any = {}): FetchArgs {
            // verify required parameter 'fluxo_uuid' is not null or undefined
            if (fluxo_uuid === null || fluxo_uuid === undefined) {
                throw new RequiredError('fluxo_uuid','Required parameter fluxo_uuid was null or undefined when calling getProdutoFluxo.');
            }
            // verify required parameter 'produto_uuid' is not null or undefined
            if (produto_uuid === null || produto_uuid === undefined) {
                throw new RequiredError('produto_uuid','Required parameter produto_uuid was null or undefined when calling getProdutoFluxo.');
            }
            const localVarPath = `/fluxos/{fluxo_uuid}/produtos/{produto_uuid}`
                .replace(`{${"fluxo_uuid"}}`, encodeURIComponent(String(fluxo_uuid)))
                .replace(`{${"produto_uuid"}}`, encodeURIComponent(String(produto_uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (origem !== undefined) {
                localVarQueryParameter['origem'] = origem;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAutorizadosDesincronizados(options: any = {}): FetchArgs {
            const localVarPath = `/fluxos:listAutorizadosDesincronizados`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {'ORIGEM_UNDEFINED' | 'PESQUISA' | 'ACAO_VENDA' | 'GESTAO_CATEGORIA' | 'AQUISICAO' | 'GESTAO_CATEGORIA_CATEGORIA'} [origem] 
         * @param {'STATUS_UNDEFINED' | 'PENDENTE' | 'APROVADO' | 'RECUSADO' | 'SINCRONIZANDO' | 'SINCRONIZADO'} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFluxos(origem?: 'ORIGEM_UNDEFINED' | 'PESQUISA' | 'ACAO_VENDA' | 'GESTAO_CATEGORIA' | 'AQUISICAO' | 'GESTAO_CATEGORIA_CATEGORIA', status?: 'STATUS_UNDEFINED' | 'PENDENTE' | 'APROVADO' | 'RECUSADO' | 'SINCRONIZANDO' | 'SINCRONIZADO', options: any = {}): FetchArgs {
            const localVarPath = `/fluxos`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (origem !== undefined) {
                localVarQueryParameter['origem'] = origem;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {boolean} [ignorar_movimentacoes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProdutosFluxo(uuid: string, ignorar_movimentacoes?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling listProdutosFluxo.');
            }
            const localVarPath = `/fluxos/{uuid}/produtos`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (ignorar_movimentacoes !== undefined) {
                localVarQueryParameter['ignorar_movimentacoes'] = ignorar_movimentacoes;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fluxo_uuid 
         * @param {UnitrierNegarFluxoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negarFluxo(fluxo_uuid: string, body: UnitrierNegarFluxoRequest, options: any = {}): FetchArgs {
            // verify required parameter 'fluxo_uuid' is not null or undefined
            if (fluxo_uuid === null || fluxo_uuid === undefined) {
                throw new RequiredError('fluxo_uuid','Required parameter fluxo_uuid was null or undefined when calling negarFluxo.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling negarFluxo.');
            }
            const localVarPath = `/fluxos/{fluxo_uuid}:negar`
                .replace(`{${"fluxo_uuid"}}`, encodeURIComponent(String(fluxo_uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierNegarFluxoRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fluxo_uuid 
         * @param {'API' | 'CSV'} [formato] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relatorioAlteracoesProdutos(fluxo_uuid: string, formato?: 'API' | 'CSV', options: any = {}): FetchArgs {
            // verify required parameter 'fluxo_uuid' is not null or undefined
            if (fluxo_uuid === null || fluxo_uuid === undefined) {
                throw new RequiredError('fluxo_uuid','Required parameter fluxo_uuid was null or undefined when calling relatorioAlteracoesProdutos.');
            }
            const localVarPath = `/fluxos/{fluxo_uuid}:relatorioAlteracoesProdutos`
                .replace(`{${"fluxo_uuid"}}`, encodeURIComponent(String(fluxo_uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (formato !== undefined) {
                localVarQueryParameter['formato'] = formato;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fluxo_uuid Quando não existe um fluxo criado, e o processo de atualização é através da aquisição, fluxo_uuid deve possuir o valor \&quot;-\&quot;.
         * @param {string} produto_uuid 
         * @param {UnitrierUpdateProdutoFluxoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduto(fluxo_uuid: string, produto_uuid: string, body: UnitrierUpdateProdutoFluxoRequest, options: any = {}): FetchArgs {
            // verify required parameter 'fluxo_uuid' is not null or undefined
            if (fluxo_uuid === null || fluxo_uuid === undefined) {
                throw new RequiredError('fluxo_uuid','Required parameter fluxo_uuid was null or undefined when calling updateProduto.');
            }
            // verify required parameter 'produto_uuid' is not null or undefined
            if (produto_uuid === null || produto_uuid === undefined) {
                throw new RequiredError('produto_uuid','Required parameter produto_uuid was null or undefined when calling updateProduto.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateProduto.');
            }
            const localVarPath = `/fluxos/{fluxo_uuid}/produtos/{produto_uuid}`
                .replace(`{${"fluxo_uuid"}}`, encodeURIComponent(String(fluxo_uuid)))
                .replace(`{${"produto_uuid"}}`, encodeURIComponent(String(produto_uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierUpdateProdutoFluxoRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fluxo_uuid 
         * @param {UnitrierUpdateStatusFluxoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatus(fluxo_uuid: string, body: UnitrierUpdateStatusFluxoRequest, options: any = {}): FetchArgs {
            // verify required parameter 'fluxo_uuid' is not null or undefined
            if (fluxo_uuid === null || fluxo_uuid === undefined) {
                throw new RequiredError('fluxo_uuid','Required parameter fluxo_uuid was null or undefined when calling updateStatus.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateStatus.');
            }
            const localVarPath = `/fluxos/{fluxo_uuid}:updateStatus`
                .replace(`{${"fluxo_uuid"}}`, encodeURIComponent(String(fluxo_uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierUpdateStatusFluxoRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fluxo_uuid 
         * @param {UnitrierUpdateStatusSincronizacaoProdutoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatusSincronizacaoProduto(fluxo_uuid: string, body: UnitrierUpdateStatusSincronizacaoProdutoRequest, options: any = {}): FetchArgs {
            // verify required parameter 'fluxo_uuid' is not null or undefined
            if (fluxo_uuid === null || fluxo_uuid === undefined) {
                throw new RequiredError('fluxo_uuid','Required parameter fluxo_uuid was null or undefined when calling updateStatusSincronizacaoProduto.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateStatusSincronizacaoProduto.');
            }
            const localVarPath = `/fluxos/{fluxo_uuid}:updateStatusSincronizacaoProduto`
                .replace(`{${"fluxo_uuid"}}`, encodeURIComponent(String(fluxo_uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierUpdateStatusSincronizacaoProdutoRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FluxoServiceApi - functional programming interface
 * @export
 */
export const FluxoServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} fluxo_uuid 
         * @param {UnitrierAlterarStatusProdutosFluxoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alterarStatusProdutos(fluxo_uuid: string, body: UnitrierAlterarStatusProdutosFluxoRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = FluxoServiceApiFetchParamCreator(configuration).alterarStatusProdutos(fluxo_uuid, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} fluxo_uuid 
         * @param {UnitrierAutorizarFluxoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autorizarFluxo(fluxo_uuid: string, body: UnitrierAutorizarFluxoRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = FluxoServiceApiFetchParamCreator(configuration).autorizarFluxo(fluxo_uuid, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierCalcularProjecaoLucroFluxoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calcularProjecaoLucro(uuid: string, body: UnitrierCalcularProjecaoLucroFluxoRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierCalcularProjecaoLucroFluxoResponse> {
            const localVarFetchArgs = FluxoServiceApiFetchParamCreator(configuration).calcularProjecaoLucro(uuid, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {boolean} [todas_unidades] Retornar as informações, mesmo de unidades fora do fluxo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFluxo(uuid: string, todas_unidades?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierFluxo> {
            const localVarFetchArgs = FluxoServiceApiFetchParamCreator(configuration).getFluxo(uuid, todas_unidades, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} produto_uuid 
         * @param {string} [unidade_uuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricoProdutoFluxos(produto_uuid: string, unidade_uuid?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierGetHistoricoProdutoFluxosResponse> {
            const localVarFetchArgs = FluxoServiceApiFetchParamCreator(configuration).getHistoricoProdutoFluxos(produto_uuid, unidade_uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retornar as informações do produto em todas as unidades do fluxo. Caso o produto nunca tenha sido atualizad, os dados retornados são os atuais.
         * @param {string} fluxo_uuid Quando não existe um fluxo criado, e o processo de atualização é através da aquisição, fluxo_uuid deve possuir o valor \&quot;-\&quot;.
         * @param {string} produto_uuid 
         * @param {'ORIGEM_UNDEFINED' | 'PESQUISA' | 'ACAO_VENDA' | 'GESTAO_CATEGORIA' | 'AQUISICAO' | 'GESTAO_CATEGORIA_CATEGORIA'} [origem] Caso o produto esteja sendo alterado através de uma aquisição, o campo \&quot;fluxo_uuid\&quot; deve ser passado com o valor \&quot;-\&quot; e o campo \&quot;origem\&quot; com o valor \&quot;AQUISICAO\&quot;. Para os demais casos em que existe um fluxo, o campo \&quot;origem\&quot; é ignorado.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProdutoFluxo(fluxo_uuid: string, produto_uuid: string, origem?: 'ORIGEM_UNDEFINED' | 'PESQUISA' | 'ACAO_VENDA' | 'GESTAO_CATEGORIA' | 'AQUISICAO' | 'GESTAO_CATEGORIA_CATEGORIA', options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierGetProdutoFluxoResponse> {
            const localVarFetchArgs = FluxoServiceApiFetchParamCreator(configuration).getProdutoFluxo(fluxo_uuid, produto_uuid, origem, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAutorizadosDesincronizados(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListAutorizadosDesincronizadosResponse> {
            const localVarFetchArgs = FluxoServiceApiFetchParamCreator(configuration).listAutorizadosDesincronizados(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {'ORIGEM_UNDEFINED' | 'PESQUISA' | 'ACAO_VENDA' | 'GESTAO_CATEGORIA' | 'AQUISICAO' | 'GESTAO_CATEGORIA_CATEGORIA'} [origem] 
         * @param {'STATUS_UNDEFINED' | 'PENDENTE' | 'APROVADO' | 'RECUSADO' | 'SINCRONIZANDO' | 'SINCRONIZADO'} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFluxos(origem?: 'ORIGEM_UNDEFINED' | 'PESQUISA' | 'ACAO_VENDA' | 'GESTAO_CATEGORIA' | 'AQUISICAO' | 'GESTAO_CATEGORIA_CATEGORIA', status?: 'STATUS_UNDEFINED' | 'PENDENTE' | 'APROVADO' | 'RECUSADO' | 'SINCRONIZANDO' | 'SINCRONIZADO', options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListFluxosResponse> {
            const localVarFetchArgs = FluxoServiceApiFetchParamCreator(configuration).listFluxos(origem, status, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {boolean} [ignorar_movimentacoes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProdutosFluxo(uuid: string, ignorar_movimentacoes?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListProdutosFluxoResponse> {
            const localVarFetchArgs = FluxoServiceApiFetchParamCreator(configuration).listProdutosFluxo(uuid, ignorar_movimentacoes, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} fluxo_uuid 
         * @param {UnitrierNegarFluxoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negarFluxo(fluxo_uuid: string, body: UnitrierNegarFluxoRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = FluxoServiceApiFetchParamCreator(configuration).negarFluxo(fluxo_uuid, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} fluxo_uuid 
         * @param {'API' | 'CSV'} [formato] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relatorioAlteracoesProdutos(fluxo_uuid: string, formato?: 'API' | 'CSV', options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierRelatorioAlteracoesProdutosFluxoResponse> {
            const localVarFetchArgs = FluxoServiceApiFetchParamCreator(configuration).relatorioAlteracoesProdutos(fluxo_uuid, formato, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} fluxo_uuid Quando não existe um fluxo criado, e o processo de atualização é através da aquisição, fluxo_uuid deve possuir o valor \&quot;-\&quot;.
         * @param {string} produto_uuid 
         * @param {UnitrierUpdateProdutoFluxoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduto(fluxo_uuid: string, produto_uuid: string, body: UnitrierUpdateProdutoFluxoRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = FluxoServiceApiFetchParamCreator(configuration).updateProduto(fluxo_uuid, produto_uuid, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} fluxo_uuid 
         * @param {UnitrierUpdateStatusFluxoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatus(fluxo_uuid: string, body: UnitrierUpdateStatusFluxoRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = FluxoServiceApiFetchParamCreator(configuration).updateStatus(fluxo_uuid, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} fluxo_uuid 
         * @param {UnitrierUpdateStatusSincronizacaoProdutoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatusSincronizacaoProduto(fluxo_uuid: string, body: UnitrierUpdateStatusSincronizacaoProdutoRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = FluxoServiceApiFetchParamCreator(configuration).updateStatusSincronizacaoProduto(fluxo_uuid, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * FluxoServiceApi - factory interface
 * @export
 */
export const FluxoServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} fluxo_uuid 
         * @param {UnitrierAlterarStatusProdutosFluxoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alterarStatusProdutos(fluxo_uuid: string, body: UnitrierAlterarStatusProdutosFluxoRequest, options?: any) {
            return FluxoServiceApiFp(configuration).alterarStatusProdutos(fluxo_uuid, body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} fluxo_uuid 
         * @param {UnitrierAutorizarFluxoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autorizarFluxo(fluxo_uuid: string, body: UnitrierAutorizarFluxoRequest, options?: any) {
            return FluxoServiceApiFp(configuration).autorizarFluxo(fluxo_uuid, body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierCalcularProjecaoLucroFluxoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calcularProjecaoLucro(uuid: string, body: UnitrierCalcularProjecaoLucroFluxoRequest, options?: any) {
            return FluxoServiceApiFp(configuration).calcularProjecaoLucro(uuid, body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {boolean} [todas_unidades] Retornar as informações, mesmo de unidades fora do fluxo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFluxo(uuid: string, todas_unidades?: boolean, options?: any) {
            return FluxoServiceApiFp(configuration).getFluxo(uuid, todas_unidades, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} produto_uuid 
         * @param {string} [unidade_uuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricoProdutoFluxos(produto_uuid: string, unidade_uuid?: string, options?: any) {
            return FluxoServiceApiFp(configuration).getHistoricoProdutoFluxos(produto_uuid, unidade_uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retornar as informações do produto em todas as unidades do fluxo. Caso o produto nunca tenha sido atualizad, os dados retornados são os atuais.
         * @param {string} fluxo_uuid Quando não existe um fluxo criado, e o processo de atualização é através da aquisição, fluxo_uuid deve possuir o valor \&quot;-\&quot;.
         * @param {string} produto_uuid 
         * @param {'ORIGEM_UNDEFINED' | 'PESQUISA' | 'ACAO_VENDA' | 'GESTAO_CATEGORIA' | 'AQUISICAO' | 'GESTAO_CATEGORIA_CATEGORIA'} [origem] Caso o produto esteja sendo alterado através de uma aquisição, o campo \&quot;fluxo_uuid\&quot; deve ser passado com o valor \&quot;-\&quot; e o campo \&quot;origem\&quot; com o valor \&quot;AQUISICAO\&quot;. Para os demais casos em que existe um fluxo, o campo \&quot;origem\&quot; é ignorado.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProdutoFluxo(fluxo_uuid: string, produto_uuid: string, origem?: 'ORIGEM_UNDEFINED' | 'PESQUISA' | 'ACAO_VENDA' | 'GESTAO_CATEGORIA' | 'AQUISICAO' | 'GESTAO_CATEGORIA_CATEGORIA', options?: any) {
            return FluxoServiceApiFp(configuration).getProdutoFluxo(fluxo_uuid, produto_uuid, origem, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAutorizadosDesincronizados(options?: any) {
            return FluxoServiceApiFp(configuration).listAutorizadosDesincronizados(options)(fetch, basePath);
        },
        /**
         * 
         * @param {'ORIGEM_UNDEFINED' | 'PESQUISA' | 'ACAO_VENDA' | 'GESTAO_CATEGORIA' | 'AQUISICAO' | 'GESTAO_CATEGORIA_CATEGORIA'} [origem] 
         * @param {'STATUS_UNDEFINED' | 'PENDENTE' | 'APROVADO' | 'RECUSADO' | 'SINCRONIZANDO' | 'SINCRONIZADO'} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFluxos(origem?: 'ORIGEM_UNDEFINED' | 'PESQUISA' | 'ACAO_VENDA' | 'GESTAO_CATEGORIA' | 'AQUISICAO' | 'GESTAO_CATEGORIA_CATEGORIA', status?: 'STATUS_UNDEFINED' | 'PENDENTE' | 'APROVADO' | 'RECUSADO' | 'SINCRONIZANDO' | 'SINCRONIZADO', options?: any) {
            return FluxoServiceApiFp(configuration).listFluxos(origem, status, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {boolean} [ignorar_movimentacoes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProdutosFluxo(uuid: string, ignorar_movimentacoes?: boolean, options?: any) {
            return FluxoServiceApiFp(configuration).listProdutosFluxo(uuid, ignorar_movimentacoes, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} fluxo_uuid 
         * @param {UnitrierNegarFluxoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negarFluxo(fluxo_uuid: string, body: UnitrierNegarFluxoRequest, options?: any) {
            return FluxoServiceApiFp(configuration).negarFluxo(fluxo_uuid, body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} fluxo_uuid 
         * @param {'API' | 'CSV'} [formato] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relatorioAlteracoesProdutos(fluxo_uuid: string, formato?: 'API' | 'CSV', options?: any) {
            return FluxoServiceApiFp(configuration).relatorioAlteracoesProdutos(fluxo_uuid, formato, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} fluxo_uuid Quando não existe um fluxo criado, e o processo de atualização é através da aquisição, fluxo_uuid deve possuir o valor \&quot;-\&quot;.
         * @param {string} produto_uuid 
         * @param {UnitrierUpdateProdutoFluxoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduto(fluxo_uuid: string, produto_uuid: string, body: UnitrierUpdateProdutoFluxoRequest, options?: any) {
            return FluxoServiceApiFp(configuration).updateProduto(fluxo_uuid, produto_uuid, body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} fluxo_uuid 
         * @param {UnitrierUpdateStatusFluxoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatus(fluxo_uuid: string, body: UnitrierUpdateStatusFluxoRequest, options?: any) {
            return FluxoServiceApiFp(configuration).updateStatus(fluxo_uuid, body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} fluxo_uuid 
         * @param {UnitrierUpdateStatusSincronizacaoProdutoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatusSincronizacaoProduto(fluxo_uuid: string, body: UnitrierUpdateStatusSincronizacaoProdutoRequest, options?: any) {
            return FluxoServiceApiFp(configuration).updateStatusSincronizacaoProduto(fluxo_uuid, body, options)(fetch, basePath);
        },
    };
};

/**
 * FluxoServiceApi - object-oriented interface
 * @export
 * @class FluxoServiceApi
 * @extends {BaseAPI}
 */
export class FluxoServiceApi extends BaseAPI {
    /**
     * 
     * @param {string} fluxo_uuid 
     * @param {UnitrierAlterarStatusProdutosFluxoRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FluxoServiceApi
     */
    public alterarStatusProdutos(fluxo_uuid: string, body: UnitrierAlterarStatusProdutosFluxoRequest, options?: any) {
        return FluxoServiceApiFp(this.configuration).alterarStatusProdutos(fluxo_uuid, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} fluxo_uuid 
     * @param {UnitrierAutorizarFluxoRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FluxoServiceApi
     */
    public autorizarFluxo(fluxo_uuid: string, body: UnitrierAutorizarFluxoRequest, options?: any) {
        return FluxoServiceApiFp(this.configuration).autorizarFluxo(fluxo_uuid, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} uuid 
     * @param {UnitrierCalcularProjecaoLucroFluxoRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FluxoServiceApi
     */
    public calcularProjecaoLucro(uuid: string, body: UnitrierCalcularProjecaoLucroFluxoRequest, options?: any) {
        return FluxoServiceApiFp(this.configuration).calcularProjecaoLucro(uuid, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} uuid 
     * @param {boolean} [todas_unidades] Retornar as informações, mesmo de unidades fora do fluxo.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FluxoServiceApi
     */
    public getFluxo(uuid: string, todas_unidades?: boolean, options?: any) {
        return FluxoServiceApiFp(this.configuration).getFluxo(uuid, todas_unidades, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} produto_uuid 
     * @param {string} [unidade_uuid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FluxoServiceApi
     */
    public getHistoricoProdutoFluxos(produto_uuid: string, unidade_uuid?: string, options?: any) {
        return FluxoServiceApiFp(this.configuration).getHistoricoProdutoFluxos(produto_uuid, unidade_uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retornar as informações do produto em todas as unidades do fluxo. Caso o produto nunca tenha sido atualizad, os dados retornados são os atuais.
     * @param {string} fluxo_uuid Quando não existe um fluxo criado, e o processo de atualização é através da aquisição, fluxo_uuid deve possuir o valor \&quot;-\&quot;.
     * @param {string} produto_uuid 
     * @param {'ORIGEM_UNDEFINED' | 'PESQUISA' | 'ACAO_VENDA' | 'GESTAO_CATEGORIA' | 'AQUISICAO' | 'GESTAO_CATEGORIA_CATEGORIA'} [origem] Caso o produto esteja sendo alterado através de uma aquisição, o campo \&quot;fluxo_uuid\&quot; deve ser passado com o valor \&quot;-\&quot; e o campo \&quot;origem\&quot; com o valor \&quot;AQUISICAO\&quot;. Para os demais casos em que existe um fluxo, o campo \&quot;origem\&quot; é ignorado.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FluxoServiceApi
     */
    public getProdutoFluxo(fluxo_uuid: string, produto_uuid: string, origem?: 'ORIGEM_UNDEFINED' | 'PESQUISA' | 'ACAO_VENDA' | 'GESTAO_CATEGORIA' | 'AQUISICAO' | 'GESTAO_CATEGORIA_CATEGORIA', options?: any) {
        return FluxoServiceApiFp(this.configuration).getProdutoFluxo(fluxo_uuid, produto_uuid, origem, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FluxoServiceApi
     */
    public listAutorizadosDesincronizados(options?: any) {
        return FluxoServiceApiFp(this.configuration).listAutorizadosDesincronizados(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {'ORIGEM_UNDEFINED' | 'PESQUISA' | 'ACAO_VENDA' | 'GESTAO_CATEGORIA' | 'AQUISICAO' | 'GESTAO_CATEGORIA_CATEGORIA'} [origem] 
     * @param {'STATUS_UNDEFINED' | 'PENDENTE' | 'APROVADO' | 'RECUSADO' | 'SINCRONIZANDO' | 'SINCRONIZADO'} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FluxoServiceApi
     */
    public listFluxos(origem?: 'ORIGEM_UNDEFINED' | 'PESQUISA' | 'ACAO_VENDA' | 'GESTAO_CATEGORIA' | 'AQUISICAO' | 'GESTAO_CATEGORIA_CATEGORIA', status?: 'STATUS_UNDEFINED' | 'PENDENTE' | 'APROVADO' | 'RECUSADO' | 'SINCRONIZANDO' | 'SINCRONIZADO', options?: any) {
        return FluxoServiceApiFp(this.configuration).listFluxos(origem, status, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} uuid 
     * @param {boolean} [ignorar_movimentacoes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FluxoServiceApi
     */
    public listProdutosFluxo(uuid: string, ignorar_movimentacoes?: boolean, options?: any) {
        return FluxoServiceApiFp(this.configuration).listProdutosFluxo(uuid, ignorar_movimentacoes, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} fluxo_uuid 
     * @param {UnitrierNegarFluxoRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FluxoServiceApi
     */
    public negarFluxo(fluxo_uuid: string, body: UnitrierNegarFluxoRequest, options?: any) {
        return FluxoServiceApiFp(this.configuration).negarFluxo(fluxo_uuid, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} fluxo_uuid 
     * @param {'API' | 'CSV'} [formato] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FluxoServiceApi
     */
    public relatorioAlteracoesProdutos(fluxo_uuid: string, formato?: 'API' | 'CSV', options?: any) {
        return FluxoServiceApiFp(this.configuration).relatorioAlteracoesProdutos(fluxo_uuid, formato, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} fluxo_uuid Quando não existe um fluxo criado, e o processo de atualização é através da aquisição, fluxo_uuid deve possuir o valor \&quot;-\&quot;.
     * @param {string} produto_uuid 
     * @param {UnitrierUpdateProdutoFluxoRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FluxoServiceApi
     */
    public updateProduto(fluxo_uuid: string, produto_uuid: string, body: UnitrierUpdateProdutoFluxoRequest, options?: any) {
        return FluxoServiceApiFp(this.configuration).updateProduto(fluxo_uuid, produto_uuid, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} fluxo_uuid 
     * @param {UnitrierUpdateStatusFluxoRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FluxoServiceApi
     */
    public updateStatus(fluxo_uuid: string, body: UnitrierUpdateStatusFluxoRequest, options?: any) {
        return FluxoServiceApiFp(this.configuration).updateStatus(fluxo_uuid, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} fluxo_uuid 
     * @param {UnitrierUpdateStatusSincronizacaoProdutoRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FluxoServiceApi
     */
    public updateStatusSincronizacaoProduto(fluxo_uuid: string, body: UnitrierUpdateStatusSincronizacaoProdutoRequest, options?: any) {
        return FluxoServiceApiFp(this.configuration).updateStatusSincronizacaoProduto(fluxo_uuid, body, options)(this.fetch, this.basePath);
    }

}

/**
 * FornecedorServiceApi - fetch parameter creator
 * @export
 */
export const FornecedorServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(page_number?: number, page_size?: number, options: any = {}): FetchArgs {
            const localVarPath = `/fornecedores`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (page_number !== undefined) {
                localVarQueryParameter['page_number'] = page_number;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {string} [entidade_uuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdmin(page_number?: number, page_size?: number, entidade_uuid?: string, options: any = {}): FetchArgs {
            const localVarPath = `/admin/fornecedores`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (page_number !== undefined) {
                localVarQueryParameter['page_number'] = page_number;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }

            if (entidade_uuid !== undefined) {
                localVarQueryParameter['entidade_uuid'] = entidade_uuid;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FornecedorServiceApi - functional programming interface
 * @export
 */
export const FornecedorServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(page_number?: number, page_size?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListFornecedoresResponse> {
            const localVarFetchArgs = FornecedorServiceApiFetchParamCreator(configuration).list(page_number, page_size, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {string} [entidade_uuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdmin(page_number?: number, page_size?: number, entidade_uuid?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListFornecedoresResponse> {
            const localVarFetchArgs = FornecedorServiceApiFetchParamCreator(configuration).listAdmin(page_number, page_size, entidade_uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * FornecedorServiceApi - factory interface
 * @export
 */
export const FornecedorServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(page_number?: number, page_size?: number, options?: any) {
            return FornecedorServiceApiFp(configuration).list(page_number, page_size, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {string} [entidade_uuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdmin(page_number?: number, page_size?: number, entidade_uuid?: string, options?: any) {
            return FornecedorServiceApiFp(configuration).listAdmin(page_number, page_size, entidade_uuid, options)(fetch, basePath);
        },
    };
};

/**
 * FornecedorServiceApi - object-oriented interface
 * @export
 * @class FornecedorServiceApi
 * @extends {BaseAPI}
 */
export class FornecedorServiceApi extends BaseAPI {
    /**
     * 
     * @param {number} [page_number] 
     * @param {number} [page_size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FornecedorServiceApi
     */
    public list(page_number?: number, page_size?: number, options?: any) {
        return FornecedorServiceApiFp(this.configuration).list(page_number, page_size, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [page_number] 
     * @param {number} [page_size] 
     * @param {string} [entidade_uuid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FornecedorServiceApi
     */
    public listAdmin(page_number?: number, page_size?: number, entidade_uuid?: string, options?: any) {
        return FornecedorServiceApiFp(this.configuration).listAdmin(page_number, page_size, entidade_uuid, options)(this.fetch, this.basePath);
    }

}

/**
 * GestaoCategoriaServiceApi - fetch parameter creator
 * @export
 */
export const GestaoCategoriaServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierCalcularCategoriasProcessoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calcularCategoriasProcesso(uuid: string, body: UnitrierCalcularCategoriasProcessoRequest, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling calcularCategoriasProcesso.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling calcularCategoriasProcesso.');
            }
            const localVarPath = `/pricing/gestao-categorias/{uuid}/categorias:calcular`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierCalcularCategoriasProcessoRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} processo 
         * @param {string} categoria 
         * @param {UnitrierCalcularMarcasCategoriaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calcularMarcasCategoria(processo: string, categoria: string, body: UnitrierCalcularMarcasCategoriaRequest, options: any = {}): FetchArgs {
            // verify required parameter 'processo' is not null or undefined
            if (processo === null || processo === undefined) {
                throw new RequiredError('processo','Required parameter processo was null or undefined when calling calcularMarcasCategoria.');
            }
            // verify required parameter 'categoria' is not null or undefined
            if (categoria === null || categoria === undefined) {
                throw new RequiredError('categoria','Required parameter categoria was null or undefined when calling calcularMarcasCategoria.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling calcularMarcasCategoria.');
            }
            const localVarPath = `/pricing/gestao-categorias/{processo}/categorias/{categoria}/marcas:calcular`
                .replace(`{${"processo"}}`, encodeURIComponent(String(processo)))
                .replace(`{${"categoria"}}`, encodeURIComponent(String(categoria)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierCalcularMarcasCategoriaRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierCreateGestaoCategoriaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGestaoCategoria(body: UnitrierCreateGestaoCategoriaRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createGestaoCategoria.');
            }
            const localVarPath = `/pricing/gestao-categorias`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierCreateGestaoCategoriaRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Marca a categoria como \"finalizada\"
         * @param {string} processo 
         * @param {string} categoria 
         * @param {UnitrierFinalizarCategoriaGCRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finalizarCategoria(processo: string, categoria: string, body: UnitrierFinalizarCategoriaGCRequest, options: any = {}): FetchArgs {
            // verify required parameter 'processo' is not null or undefined
            if (processo === null || processo === undefined) {
                throw new RequiredError('processo','Required parameter processo was null or undefined when calling finalizarCategoria.');
            }
            // verify required parameter 'categoria' is not null or undefined
            if (categoria === null || categoria === undefined) {
                throw new RequiredError('categoria','Required parameter categoria was null or undefined when calling finalizarCategoria.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling finalizarCategoria.');
            }
            const localVarPath = `/pricing/gestao-categorias/{processo}/categorias/{categoria}:finalizar`
                .replace(`{${"processo"}}`, encodeURIComponent(String(processo)))
                .replace(`{${"categoria"}}`, encodeURIComponent(String(categoria)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierFinalizarCategoriaGCRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierGerarAnalisePerformanceGestaoCategoriaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gerarAnalisePerformance(body: UnitrierGerarAnalisePerformanceGestaoCategoriaRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling gerarAnalisePerformance.');
            }
            const localVarPath = `/pricing/gestao-categorias:gerarAnalisePerformance`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierGerarAnalisePerformanceGestaoCategoriaRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGestaoCategoria(uuid: string, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling getGestaoCategoria.');
            }
            const localVarPath = `/pricing/gestao-categorias/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGestaoCategorias(options: any = {}): FetchArgs {
            const localVarPath = `/pricing/gestao-categorias`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GestaoCategoriaServiceApi - functional programming interface
 * @export
 */
export const GestaoCategoriaServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierCalcularCategoriasProcessoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calcularCategoriasProcesso(uuid: string, body: UnitrierCalcularCategoriasProcessoRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierCalcularCategoriasProcessoResponse> {
            const localVarFetchArgs = GestaoCategoriaServiceApiFetchParamCreator(configuration).calcularCategoriasProcesso(uuid, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} processo 
         * @param {string} categoria 
         * @param {UnitrierCalcularMarcasCategoriaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calcularMarcasCategoria(processo: string, categoria: string, body: UnitrierCalcularMarcasCategoriaRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierCalcularMarcasCategoriaResponse> {
            const localVarFetchArgs = GestaoCategoriaServiceApiFetchParamCreator(configuration).calcularMarcasCategoria(processo, categoria, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierCreateGestaoCategoriaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGestaoCategoria(body: UnitrierCreateGestaoCategoriaRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierGestaoCategoria> {
            const localVarFetchArgs = GestaoCategoriaServiceApiFetchParamCreator(configuration).createGestaoCategoria(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Marca a categoria como \"finalizada\"
         * @param {string} processo 
         * @param {string} categoria 
         * @param {UnitrierFinalizarCategoriaGCRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finalizarCategoria(processo: string, categoria: string, body: UnitrierFinalizarCategoriaGCRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GestaoCategoriaCategoriaStats> {
            const localVarFetchArgs = GestaoCategoriaServiceApiFetchParamCreator(configuration).finalizarCategoria(processo, categoria, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierGerarAnalisePerformanceGestaoCategoriaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gerarAnalisePerformance(body: UnitrierGerarAnalisePerformanceGestaoCategoriaRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierGerarAnalisePerformanceGestaoCategoriaResponse> {
            const localVarFetchArgs = GestaoCategoriaServiceApiFetchParamCreator(configuration).gerarAnalisePerformance(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGestaoCategoria(uuid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierGestaoCategoria> {
            const localVarFetchArgs = GestaoCategoriaServiceApiFetchParamCreator(configuration).getGestaoCategoria(uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGestaoCategorias(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListGestaoCategoriasResponse> {
            const localVarFetchArgs = GestaoCategoriaServiceApiFetchParamCreator(configuration).listGestaoCategorias(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * GestaoCategoriaServiceApi - factory interface
 * @export
 */
export const GestaoCategoriaServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierCalcularCategoriasProcessoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calcularCategoriasProcesso(uuid: string, body: UnitrierCalcularCategoriasProcessoRequest, options?: any) {
            return GestaoCategoriaServiceApiFp(configuration).calcularCategoriasProcesso(uuid, body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} processo 
         * @param {string} categoria 
         * @param {UnitrierCalcularMarcasCategoriaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calcularMarcasCategoria(processo: string, categoria: string, body: UnitrierCalcularMarcasCategoriaRequest, options?: any) {
            return GestaoCategoriaServiceApiFp(configuration).calcularMarcasCategoria(processo, categoria, body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierCreateGestaoCategoriaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGestaoCategoria(body: UnitrierCreateGestaoCategoriaRequest, options?: any) {
            return GestaoCategoriaServiceApiFp(configuration).createGestaoCategoria(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Marca a categoria como \"finalizada\"
         * @param {string} processo 
         * @param {string} categoria 
         * @param {UnitrierFinalizarCategoriaGCRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finalizarCategoria(processo: string, categoria: string, body: UnitrierFinalizarCategoriaGCRequest, options?: any) {
            return GestaoCategoriaServiceApiFp(configuration).finalizarCategoria(processo, categoria, body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierGerarAnalisePerformanceGestaoCategoriaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gerarAnalisePerformance(body: UnitrierGerarAnalisePerformanceGestaoCategoriaRequest, options?: any) {
            return GestaoCategoriaServiceApiFp(configuration).gerarAnalisePerformance(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGestaoCategoria(uuid: string, options?: any) {
            return GestaoCategoriaServiceApiFp(configuration).getGestaoCategoria(uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGestaoCategorias(options?: any) {
            return GestaoCategoriaServiceApiFp(configuration).listGestaoCategorias(options)(fetch, basePath);
        },
    };
};

/**
 * GestaoCategoriaServiceApi - object-oriented interface
 * @export
 * @class GestaoCategoriaServiceApi
 * @extends {BaseAPI}
 */
export class GestaoCategoriaServiceApi extends BaseAPI {
    /**
     * 
     * @param {string} uuid 
     * @param {UnitrierCalcularCategoriasProcessoRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GestaoCategoriaServiceApi
     */
    public calcularCategoriasProcesso(uuid: string, body: UnitrierCalcularCategoriasProcessoRequest, options?: any) {
        return GestaoCategoriaServiceApiFp(this.configuration).calcularCategoriasProcesso(uuid, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} processo 
     * @param {string} categoria 
     * @param {UnitrierCalcularMarcasCategoriaRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GestaoCategoriaServiceApi
     */
    public calcularMarcasCategoria(processo: string, categoria: string, body: UnitrierCalcularMarcasCategoriaRequest, options?: any) {
        return GestaoCategoriaServiceApiFp(this.configuration).calcularMarcasCategoria(processo, categoria, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierCreateGestaoCategoriaRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GestaoCategoriaServiceApi
     */
    public createGestaoCategoria(body: UnitrierCreateGestaoCategoriaRequest, options?: any) {
        return GestaoCategoriaServiceApiFp(this.configuration).createGestaoCategoria(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Marca a categoria como \"finalizada\"
     * @param {string} processo 
     * @param {string} categoria 
     * @param {UnitrierFinalizarCategoriaGCRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GestaoCategoriaServiceApi
     */
    public finalizarCategoria(processo: string, categoria: string, body: UnitrierFinalizarCategoriaGCRequest, options?: any) {
        return GestaoCategoriaServiceApiFp(this.configuration).finalizarCategoria(processo, categoria, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierGerarAnalisePerformanceGestaoCategoriaRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GestaoCategoriaServiceApi
     */
    public gerarAnalisePerformance(body: UnitrierGerarAnalisePerformanceGestaoCategoriaRequest, options?: any) {
        return GestaoCategoriaServiceApiFp(this.configuration).gerarAnalisePerformance(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GestaoCategoriaServiceApi
     */
    public getGestaoCategoria(uuid: string, options?: any) {
        return GestaoCategoriaServiceApiFp(this.configuration).getGestaoCategoria(uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GestaoCategoriaServiceApi
     */
    public listGestaoCategorias(options?: any) {
        return GestaoCategoriaServiceApiFp(this.configuration).listGestaoCategorias(options)(this.fetch, this.basePath);
    }

}

/**
 * IntegracaoServiceApi - fetch parameter creator
 * @export
 */
export const IntegracaoServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get integrator historic
         * @param {number} id 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historicIntegrator(id: number, page_number?: number, page_size?: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling historicIntegrator.');
            }
            const localVarPath = `/integracao/status/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (page_number !== undefined) {
                localVarQueryParameter['page_number'] = page_number;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Importação de Categorias
         * @param {UnitrierImportCategoriasRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importCategorias(body: UnitrierImportCategoriasRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling importCategorias.');
            }
            const localVarPath = `/integracao/categorias:import`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierImportCategoriasRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Importação de Concorrentes
         * @param {UnitrierImportConcorrentesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importConcorrentes(body: UnitrierImportConcorrentesRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling importConcorrentes.');
            }
            const localVarPath = `/integracao/concorrentes:import`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierImportConcorrentesRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Importação de Departamentos
         * @param {UnitrierImportDepartamentosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importDepartamentos(body: UnitrierImportDepartamentosRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling importDepartamentos.');
            }
            const localVarPath = `/integracao/departamentos:import`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierImportDepartamentosRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Importação de Fornecedores
         * @param {UnitrierImportFornecedoresRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importFornecedores(body: UnitrierImportFornecedoresRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling importFornecedores.');
            }
            const localVarPath = `/integracao/fornecedores:import`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierImportFornecedoresRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Importação de Metas
         * @param {UnitrierImportMetasRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importMetas(body: UnitrierImportMetasRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling importMetas.');
            }
            const localVarPath = `/integracao/metas:import`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierImportMetasRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Importação de Movimentos de entrada e saída de estoque (compra, venda, transferência, etc)
         * @param {UnitrierImportMovimentosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importMovimentos(body: UnitrierImportMovimentosRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling importMovimentos.');
            }
            const localVarPath = `/integracao/movimentos:import`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierImportMovimentosRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Importação de Movimentos de Pesquisa
         * @param {UnitrierImportMovimentosPesquisaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importMovimentosPesquisa(body: UnitrierImportMovimentosPesquisaRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling importMovimentosPesquisa.');
            }
            const localVarPath = `/integracao/pesquisas:import`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierImportMovimentosPesquisaRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Importação de Produtos
         * @param {UnitrierImportProdutosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importProdutos(body: UnitrierImportProdutosRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling importProdutos.');
            }
            const localVarPath = `/integracao/produtos:import`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierImportProdutosRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Importação de Unidades
         * @param {UnitrierImportUnidadesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importUnidades(body: UnitrierImportUnidadesRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling importUnidades.');
            }
            const localVarPath = `/integracao/unidades:import`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierImportUnidadesRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get last status of integrators
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLastStatusIntegrators(options: any = {}): FetchArgs {
            const localVarPath = `/integracao/status`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Health check - register
         * @param {UnitrierRegisterIntegratorRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerIntegrator(body: UnitrierRegisterIntegratorRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling registerIntegrator.');
            }
            const localVarPath = `/integracao/register`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierRegisterIntegratorRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IntegracaoServiceApi - functional programming interface
 * @export
 */
export const IntegracaoServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get integrator historic
         * @param {number} id 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historicIntegrator(id: number, page_number?: number, page_size?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierHistoricIntegratorResponse> {
            const localVarFetchArgs = IntegracaoServiceApiFetchParamCreator(configuration).historicIntegrator(id, page_number, page_size, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Importação de Categorias
         * @param {UnitrierImportCategoriasRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importCategorias(body: UnitrierImportCategoriasRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierImportCategoriasResponse> {
            const localVarFetchArgs = IntegracaoServiceApiFetchParamCreator(configuration).importCategorias(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Importação de Concorrentes
         * @param {UnitrierImportConcorrentesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importConcorrentes(body: UnitrierImportConcorrentesRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierImportConcorrentesResponse> {
            const localVarFetchArgs = IntegracaoServiceApiFetchParamCreator(configuration).importConcorrentes(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Importação de Departamentos
         * @param {UnitrierImportDepartamentosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importDepartamentos(body: UnitrierImportDepartamentosRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierImportDepartamentosResponse> {
            const localVarFetchArgs = IntegracaoServiceApiFetchParamCreator(configuration).importDepartamentos(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Importação de Fornecedores
         * @param {UnitrierImportFornecedoresRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importFornecedores(body: UnitrierImportFornecedoresRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierImportFornecedoresResponse> {
            const localVarFetchArgs = IntegracaoServiceApiFetchParamCreator(configuration).importFornecedores(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Importação de Metas
         * @param {UnitrierImportMetasRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importMetas(body: UnitrierImportMetasRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierImportMetasResponse> {
            const localVarFetchArgs = IntegracaoServiceApiFetchParamCreator(configuration).importMetas(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Importação de Movimentos de entrada e saída de estoque (compra, venda, transferência, etc)
         * @param {UnitrierImportMovimentosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importMovimentos(body: UnitrierImportMovimentosRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierImportMovimentosResponse> {
            const localVarFetchArgs = IntegracaoServiceApiFetchParamCreator(configuration).importMovimentos(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Importação de Movimentos de Pesquisa
         * @param {UnitrierImportMovimentosPesquisaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importMovimentosPesquisa(body: UnitrierImportMovimentosPesquisaRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierImportMovimentosPesquisaResponse> {
            const localVarFetchArgs = IntegracaoServiceApiFetchParamCreator(configuration).importMovimentosPesquisa(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Importação de Produtos
         * @param {UnitrierImportProdutosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importProdutos(body: UnitrierImportProdutosRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierImportProdutosResponse> {
            const localVarFetchArgs = IntegracaoServiceApiFetchParamCreator(configuration).importProdutos(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Importação de Unidades
         * @param {UnitrierImportUnidadesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importUnidades(body: UnitrierImportUnidadesRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierImportUnidadesResponse> {
            const localVarFetchArgs = IntegracaoServiceApiFetchParamCreator(configuration).importUnidades(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get last status of integrators
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLastStatusIntegrators(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListLastStatusIntegratorsResponse> {
            const localVarFetchArgs = IntegracaoServiceApiFetchParamCreator(configuration).listLastStatusIntegrators(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Health check - register
         * @param {UnitrierRegisterIntegratorRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerIntegrator(body: UnitrierRegisterIntegratorRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierIntegratorID> {
            const localVarFetchArgs = IntegracaoServiceApiFetchParamCreator(configuration).registerIntegrator(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * IntegracaoServiceApi - factory interface
 * @export
 */
export const IntegracaoServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Get integrator historic
         * @param {number} id 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historicIntegrator(id: number, page_number?: number, page_size?: number, options?: any) {
            return IntegracaoServiceApiFp(configuration).historicIntegrator(id, page_number, page_size, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Importação de Categorias
         * @param {UnitrierImportCategoriasRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importCategorias(body: UnitrierImportCategoriasRequest, options?: any) {
            return IntegracaoServiceApiFp(configuration).importCategorias(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Importação de Concorrentes
         * @param {UnitrierImportConcorrentesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importConcorrentes(body: UnitrierImportConcorrentesRequest, options?: any) {
            return IntegracaoServiceApiFp(configuration).importConcorrentes(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Importação de Departamentos
         * @param {UnitrierImportDepartamentosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importDepartamentos(body: UnitrierImportDepartamentosRequest, options?: any) {
            return IntegracaoServiceApiFp(configuration).importDepartamentos(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Importação de Fornecedores
         * @param {UnitrierImportFornecedoresRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importFornecedores(body: UnitrierImportFornecedoresRequest, options?: any) {
            return IntegracaoServiceApiFp(configuration).importFornecedores(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Importação de Metas
         * @param {UnitrierImportMetasRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importMetas(body: UnitrierImportMetasRequest, options?: any) {
            return IntegracaoServiceApiFp(configuration).importMetas(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Importação de Movimentos de entrada e saída de estoque (compra, venda, transferência, etc)
         * @param {UnitrierImportMovimentosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importMovimentos(body: UnitrierImportMovimentosRequest, options?: any) {
            return IntegracaoServiceApiFp(configuration).importMovimentos(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Importação de Movimentos de Pesquisa
         * @param {UnitrierImportMovimentosPesquisaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importMovimentosPesquisa(body: UnitrierImportMovimentosPesquisaRequest, options?: any) {
            return IntegracaoServiceApiFp(configuration).importMovimentosPesquisa(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Importação de Produtos
         * @param {UnitrierImportProdutosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importProdutos(body: UnitrierImportProdutosRequest, options?: any) {
            return IntegracaoServiceApiFp(configuration).importProdutos(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Importação de Unidades
         * @param {UnitrierImportUnidadesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importUnidades(body: UnitrierImportUnidadesRequest, options?: any) {
            return IntegracaoServiceApiFp(configuration).importUnidades(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get last status of integrators
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLastStatusIntegrators(options?: any) {
            return IntegracaoServiceApiFp(configuration).listLastStatusIntegrators(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Health check - register
         * @param {UnitrierRegisterIntegratorRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerIntegrator(body: UnitrierRegisterIntegratorRequest, options?: any) {
            return IntegracaoServiceApiFp(configuration).registerIntegrator(body, options)(fetch, basePath);
        },
    };
};

/**
 * IntegracaoServiceApi - object-oriented interface
 * @export
 * @class IntegracaoServiceApi
 * @extends {BaseAPI}
 */
export class IntegracaoServiceApi extends BaseAPI {
    /**
     * 
     * @summary Get integrator historic
     * @param {number} id 
     * @param {number} [page_number] 
     * @param {number} [page_size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegracaoServiceApi
     */
    public historicIntegrator(id: number, page_number?: number, page_size?: number, options?: any) {
        return IntegracaoServiceApiFp(this.configuration).historicIntegrator(id, page_number, page_size, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Importação de Categorias
     * @param {UnitrierImportCategoriasRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegracaoServiceApi
     */
    public importCategorias(body: UnitrierImportCategoriasRequest, options?: any) {
        return IntegracaoServiceApiFp(this.configuration).importCategorias(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Importação de Concorrentes
     * @param {UnitrierImportConcorrentesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegracaoServiceApi
     */
    public importConcorrentes(body: UnitrierImportConcorrentesRequest, options?: any) {
        return IntegracaoServiceApiFp(this.configuration).importConcorrentes(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Importação de Departamentos
     * @param {UnitrierImportDepartamentosRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegracaoServiceApi
     */
    public importDepartamentos(body: UnitrierImportDepartamentosRequest, options?: any) {
        return IntegracaoServiceApiFp(this.configuration).importDepartamentos(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Importação de Fornecedores
     * @param {UnitrierImportFornecedoresRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegracaoServiceApi
     */
    public importFornecedores(body: UnitrierImportFornecedoresRequest, options?: any) {
        return IntegracaoServiceApiFp(this.configuration).importFornecedores(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Importação de Metas
     * @param {UnitrierImportMetasRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegracaoServiceApi
     */
    public importMetas(body: UnitrierImportMetasRequest, options?: any) {
        return IntegracaoServiceApiFp(this.configuration).importMetas(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Importação de Movimentos de entrada e saída de estoque (compra, venda, transferência, etc)
     * @param {UnitrierImportMovimentosRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegracaoServiceApi
     */
    public importMovimentos(body: UnitrierImportMovimentosRequest, options?: any) {
        return IntegracaoServiceApiFp(this.configuration).importMovimentos(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Importação de Movimentos de Pesquisa
     * @param {UnitrierImportMovimentosPesquisaRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegracaoServiceApi
     */
    public importMovimentosPesquisa(body: UnitrierImportMovimentosPesquisaRequest, options?: any) {
        return IntegracaoServiceApiFp(this.configuration).importMovimentosPesquisa(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Importação de Produtos
     * @param {UnitrierImportProdutosRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegracaoServiceApi
     */
    public importProdutos(body: UnitrierImportProdutosRequest, options?: any) {
        return IntegracaoServiceApiFp(this.configuration).importProdutos(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Importação de Unidades
     * @param {UnitrierImportUnidadesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegracaoServiceApi
     */
    public importUnidades(body: UnitrierImportUnidadesRequest, options?: any) {
        return IntegracaoServiceApiFp(this.configuration).importUnidades(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get last status of integrators
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegracaoServiceApi
     */
    public listLastStatusIntegrators(options?: any) {
        return IntegracaoServiceApiFp(this.configuration).listLastStatusIntegrators(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Health check - register
     * @param {UnitrierRegisterIntegratorRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegracaoServiceApi
     */
    public registerIntegrator(body: UnitrierRegisterIntegratorRequest, options?: any) {
        return IntegracaoServiceApiFp(this.configuration).registerIntegrator(body, options)(this.fetch, this.basePath);
    }

}

/**
 * ModeloPrecificacaoServiceApi - fetch parameter creator
 * @export
 */
export const ModeloPrecificacaoServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UnitrierModeloPrecificacao} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: UnitrierModeloPrecificacao, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create.');
            }
            const localVarPath = `/modelos-precificacao`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierModeloPrecificacao" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(uuid: string, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling get.');
            }
            const localVarPath = `/modelos-precificacao/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options: any = {}): FetchArgs {
            const localVarPath = `/modelos-precificacao`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} modelo_uuid 
         * @param {UnitrierModeloPrecificacao} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(modelo_uuid: string, body: UnitrierModeloPrecificacao, options: any = {}): FetchArgs {
            // verify required parameter 'modelo_uuid' is not null or undefined
            if (modelo_uuid === null || modelo_uuid === undefined) {
                throw new RequiredError('modelo_uuid','Required parameter modelo_uuid was null or undefined when calling update.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling update.');
            }
            const localVarPath = `/modelo-precificacao/{modelo.uuid}`
                .replace(`{${"modelo.uuid"}}`, encodeURIComponent(String(modelo_uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierModeloPrecificacao" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ModeloPrecificacaoServiceApi - functional programming interface
 * @export
 */
export const ModeloPrecificacaoServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UnitrierModeloPrecificacao} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: UnitrierModeloPrecificacao, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierModeloPrecificacao> {
            const localVarFetchArgs = ModeloPrecificacaoServiceApiFetchParamCreator(configuration).create(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(uuid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierModeloPrecificacao> {
            const localVarFetchArgs = ModeloPrecificacaoServiceApiFetchParamCreator(configuration).get(uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListModeloPrecificacaoResponse> {
            const localVarFetchArgs = ModeloPrecificacaoServiceApiFetchParamCreator(configuration).list(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} modelo_uuid 
         * @param {UnitrierModeloPrecificacao} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(modelo_uuid: string, body: UnitrierModeloPrecificacao, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierModeloPrecificacao> {
            const localVarFetchArgs = ModeloPrecificacaoServiceApiFetchParamCreator(configuration).update(modelo_uuid, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ModeloPrecificacaoServiceApi - factory interface
 * @export
 */
export const ModeloPrecificacaoServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {UnitrierModeloPrecificacao} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: UnitrierModeloPrecificacao, options?: any) {
            return ModeloPrecificacaoServiceApiFp(configuration).create(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(uuid: string, options?: any) {
            return ModeloPrecificacaoServiceApiFp(configuration).get(uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: any) {
            return ModeloPrecificacaoServiceApiFp(configuration).list(options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} modelo_uuid 
         * @param {UnitrierModeloPrecificacao} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(modelo_uuid: string, body: UnitrierModeloPrecificacao, options?: any) {
            return ModeloPrecificacaoServiceApiFp(configuration).update(modelo_uuid, body, options)(fetch, basePath);
        },
    };
};

/**
 * ModeloPrecificacaoServiceApi - object-oriented interface
 * @export
 * @class ModeloPrecificacaoServiceApi
 * @extends {BaseAPI}
 */
export class ModeloPrecificacaoServiceApi extends BaseAPI {
    /**
     * 
     * @param {UnitrierModeloPrecificacao} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModeloPrecificacaoServiceApi
     */
    public create(body: UnitrierModeloPrecificacao, options?: any) {
        return ModeloPrecificacaoServiceApiFp(this.configuration).create(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModeloPrecificacaoServiceApi
     */
    public get(uuid: string, options?: any) {
        return ModeloPrecificacaoServiceApiFp(this.configuration).get(uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModeloPrecificacaoServiceApi
     */
    public list(options?: any) {
        return ModeloPrecificacaoServiceApiFp(this.configuration).list(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} modelo_uuid 
     * @param {UnitrierModeloPrecificacao} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModeloPrecificacaoServiceApi
     */
    public update(modelo_uuid: string, body: UnitrierModeloPrecificacao, options?: any) {
        return ModeloPrecificacaoServiceApiFp(this.configuration).update(modelo_uuid, body, options)(this.fetch, this.basePath);
    }

}

/**
 * PerfilServiceApi - fetch parameter creator
 * @export
 */
export const PerfilServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(uuid: string, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling _delete.');
            }
            const localVarPath = `/perfis/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierCreatePerfilRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: UnitrierCreatePerfilRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create.');
            }
            const localVarPath = `/perfis`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierCreatePerfilRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(uuid: string, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling get.');
            }
            const localVarPath = `/perfis/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} usuario_uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsuario(usuario_uuid: string, options: any = {}): FetchArgs {
            // verify required parameter 'usuario_uuid' is not null or undefined
            if (usuario_uuid === null || usuario_uuid === undefined) {
                throw new RequiredError('usuario_uuid','Required parameter usuario_uuid was null or undefined when calling getUsuario.');
            }
            const localVarPath = `/perfis/usuario/{usuario_uuid}`
                .replace(`{${"usuario_uuid"}}`, encodeURIComponent(String(usuario_uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options: any = {}): FetchArgs {
            const localVarPath = `/perfis`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierUpdatePerfilRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(body: UnitrierUpdatePerfilRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling update.');
            }
            const localVarPath = `/perfis`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierUpdatePerfilRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} usuario_uuid 
         * @param {UnitrierUpdateUsuarioPerfisRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsuario(usuario_uuid: string, body: UnitrierUpdateUsuarioPerfisRequest, options: any = {}): FetchArgs {
            // verify required parameter 'usuario_uuid' is not null or undefined
            if (usuario_uuid === null || usuario_uuid === undefined) {
                throw new RequiredError('usuario_uuid','Required parameter usuario_uuid was null or undefined when calling updateUsuario.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateUsuario.');
            }
            const localVarPath = `/perfis/usuario/{usuario_uuid}`
                .replace(`{${"usuario_uuid"}}`, encodeURIComponent(String(usuario_uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierUpdateUsuarioPerfisRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PerfilServiceApi - functional programming interface
 * @export
 */
export const PerfilServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(uuid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = PerfilServiceApiFetchParamCreator(configuration)._delete(uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierCreatePerfilRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: UnitrierCreatePerfilRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = PerfilServiceApiFetchParamCreator(configuration).create(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(uuid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierPerfilPermissoes> {
            const localVarFetchArgs = PerfilServiceApiFetchParamCreator(configuration).get(uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} usuario_uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsuario(usuario_uuid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierGetUsuarioPerfisResponse> {
            const localVarFetchArgs = PerfilServiceApiFetchParamCreator(configuration).getUsuario(usuario_uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListPerfisResponse> {
            const localVarFetchArgs = PerfilServiceApiFetchParamCreator(configuration).list(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierUpdatePerfilRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(body: UnitrierUpdatePerfilRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = PerfilServiceApiFetchParamCreator(configuration).update(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} usuario_uuid 
         * @param {UnitrierUpdateUsuarioPerfisRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsuario(usuario_uuid: string, body: UnitrierUpdateUsuarioPerfisRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = PerfilServiceApiFetchParamCreator(configuration).updateUsuario(usuario_uuid, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PerfilServiceApi - factory interface
 * @export
 */
export const PerfilServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(uuid: string, options?: any) {
            return PerfilServiceApiFp(configuration)._delete(uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierCreatePerfilRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: UnitrierCreatePerfilRequest, options?: any) {
            return PerfilServiceApiFp(configuration).create(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(uuid: string, options?: any) {
            return PerfilServiceApiFp(configuration).get(uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} usuario_uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsuario(usuario_uuid: string, options?: any) {
            return PerfilServiceApiFp(configuration).getUsuario(usuario_uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: any) {
            return PerfilServiceApiFp(configuration).list(options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierUpdatePerfilRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(body: UnitrierUpdatePerfilRequest, options?: any) {
            return PerfilServiceApiFp(configuration).update(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} usuario_uuid 
         * @param {UnitrierUpdateUsuarioPerfisRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsuario(usuario_uuid: string, body: UnitrierUpdateUsuarioPerfisRequest, options?: any) {
            return PerfilServiceApiFp(configuration).updateUsuario(usuario_uuid, body, options)(fetch, basePath);
        },
    };
};

/**
 * PerfilServiceApi - object-oriented interface
 * @export
 * @class PerfilServiceApi
 * @extends {BaseAPI}
 */
export class PerfilServiceApi extends BaseAPI {
    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerfilServiceApi
     */
    public _delete(uuid: string, options?: any) {
        return PerfilServiceApiFp(this.configuration)._delete(uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierCreatePerfilRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerfilServiceApi
     */
    public create(body: UnitrierCreatePerfilRequest, options?: any) {
        return PerfilServiceApiFp(this.configuration).create(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerfilServiceApi
     */
    public get(uuid: string, options?: any) {
        return PerfilServiceApiFp(this.configuration).get(uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} usuario_uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerfilServiceApi
     */
    public getUsuario(usuario_uuid: string, options?: any) {
        return PerfilServiceApiFp(this.configuration).getUsuario(usuario_uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerfilServiceApi
     */
    public list(options?: any) {
        return PerfilServiceApiFp(this.configuration).list(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierUpdatePerfilRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerfilServiceApi
     */
    public update(body: UnitrierUpdatePerfilRequest, options?: any) {
        return PerfilServiceApiFp(this.configuration).update(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} usuario_uuid 
     * @param {UnitrierUpdateUsuarioPerfisRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerfilServiceApi
     */
    public updateUsuario(usuario_uuid: string, body: UnitrierUpdateUsuarioPerfisRequest, options?: any) {
        return PerfilServiceApiFp(this.configuration).updateUsuario(usuario_uuid, body, options)(this.fetch, this.basePath);
    }

}

/**
 * PermissaoServiceApi - fetch parameter creator
 * @export
 */
export const PermissaoServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [uuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(uuid?: string, options: any = {}): FetchArgs {
            const localVarPath = `/admin/permissoes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (uuid !== undefined) {
                localVarQueryParameter['uuid'] = uuid;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierCreatePermissaoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: UnitrierCreatePermissaoRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create.');
            }
            const localVarPath = `/admin/permissoes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierCreatePermissaoRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(page_number?: number, page_size?: number, options: any = {}): FetchArgs {
            const localVarPath = `/permissoes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (page_number !== undefined) {
                localVarQueryParameter['page_number'] = page_number;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdmin(page_number?: number, page_size?: number, options: any = {}): FetchArgs {
            const localVarPath = `/admin/permissoes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (page_number !== undefined) {
                localVarQueryParameter['page_number'] = page_number;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserAdm(options: any = {}): FetchArgs {
            const localVarPath = `/admin/user/permissoes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PermissaoServiceApi - functional programming interface
 * @export
 */
export const PermissaoServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [uuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(uuid?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = PermissaoServiceApiFetchParamCreator(configuration)._delete(uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierCreatePermissaoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: UnitrierCreatePermissaoRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = PermissaoServiceApiFetchParamCreator(configuration).create(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(page_number?: number, page_size?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListPermissoesResponse> {
            const localVarFetchArgs = PermissaoServiceApiFetchParamCreator(configuration).list(page_number, page_size, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdmin(page_number?: number, page_size?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListPermissoesResponse> {
            const localVarFetchArgs = PermissaoServiceApiFetchParamCreator(configuration).listAdmin(page_number, page_size, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserAdm(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListPermissoesResponse> {
            const localVarFetchArgs = PermissaoServiceApiFetchParamCreator(configuration).listUserAdm(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PermissaoServiceApi - factory interface
 * @export
 */
export const PermissaoServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} [uuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(uuid?: string, options?: any) {
            return PermissaoServiceApiFp(configuration)._delete(uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierCreatePermissaoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: UnitrierCreatePermissaoRequest, options?: any) {
            return PermissaoServiceApiFp(configuration).create(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(page_number?: number, page_size?: number, options?: any) {
            return PermissaoServiceApiFp(configuration).list(page_number, page_size, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdmin(page_number?: number, page_size?: number, options?: any) {
            return PermissaoServiceApiFp(configuration).listAdmin(page_number, page_size, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserAdm(options?: any) {
            return PermissaoServiceApiFp(configuration).listUserAdm(options)(fetch, basePath);
        },
    };
};

/**
 * PermissaoServiceApi - object-oriented interface
 * @export
 * @class PermissaoServiceApi
 * @extends {BaseAPI}
 */
export class PermissaoServiceApi extends BaseAPI {
    /**
     * 
     * @param {string} [uuid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissaoServiceApi
     */
    public _delete(uuid?: string, options?: any) {
        return PermissaoServiceApiFp(this.configuration)._delete(uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierCreatePermissaoRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissaoServiceApi
     */
    public create(body: UnitrierCreatePermissaoRequest, options?: any) {
        return PermissaoServiceApiFp(this.configuration).create(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [page_number] 
     * @param {number} [page_size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissaoServiceApi
     */
    public list(page_number?: number, page_size?: number, options?: any) {
        return PermissaoServiceApiFp(this.configuration).list(page_number, page_size, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [page_number] 
     * @param {number} [page_size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissaoServiceApi
     */
    public listAdmin(page_number?: number, page_size?: number, options?: any) {
        return PermissaoServiceApiFp(this.configuration).listAdmin(page_number, page_size, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissaoServiceApi
     */
    public listUserAdm(options?: any) {
        return PermissaoServiceApiFp(this.configuration).listUserAdm(options)(this.fetch, this.basePath);
    }

}

/**
 * PesquisaServiceApi - fetch parameter creator
 * @export
 */
export const PesquisaServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UnitrierCreatePesquisaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: UnitrierCreatePesquisaRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create.');
            }
            const localVarPath = `/pricing/competitividade/pesquisas`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierCreatePesquisaRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(uuid: string, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling get.');
            }
            const localVarPath = `/pricing/competitividade/pesquisas/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPesquisaExterna(data: string, options: any = {}): FetchArgs {
            // verify required parameter 'data' is not null or undefined
            if (data === null || data === undefined) {
                throw new RequiredError('data','Required parameter data was null or undefined when calling getPesquisaExterna.');
            }
            const localVarPath = `/pricing/competitividade/pesquisas-externas/{data}`
                .replace(`{${"data"}}`, encodeURIComponent(String(data)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValoresProdutos(uuid: string, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling getValoresProdutos.');
            }
            const localVarPath = `/pricing/competitividade/pesquisas/{uuid}/produtos:getValores`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierInicializarPrecosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inicializarPrecos(uuid: string, body: UnitrierInicializarPrecosRequest, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling inicializarPrecos.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling inicializarPrecos.');
            }
            const localVarPath = `/pricing/competitividade/pesquisas/{uuid}:inicializarPrecos`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierInicializarPrecosRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierIniciarAnaliseRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iniciarAnalise(uuid: string, body: UnitrierIniciarAnaliseRequest, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling iniciarAnalise.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling iniciarAnalise.');
            }
            const localVarPath = `/pricing/competitividade/pesquisas/{uuid}:iniciarAnalise`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierIniciarAnaliseRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options: any = {}): FetchArgs {
            const localVarPath = `/pricing/competitividade/pesquisas`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<string>} [unidades] 
         * @param {Array<string>} [concorrentes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPesquisasExternas(unidades?: Array<string>, concorrentes?: Array<string>, options: any = {}): FetchArgs {
            const localVarPath = `/pricing/competitividade/pesquisas-externas`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (unidades) {
                localVarQueryParameter['unidades'] = unidades;
            }

            if (concorrentes) {
                localVarQueryParameter['concorrentes'] = concorrentes;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} pesquisa_uuid 
         * @param {UnitrierUpdatePrecoVendaConcorrenteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrecoVendaConcorrente(pesquisa_uuid: string, body: UnitrierUpdatePrecoVendaConcorrenteRequest, options: any = {}): FetchArgs {
            // verify required parameter 'pesquisa_uuid' is not null or undefined
            if (pesquisa_uuid === null || pesquisa_uuid === undefined) {
                throw new RequiredError('pesquisa_uuid','Required parameter pesquisa_uuid was null or undefined when calling updatePrecoVendaConcorrente.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updatePrecoVendaConcorrente.');
            }
            const localVarPath = `/pricing/competitividade/pesquisas/{pesquisa_uuid}/produtos:updatePrecoVendaConcorrente`
                .replace(`{${"pesquisa_uuid"}}`, encodeURIComponent(String(pesquisa_uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierUpdatePrecoVendaConcorrenteRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PesquisaServiceApi - functional programming interface
 * @export
 */
export const PesquisaServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UnitrierCreatePesquisaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: UnitrierCreatePesquisaRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierPesquisa> {
            const localVarFetchArgs = PesquisaServiceApiFetchParamCreator(configuration).create(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(uuid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierPesquisa> {
            const localVarFetchArgs = PesquisaServiceApiFetchParamCreator(configuration).get(uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPesquisaExterna(data: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierGetPesquisaExternaResponse> {
            const localVarFetchArgs = PesquisaServiceApiFetchParamCreator(configuration).getPesquisaExterna(data, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValoresProdutos(uuid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierGetValoresProdutosResponse> {
            const localVarFetchArgs = PesquisaServiceApiFetchParamCreator(configuration).getValoresProdutos(uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierInicializarPrecosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inicializarPrecos(uuid: string, body: UnitrierInicializarPrecosRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = PesquisaServiceApiFetchParamCreator(configuration).inicializarPrecos(uuid, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierIniciarAnaliseRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iniciarAnalise(uuid: string, body: UnitrierIniciarAnaliseRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = PesquisaServiceApiFetchParamCreator(configuration).iniciarAnalise(uuid, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListPesquisasResponse> {
            const localVarFetchArgs = PesquisaServiceApiFetchParamCreator(configuration).list(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {Array<string>} [unidades] 
         * @param {Array<string>} [concorrentes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPesquisasExternas(unidades?: Array<string>, concorrentes?: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListPesquisasExternasResponse> {
            const localVarFetchArgs = PesquisaServiceApiFetchParamCreator(configuration).listPesquisasExternas(unidades, concorrentes, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} pesquisa_uuid 
         * @param {UnitrierUpdatePrecoVendaConcorrenteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrecoVendaConcorrente(pesquisa_uuid: string, body: UnitrierUpdatePrecoVendaConcorrenteRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = PesquisaServiceApiFetchParamCreator(configuration).updatePrecoVendaConcorrente(pesquisa_uuid, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PesquisaServiceApi - factory interface
 * @export
 */
export const PesquisaServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {UnitrierCreatePesquisaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: UnitrierCreatePesquisaRequest, options?: any) {
            return PesquisaServiceApiFp(configuration).create(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(uuid: string, options?: any) {
            return PesquisaServiceApiFp(configuration).get(uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPesquisaExterna(data: string, options?: any) {
            return PesquisaServiceApiFp(configuration).getPesquisaExterna(data, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValoresProdutos(uuid: string, options?: any) {
            return PesquisaServiceApiFp(configuration).getValoresProdutos(uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierInicializarPrecosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inicializarPrecos(uuid: string, body: UnitrierInicializarPrecosRequest, options?: any) {
            return PesquisaServiceApiFp(configuration).inicializarPrecos(uuid, body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierIniciarAnaliseRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iniciarAnalise(uuid: string, body: UnitrierIniciarAnaliseRequest, options?: any) {
            return PesquisaServiceApiFp(configuration).iniciarAnalise(uuid, body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: any) {
            return PesquisaServiceApiFp(configuration).list(options)(fetch, basePath);
        },
        /**
         * 
         * @param {Array<string>} [unidades] 
         * @param {Array<string>} [concorrentes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPesquisasExternas(unidades?: Array<string>, concorrentes?: Array<string>, options?: any) {
            return PesquisaServiceApiFp(configuration).listPesquisasExternas(unidades, concorrentes, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} pesquisa_uuid 
         * @param {UnitrierUpdatePrecoVendaConcorrenteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrecoVendaConcorrente(pesquisa_uuid: string, body: UnitrierUpdatePrecoVendaConcorrenteRequest, options?: any) {
            return PesquisaServiceApiFp(configuration).updatePrecoVendaConcorrente(pesquisa_uuid, body, options)(fetch, basePath);
        },
    };
};

/**
 * PesquisaServiceApi - object-oriented interface
 * @export
 * @class PesquisaServiceApi
 * @extends {BaseAPI}
 */
export class PesquisaServiceApi extends BaseAPI {
    /**
     * 
     * @param {UnitrierCreatePesquisaRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PesquisaServiceApi
     */
    public create(body: UnitrierCreatePesquisaRequest, options?: any) {
        return PesquisaServiceApiFp(this.configuration).create(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PesquisaServiceApi
     */
    public get(uuid: string, options?: any) {
        return PesquisaServiceApiFp(this.configuration).get(uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PesquisaServiceApi
     */
    public getPesquisaExterna(data: string, options?: any) {
        return PesquisaServiceApiFp(this.configuration).getPesquisaExterna(data, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PesquisaServiceApi
     */
    public getValoresProdutos(uuid: string, options?: any) {
        return PesquisaServiceApiFp(this.configuration).getValoresProdutos(uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} uuid 
     * @param {UnitrierInicializarPrecosRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PesquisaServiceApi
     */
    public inicializarPrecos(uuid: string, body: UnitrierInicializarPrecosRequest, options?: any) {
        return PesquisaServiceApiFp(this.configuration).inicializarPrecos(uuid, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} uuid 
     * @param {UnitrierIniciarAnaliseRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PesquisaServiceApi
     */
    public iniciarAnalise(uuid: string, body: UnitrierIniciarAnaliseRequest, options?: any) {
        return PesquisaServiceApiFp(this.configuration).iniciarAnalise(uuid, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PesquisaServiceApi
     */
    public list(options?: any) {
        return PesquisaServiceApiFp(this.configuration).list(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {Array<string>} [unidades] 
     * @param {Array<string>} [concorrentes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PesquisaServiceApi
     */
    public listPesquisasExternas(unidades?: Array<string>, concorrentes?: Array<string>, options?: any) {
        return PesquisaServiceApiFp(this.configuration).listPesquisasExternas(unidades, concorrentes, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} pesquisa_uuid 
     * @param {UnitrierUpdatePrecoVendaConcorrenteRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PesquisaServiceApi
     */
    public updatePrecoVendaConcorrente(pesquisa_uuid: string, body: UnitrierUpdatePrecoVendaConcorrenteRequest, options?: any) {
        return PesquisaServiceApiFp(this.configuration).updatePrecoVendaConcorrente(pesquisa_uuid, body, options)(this.fetch, this.basePath);
    }

}

/**
 * ProdutoServiceApi - fetch parameter creator
 * @export
 */
export const ProdutoServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} produto_uuid 
         * @param {UnitrierCalcularCurvaProdutoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calcularCurva(produto_uuid: string, body: UnitrierCalcularCurvaProdutoRequest, options: any = {}): FetchArgs {
            // verify required parameter 'produto_uuid' is not null or undefined
            if (produto_uuid === null || produto_uuid === undefined) {
                throw new RequiredError('produto_uuid','Required parameter produto_uuid was null or undefined when calling calcularCurva.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling calcularCurva.');
            }
            const localVarPath = `/produtos/{produto_uuid}:calcularCurva`
                .replace(`{${"produto_uuid"}}`, encodeURIComponent(String(produto_uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierCalcularCurvaProdutoRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierCalcularCustosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calcularCustos(body: UnitrierCalcularCustosRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling calcularCustos.');
            }
            const localVarPath = `/produtos:calculadoraCustos`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierCalcularCustosRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} categoria_uuid 
         * @param {string} [unidade_uuid] 
         * @param {string} [marca] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        escalonamentoPreco(categoria_uuid: string, unidade_uuid?: string, marca?: string, options: any = {}): FetchArgs {
            // verify required parameter 'categoria_uuid' is not null or undefined
            if (categoria_uuid === null || categoria_uuid === undefined) {
                throw new RequiredError('categoria_uuid','Required parameter categoria_uuid was null or undefined when calling escalonamentoPreco.');
            }
            const localVarPath = `/categorias/{categoria_uuid}/produtos:escalonamentoPreco`
                .replace(`{${"categoria_uuid"}}`, encodeURIComponent(String(categoria_uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (unidade_uuid !== undefined) {
                localVarQueryParameter['unidade_uuid'] = unidade_uuid;
            }

            if (marca !== undefined) {
                localVarQueryParameter['marca'] = marca;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(uuid: string, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling get.');
            }
            const localVarPath = `/produtos/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} unidade CNPJ da Unidade
         * @param {string} [codigo] Código externo (ERP) do produto.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExterno(unidade: string, codigo?: string, options: any = {}): FetchArgs {
            // verify required parameter 'unidade' is not null or undefined
            if (unidade === null || unidade === undefined) {
                throw new RequiredError('unidade','Required parameter unidade was null or undefined when calling getExterno.');
            }
            const localVarPath = `/unidades/{unidade}/produtos:getExterno`
                .replace(`{${"unidade"}}`, encodeURIComponent(String(unidade)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (codigo !== undefined) {
                localVarQueryParameter['codigo'] = codigo;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} produto_uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProdutoStats(produto_uuid: string, options: any = {}): FetchArgs {
            // verify required parameter 'produto_uuid' is not null or undefined
            if (produto_uuid === null || produto_uuid === undefined) {
                throw new RequiredError('produto_uuid','Required parameter produto_uuid was null or undefined when calling getProdutoStats.');
            }
            const localVarPath = `/produtos/{produto_uuid}/stats`
                .replace(`{${"produto_uuid"}}`, encodeURIComponent(String(produto_uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {string} [codigo] 
         * @param {string} [descricao] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(page_number?: number, page_size?: number, codigo?: string, descricao?: string, options: any = {}): FetchArgs {
            const localVarPath = `/produtos`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (page_number !== undefined) {
                localVarQueryParameter['page_number'] = page_number;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }

            if (codigo !== undefined) {
                localVarQueryParameter['codigo'] = codigo;
            }

            if (descricao !== undefined) {
                localVarQueryParameter['descricao'] = descricao;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {string} [entidade_uuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdmin(page_number?: number, page_size?: number, entidade_uuid?: string, options: any = {}): FetchArgs {
            const localVarPath = `/admin/produtos`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (page_number !== undefined) {
                localVarQueryParameter['page_number'] = page_number;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }

            if (entidade_uuid !== undefined) {
                localVarQueryParameter['entidade_uuid'] = entidade_uuid;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {string} [entidade_uuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMovimentosAdmin(page_number?: number, page_size?: number, entidade_uuid?: string, options: any = {}): FetchArgs {
            const localVarPath = `/admin/produtos/movimentos`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (page_number !== undefined) {
                localVarQueryParameter['page_number'] = page_number;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }

            if (entidade_uuid !== undefined) {
                localVarQueryParameter['entidade_uuid'] = entidade_uuid;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} produto_uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSimilares(produto_uuid: string, options: any = {}): FetchArgs {
            // verify required parameter 'produto_uuid' is not null or undefined
            if (produto_uuid === null || produto_uuid === undefined) {
                throw new RequiredError('produto_uuid','Required parameter produto_uuid was null or undefined when calling listSimilares.');
            }
            const localVarPath = `/produtos/{produto_uuid}/similares`
                .replace(`{${"produto_uuid"}}`, encodeURIComponent(String(produto_uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {string} [entidade_uuid] 
         * @param {Array<string>} [filtros_unidades_uuid] 
         * @param {Array<string>} [filtros_tipos] 
         * @param {string} [filtros_data_inicio] 
         * @param {string} [filtros_data_fim] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        movimentosAdminResume(page_number?: number, page_size?: number, entidade_uuid?: string, filtros_unidades_uuid?: Array<string>, filtros_tipos?: Array<string>, filtros_data_inicio?: string, filtros_data_fim?: string, options: any = {}): FetchArgs {
            const localVarPath = `/admin/produtos/movimentos/resume`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (page_number !== undefined) {
                localVarQueryParameter['page_number'] = page_number;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }

            if (entidade_uuid !== undefined) {
                localVarQueryParameter['entidade_uuid'] = entidade_uuid;
            }

            if (filtros_unidades_uuid) {
                localVarQueryParameter['filtros.unidades_uuid'] = filtros_unidades_uuid;
            }

            if (filtros_tipos) {
                localVarQueryParameter['filtros.tipos'] = filtros_tipos;
            }

            if (filtros_data_inicio !== undefined) {
                localVarQueryParameter['filtros.data_inicio'] = filtros_data_inicio;
            }

            if (filtros_data_fim !== undefined) {
                localVarQueryParameter['filtros.data_fim'] = filtros_data_fim;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {string} [entidade_uuid] 
         * @param {string} [filtros_unidade_uuid] 
         * @param {string} [filtros_tipo] 
         * @param {string} [filtros_data_inicio] 
         * @param {string} [filtros_data_fim] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        movimentosAdminResumeDetails(page_number?: number, page_size?: number, entidade_uuid?: string, filtros_unidade_uuid?: string, filtros_tipo?: string, filtros_data_inicio?: string, filtros_data_fim?: string, options: any = {}): FetchArgs {
            const localVarPath = `/admin/produtos/movimentos/resume/details`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (page_number !== undefined) {
                localVarQueryParameter['page_number'] = page_number;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }

            if (entidade_uuid !== undefined) {
                localVarQueryParameter['entidade_uuid'] = entidade_uuid;
            }

            if (filtros_unidade_uuid !== undefined) {
                localVarQueryParameter['filtros.unidade_uuid'] = filtros_unidade_uuid;
            }

            if (filtros_tipo !== undefined) {
                localVarQueryParameter['filtros.tipo'] = filtros_tipo;
            }

            if (filtros_data_inicio !== undefined) {
                localVarQueryParameter['filtros.data_inicio'] = filtros_data_inicio;
            }

            if (filtros_data_fim !== undefined) {
                localVarQueryParameter['filtros.data_fim'] = filtros_data_fim;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierSearchProdutosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(body: UnitrierSearchProdutosRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling search.');
            }
            const localVarPath = `/produtos:search`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierSearchProdutosRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProdutoServiceApi - functional programming interface
 * @export
 */
export const ProdutoServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} produto_uuid 
         * @param {UnitrierCalcularCurvaProdutoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calcularCurva(produto_uuid: string, body: UnitrierCalcularCurvaProdutoRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierCalcularCurvaProdutoResponse> {
            const localVarFetchArgs = ProdutoServiceApiFetchParamCreator(configuration).calcularCurva(produto_uuid, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierCalcularCustosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calcularCustos(body: UnitrierCalcularCustosRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierCalcularCustosResponse> {
            const localVarFetchArgs = ProdutoServiceApiFetchParamCreator(configuration).calcularCustos(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} categoria_uuid 
         * @param {string} [unidade_uuid] 
         * @param {string} [marca] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        escalonamentoPreco(categoria_uuid: string, unidade_uuid?: string, marca?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierEscalonamentoPrecoProdutosResponse> {
            const localVarFetchArgs = ProdutoServiceApiFetchParamCreator(configuration).escalonamentoPreco(categoria_uuid, unidade_uuid, marca, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(uuid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierProduto> {
            const localVarFetchArgs = ProdutoServiceApiFetchParamCreator(configuration).get(uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} unidade CNPJ da Unidade
         * @param {string} [codigo] Código externo (ERP) do produto.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExterno(unidade: string, codigo?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierProduto> {
            const localVarFetchArgs = ProdutoServiceApiFetchParamCreator(configuration).getExterno(unidade, codigo, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} produto_uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProdutoStats(produto_uuid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierGetProdutoStatsResponse> {
            const localVarFetchArgs = ProdutoServiceApiFetchParamCreator(configuration).getProdutoStats(produto_uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {string} [codigo] 
         * @param {string} [descricao] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(page_number?: number, page_size?: number, codigo?: string, descricao?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListProdutosResponse> {
            const localVarFetchArgs = ProdutoServiceApiFetchParamCreator(configuration).list(page_number, page_size, codigo, descricao, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {string} [entidade_uuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdmin(page_number?: number, page_size?: number, entidade_uuid?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListProdutosResponse> {
            const localVarFetchArgs = ProdutoServiceApiFetchParamCreator(configuration).listAdmin(page_number, page_size, entidade_uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {string} [entidade_uuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMovimentosAdmin(page_number?: number, page_size?: number, entidade_uuid?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListMovimentosAdminResponse> {
            const localVarFetchArgs = ProdutoServiceApiFetchParamCreator(configuration).listMovimentosAdmin(page_number, page_size, entidade_uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} produto_uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSimilares(produto_uuid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListProdutosResponse> {
            const localVarFetchArgs = ProdutoServiceApiFetchParamCreator(configuration).listSimilares(produto_uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {string} [entidade_uuid] 
         * @param {Array<string>} [filtros_unidades_uuid] 
         * @param {Array<string>} [filtros_tipos] 
         * @param {string} [filtros_data_inicio] 
         * @param {string} [filtros_data_fim] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        movimentosAdminResume(page_number?: number, page_size?: number, entidade_uuid?: string, filtros_unidades_uuid?: Array<string>, filtros_tipos?: Array<string>, filtros_data_inicio?: string, filtros_data_fim?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListMovimentosAdminResponse> {
            const localVarFetchArgs = ProdutoServiceApiFetchParamCreator(configuration).movimentosAdminResume(page_number, page_size, entidade_uuid, filtros_unidades_uuid, filtros_tipos, filtros_data_inicio, filtros_data_fim, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {string} [entidade_uuid] 
         * @param {string} [filtros_unidade_uuid] 
         * @param {string} [filtros_tipo] 
         * @param {string} [filtros_data_inicio] 
         * @param {string} [filtros_data_fim] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        movimentosAdminResumeDetails(page_number?: number, page_size?: number, entidade_uuid?: string, filtros_unidade_uuid?: string, filtros_tipo?: string, filtros_data_inicio?: string, filtros_data_fim?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListMovimentosAdminResponse> {
            const localVarFetchArgs = ProdutoServiceApiFetchParamCreator(configuration).movimentosAdminResumeDetails(page_number, page_size, entidade_uuid, filtros_unidade_uuid, filtros_tipo, filtros_data_inicio, filtros_data_fim, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierSearchProdutosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(body: UnitrierSearchProdutosRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListProdutosResponse> {
            const localVarFetchArgs = ProdutoServiceApiFetchParamCreator(configuration).search(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ProdutoServiceApi - factory interface
 * @export
 */
export const ProdutoServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} produto_uuid 
         * @param {UnitrierCalcularCurvaProdutoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calcularCurva(produto_uuid: string, body: UnitrierCalcularCurvaProdutoRequest, options?: any) {
            return ProdutoServiceApiFp(configuration).calcularCurva(produto_uuid, body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierCalcularCustosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calcularCustos(body: UnitrierCalcularCustosRequest, options?: any) {
            return ProdutoServiceApiFp(configuration).calcularCustos(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} categoria_uuid 
         * @param {string} [unidade_uuid] 
         * @param {string} [marca] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        escalonamentoPreco(categoria_uuid: string, unidade_uuid?: string, marca?: string, options?: any) {
            return ProdutoServiceApiFp(configuration).escalonamentoPreco(categoria_uuid, unidade_uuid, marca, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(uuid: string, options?: any) {
            return ProdutoServiceApiFp(configuration).get(uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} unidade CNPJ da Unidade
         * @param {string} [codigo] Código externo (ERP) do produto.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExterno(unidade: string, codigo?: string, options?: any) {
            return ProdutoServiceApiFp(configuration).getExterno(unidade, codigo, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} produto_uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProdutoStats(produto_uuid: string, options?: any) {
            return ProdutoServiceApiFp(configuration).getProdutoStats(produto_uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {string} [codigo] 
         * @param {string} [descricao] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(page_number?: number, page_size?: number, codigo?: string, descricao?: string, options?: any) {
            return ProdutoServiceApiFp(configuration).list(page_number, page_size, codigo, descricao, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {string} [entidade_uuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdmin(page_number?: number, page_size?: number, entidade_uuid?: string, options?: any) {
            return ProdutoServiceApiFp(configuration).listAdmin(page_number, page_size, entidade_uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {string} [entidade_uuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMovimentosAdmin(page_number?: number, page_size?: number, entidade_uuid?: string, options?: any) {
            return ProdutoServiceApiFp(configuration).listMovimentosAdmin(page_number, page_size, entidade_uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} produto_uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSimilares(produto_uuid: string, options?: any) {
            return ProdutoServiceApiFp(configuration).listSimilares(produto_uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {string} [entidade_uuid] 
         * @param {Array<string>} [filtros_unidades_uuid] 
         * @param {Array<string>} [filtros_tipos] 
         * @param {string} [filtros_data_inicio] 
         * @param {string} [filtros_data_fim] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        movimentosAdminResume(page_number?: number, page_size?: number, entidade_uuid?: string, filtros_unidades_uuid?: Array<string>, filtros_tipos?: Array<string>, filtros_data_inicio?: string, filtros_data_fim?: string, options?: any) {
            return ProdutoServiceApiFp(configuration).movimentosAdminResume(page_number, page_size, entidade_uuid, filtros_unidades_uuid, filtros_tipos, filtros_data_inicio, filtros_data_fim, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {string} [entidade_uuid] 
         * @param {string} [filtros_unidade_uuid] 
         * @param {string} [filtros_tipo] 
         * @param {string} [filtros_data_inicio] 
         * @param {string} [filtros_data_fim] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        movimentosAdminResumeDetails(page_number?: number, page_size?: number, entidade_uuid?: string, filtros_unidade_uuid?: string, filtros_tipo?: string, filtros_data_inicio?: string, filtros_data_fim?: string, options?: any) {
            return ProdutoServiceApiFp(configuration).movimentosAdminResumeDetails(page_number, page_size, entidade_uuid, filtros_unidade_uuid, filtros_tipo, filtros_data_inicio, filtros_data_fim, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierSearchProdutosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(body: UnitrierSearchProdutosRequest, options?: any) {
            return ProdutoServiceApiFp(configuration).search(body, options)(fetch, basePath);
        },
    };
};

/**
 * ProdutoServiceApi - object-oriented interface
 * @export
 * @class ProdutoServiceApi
 * @extends {BaseAPI}
 */
export class ProdutoServiceApi extends BaseAPI {
    /**
     * 
     * @param {string} produto_uuid 
     * @param {UnitrierCalcularCurvaProdutoRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProdutoServiceApi
     */
    public calcularCurva(produto_uuid: string, body: UnitrierCalcularCurvaProdutoRequest, options?: any) {
        return ProdutoServiceApiFp(this.configuration).calcularCurva(produto_uuid, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierCalcularCustosRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProdutoServiceApi
     */
    public calcularCustos(body: UnitrierCalcularCustosRequest, options?: any) {
        return ProdutoServiceApiFp(this.configuration).calcularCustos(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} categoria_uuid 
     * @param {string} [unidade_uuid] 
     * @param {string} [marca] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProdutoServiceApi
     */
    public escalonamentoPreco(categoria_uuid: string, unidade_uuid?: string, marca?: string, options?: any) {
        return ProdutoServiceApiFp(this.configuration).escalonamentoPreco(categoria_uuid, unidade_uuid, marca, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProdutoServiceApi
     */
    public get(uuid: string, options?: any) {
        return ProdutoServiceApiFp(this.configuration).get(uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} unidade CNPJ da Unidade
     * @param {string} [codigo] Código externo (ERP) do produto.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProdutoServiceApi
     */
    public getExterno(unidade: string, codigo?: string, options?: any) {
        return ProdutoServiceApiFp(this.configuration).getExterno(unidade, codigo, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} produto_uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProdutoServiceApi
     */
    public getProdutoStats(produto_uuid: string, options?: any) {
        return ProdutoServiceApiFp(this.configuration).getProdutoStats(produto_uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [page_number] 
     * @param {number} [page_size] 
     * @param {string} [codigo] 
     * @param {string} [descricao] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProdutoServiceApi
     */
    public list(page_number?: number, page_size?: number, codigo?: string, descricao?: string, options?: any) {
        return ProdutoServiceApiFp(this.configuration).list(page_number, page_size, codigo, descricao, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [page_number] 
     * @param {number} [page_size] 
     * @param {string} [entidade_uuid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProdutoServiceApi
     */
    public listAdmin(page_number?: number, page_size?: number, entidade_uuid?: string, options?: any) {
        return ProdutoServiceApiFp(this.configuration).listAdmin(page_number, page_size, entidade_uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [page_number] 
     * @param {number} [page_size] 
     * @param {string} [entidade_uuid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProdutoServiceApi
     */
    public listMovimentosAdmin(page_number?: number, page_size?: number, entidade_uuid?: string, options?: any) {
        return ProdutoServiceApiFp(this.configuration).listMovimentosAdmin(page_number, page_size, entidade_uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} produto_uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProdutoServiceApi
     */
    public listSimilares(produto_uuid: string, options?: any) {
        return ProdutoServiceApiFp(this.configuration).listSimilares(produto_uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [page_number] 
     * @param {number} [page_size] 
     * @param {string} [entidade_uuid] 
     * @param {Array<string>} [filtros_unidades_uuid] 
     * @param {Array<string>} [filtros_tipos] 
     * @param {string} [filtros_data_inicio] 
     * @param {string} [filtros_data_fim] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProdutoServiceApi
     */
    public movimentosAdminResume(page_number?: number, page_size?: number, entidade_uuid?: string, filtros_unidades_uuid?: Array<string>, filtros_tipos?: Array<string>, filtros_data_inicio?: string, filtros_data_fim?: string, options?: any) {
        return ProdutoServiceApiFp(this.configuration).movimentosAdminResume(page_number, page_size, entidade_uuid, filtros_unidades_uuid, filtros_tipos, filtros_data_inicio, filtros_data_fim, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [page_number] 
     * @param {number} [page_size] 
     * @param {string} [entidade_uuid] 
     * @param {string} [filtros_unidade_uuid] 
     * @param {string} [filtros_tipo] 
     * @param {string} [filtros_data_inicio] 
     * @param {string} [filtros_data_fim] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProdutoServiceApi
     */
    public movimentosAdminResumeDetails(page_number?: number, page_size?: number, entidade_uuid?: string, filtros_unidade_uuid?: string, filtros_tipo?: string, filtros_data_inicio?: string, filtros_data_fim?: string, options?: any) {
        return ProdutoServiceApiFp(this.configuration).movimentosAdminResumeDetails(page_number, page_size, entidade_uuid, filtros_unidade_uuid, filtros_tipo, filtros_data_inicio, filtros_data_fim, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierSearchProdutosRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProdutoServiceApi
     */
    public search(body: UnitrierSearchProdutosRequest, options?: any) {
        return ProdutoServiceApiFp(this.configuration).search(body, options)(this.fetch, this.basePath);
    }

}

/**
 * RelatorioServiceApi - fetch parameter creator
 * @export
 */
export const RelatorioServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UnitrierRelatorioPricingCompetitividadeComparativoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pricingCompetitividadeComparativo(body: UnitrierRelatorioPricingCompetitividadeComparativoRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling pricingCompetitividadeComparativo.');
            }
            const localVarPath = `/relatorios/pricing/competitividade/comparativo`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierRelatorioPricingCompetitividadeComparativoRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Relatório com a apresentação dos produtos presentes na pesquisa.
         * @param {UnitrierRelatorioPricingCompetitividadeProdutosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pricingCompetitividadeProdutos(body: UnitrierRelatorioPricingCompetitividadeProdutosRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling pricingCompetitividadeProdutos.');
            }
            const localVarPath = `/relatorios/pricing/competitividade/produtos`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierRelatorioPricingCompetitividadeProdutosRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierRelatorioPricingPrecificacaoPrecosAlteradosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pricingPrecificacaoPrecosAlterados(body: UnitrierRelatorioPricingPrecificacaoPrecosAlteradosRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling pricingPrecificacaoPrecosAlterados.');
            }
            const localVarPath = `/relatorios/pricing/precificacao/precos-alterados`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierRelatorioPricingPrecificacaoPrecosAlteradosRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierRelatorioPricingPrecificacaoProdutosLucroAtualABaixoMinimoIdealRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pricingPrecificacaoProdutosLucroAtualABaixoMinimoIdeal(body: UnitrierRelatorioPricingPrecificacaoProdutosLucroAtualABaixoMinimoIdealRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling pricingPrecificacaoProdutosLucroAtualABaixoMinimoIdeal.');
            }
            const localVarPath = `/relatorios/pricing/precificacao/produtos-lucro-abaixo-minimo-ideal`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierRelatorioPricingPrecificacaoProdutosLucroAtualABaixoMinimoIdealRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierRelatorioPricingWorkflowProdutosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pricingWorkflowProdutos(body: UnitrierRelatorioPricingWorkflowProdutosRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling pricingWorkflowProdutos.');
            }
            const localVarPath = `/relatorios/pricing/workflow/produtos`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierRelatorioPricingWorkflowProdutosRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierRelatorioPricingWorkflowStatusRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pricingWorkflowStatus(body: UnitrierRelatorioPricingWorkflowStatusRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling pricingWorkflowStatus.');
            }
            const localVarPath = `/relatorios/pricing/workflow/status`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierRelatorioPricingWorkflowStatusRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RelatorioServiceApi - functional programming interface
 * @export
 */
export const RelatorioServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UnitrierRelatorioPricingCompetitividadeComparativoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pricingCompetitividadeComparativo(body: UnitrierRelatorioPricingCompetitividadeComparativoRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProtobufAny> {
            const localVarFetchArgs = RelatorioServiceApiFetchParamCreator(configuration).pricingCompetitividadeComparativo(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Relatório com a apresentação dos produtos presentes na pesquisa.
         * @param {UnitrierRelatorioPricingCompetitividadeProdutosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pricingCompetitividadeProdutos(body: UnitrierRelatorioPricingCompetitividadeProdutosRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProtobufAny> {
            const localVarFetchArgs = RelatorioServiceApiFetchParamCreator(configuration).pricingCompetitividadeProdutos(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierRelatorioPricingPrecificacaoPrecosAlteradosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pricingPrecificacaoPrecosAlterados(body: UnitrierRelatorioPricingPrecificacaoPrecosAlteradosRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProtobufAny> {
            const localVarFetchArgs = RelatorioServiceApiFetchParamCreator(configuration).pricingPrecificacaoPrecosAlterados(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierRelatorioPricingPrecificacaoProdutosLucroAtualABaixoMinimoIdealRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pricingPrecificacaoProdutosLucroAtualABaixoMinimoIdeal(body: UnitrierRelatorioPricingPrecificacaoProdutosLucroAtualABaixoMinimoIdealRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProtobufAny> {
            const localVarFetchArgs = RelatorioServiceApiFetchParamCreator(configuration).pricingPrecificacaoProdutosLucroAtualABaixoMinimoIdeal(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierRelatorioPricingWorkflowProdutosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pricingWorkflowProdutos(body: UnitrierRelatorioPricingWorkflowProdutosRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProtobufAny> {
            const localVarFetchArgs = RelatorioServiceApiFetchParamCreator(configuration).pricingWorkflowProdutos(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierRelatorioPricingWorkflowStatusRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pricingWorkflowStatus(body: UnitrierRelatorioPricingWorkflowStatusRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProtobufAny> {
            const localVarFetchArgs = RelatorioServiceApiFetchParamCreator(configuration).pricingWorkflowStatus(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * RelatorioServiceApi - factory interface
 * @export
 */
export const RelatorioServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {UnitrierRelatorioPricingCompetitividadeComparativoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pricingCompetitividadeComparativo(body: UnitrierRelatorioPricingCompetitividadeComparativoRequest, options?: any) {
            return RelatorioServiceApiFp(configuration).pricingCompetitividadeComparativo(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Relatório com a apresentação dos produtos presentes na pesquisa.
         * @param {UnitrierRelatorioPricingCompetitividadeProdutosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pricingCompetitividadeProdutos(body: UnitrierRelatorioPricingCompetitividadeProdutosRequest, options?: any) {
            return RelatorioServiceApiFp(configuration).pricingCompetitividadeProdutos(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierRelatorioPricingPrecificacaoPrecosAlteradosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pricingPrecificacaoPrecosAlterados(body: UnitrierRelatorioPricingPrecificacaoPrecosAlteradosRequest, options?: any) {
            return RelatorioServiceApiFp(configuration).pricingPrecificacaoPrecosAlterados(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierRelatorioPricingPrecificacaoProdutosLucroAtualABaixoMinimoIdealRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pricingPrecificacaoProdutosLucroAtualABaixoMinimoIdeal(body: UnitrierRelatorioPricingPrecificacaoProdutosLucroAtualABaixoMinimoIdealRequest, options?: any) {
            return RelatorioServiceApiFp(configuration).pricingPrecificacaoProdutosLucroAtualABaixoMinimoIdeal(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierRelatorioPricingWorkflowProdutosRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pricingWorkflowProdutos(body: UnitrierRelatorioPricingWorkflowProdutosRequest, options?: any) {
            return RelatorioServiceApiFp(configuration).pricingWorkflowProdutos(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierRelatorioPricingWorkflowStatusRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pricingWorkflowStatus(body: UnitrierRelatorioPricingWorkflowStatusRequest, options?: any) {
            return RelatorioServiceApiFp(configuration).pricingWorkflowStatus(body, options)(fetch, basePath);
        },
    };
};

/**
 * RelatorioServiceApi - object-oriented interface
 * @export
 * @class RelatorioServiceApi
 * @extends {BaseAPI}
 */
export class RelatorioServiceApi extends BaseAPI {
    /**
     * 
     * @param {UnitrierRelatorioPricingCompetitividadeComparativoRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelatorioServiceApi
     */
    public pricingCompetitividadeComparativo(body: UnitrierRelatorioPricingCompetitividadeComparativoRequest, options?: any) {
        return RelatorioServiceApiFp(this.configuration).pricingCompetitividadeComparativo(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Relatório com a apresentação dos produtos presentes na pesquisa.
     * @param {UnitrierRelatorioPricingCompetitividadeProdutosRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelatorioServiceApi
     */
    public pricingCompetitividadeProdutos(body: UnitrierRelatorioPricingCompetitividadeProdutosRequest, options?: any) {
        return RelatorioServiceApiFp(this.configuration).pricingCompetitividadeProdutos(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierRelatorioPricingPrecificacaoPrecosAlteradosRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelatorioServiceApi
     */
    public pricingPrecificacaoPrecosAlterados(body: UnitrierRelatorioPricingPrecificacaoPrecosAlteradosRequest, options?: any) {
        return RelatorioServiceApiFp(this.configuration).pricingPrecificacaoPrecosAlterados(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierRelatorioPricingPrecificacaoProdutosLucroAtualABaixoMinimoIdealRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelatorioServiceApi
     */
    public pricingPrecificacaoProdutosLucroAtualABaixoMinimoIdeal(body: UnitrierRelatorioPricingPrecificacaoProdutosLucroAtualABaixoMinimoIdealRequest, options?: any) {
        return RelatorioServiceApiFp(this.configuration).pricingPrecificacaoProdutosLucroAtualABaixoMinimoIdeal(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierRelatorioPricingWorkflowProdutosRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelatorioServiceApi
     */
    public pricingWorkflowProdutos(body: UnitrierRelatorioPricingWorkflowProdutosRequest, options?: any) {
        return RelatorioServiceApiFp(this.configuration).pricingWorkflowProdutos(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierRelatorioPricingWorkflowStatusRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelatorioServiceApi
     */
    public pricingWorkflowStatus(body: UnitrierRelatorioPricingWorkflowStatusRequest, options?: any) {
        return RelatorioServiceApiFp(this.configuration).pricingWorkflowStatus(body, options)(this.fetch, this.basePath);
    }

}

/**
 * TipoPesquisaServiceApi - fetch parameter creator
 * @export
 */
export const TipoPesquisaServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UnitrierTipoPesquisa} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: UnitrierTipoPesquisa, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create.');
            }
            const localVarPath = `/tipos-pesquisa`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierTipoPesquisa" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(uuid: string, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling get.');
            }
            const localVarPath = `/tipos-pesquisa/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSugestaoProdutos(uuid: string, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling getSugestaoProdutos.');
            }
            const localVarPath = `/tipos-pesquisa/{uuid}/sugestao-produtos`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options: any = {}): FetchArgs {
            const localVarPath = `/tipos-pesquisa`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierTipoPesquisa} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(uuid: string, body: UnitrierTipoPesquisa, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling update.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling update.');
            }
            const localVarPath = `/tipos-pesquisa/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierTipoPesquisa" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TipoPesquisaServiceApi - functional programming interface
 * @export
 */
export const TipoPesquisaServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UnitrierTipoPesquisa} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: UnitrierTipoPesquisa, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierTipoPesquisa> {
            const localVarFetchArgs = TipoPesquisaServiceApiFetchParamCreator(configuration).create(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(uuid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierTipoPesquisa> {
            const localVarFetchArgs = TipoPesquisaServiceApiFetchParamCreator(configuration).get(uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSugestaoProdutos(uuid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierGetSugestaoProdutosTipoPesquisaResponse> {
            const localVarFetchArgs = TipoPesquisaServiceApiFetchParamCreator(configuration).getSugestaoProdutos(uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListTipoPesquisaResponse> {
            const localVarFetchArgs = TipoPesquisaServiceApiFetchParamCreator(configuration).list(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierTipoPesquisa} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(uuid: string, body: UnitrierTipoPesquisa, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierTipoPesquisa> {
            const localVarFetchArgs = TipoPesquisaServiceApiFetchParamCreator(configuration).update(uuid, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TipoPesquisaServiceApi - factory interface
 * @export
 */
export const TipoPesquisaServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {UnitrierTipoPesquisa} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: UnitrierTipoPesquisa, options?: any) {
            return TipoPesquisaServiceApiFp(configuration).create(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(uuid: string, options?: any) {
            return TipoPesquisaServiceApiFp(configuration).get(uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSugestaoProdutos(uuid: string, options?: any) {
            return TipoPesquisaServiceApiFp(configuration).getSugestaoProdutos(uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: any) {
            return TipoPesquisaServiceApiFp(configuration).list(options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierTipoPesquisa} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(uuid: string, body: UnitrierTipoPesquisa, options?: any) {
            return TipoPesquisaServiceApiFp(configuration).update(uuid, body, options)(fetch, basePath);
        },
    };
};

/**
 * TipoPesquisaServiceApi - object-oriented interface
 * @export
 * @class TipoPesquisaServiceApi
 * @extends {BaseAPI}
 */
export class TipoPesquisaServiceApi extends BaseAPI {
    /**
     * 
     * @param {UnitrierTipoPesquisa} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoPesquisaServiceApi
     */
    public create(body: UnitrierTipoPesquisa, options?: any) {
        return TipoPesquisaServiceApiFp(this.configuration).create(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoPesquisaServiceApi
     */
    public get(uuid: string, options?: any) {
        return TipoPesquisaServiceApiFp(this.configuration).get(uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoPesquisaServiceApi
     */
    public getSugestaoProdutos(uuid: string, options?: any) {
        return TipoPesquisaServiceApiFp(this.configuration).getSugestaoProdutos(uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoPesquisaServiceApi
     */
    public list(options?: any) {
        return TipoPesquisaServiceApiFp(this.configuration).list(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} uuid 
     * @param {UnitrierTipoPesquisa} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TipoPesquisaServiceApi
     */
    public update(uuid: string, body: UnitrierTipoPesquisa, options?: any) {
        return TipoPesquisaServiceApiFp(this.configuration).update(uuid, body, options)(this.fetch, this.basePath);
    }

}

/**
 * UnidadeServiceApi - fetch parameter creator
 * @export
 */
export const UnidadeServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options: any = {}): FetchArgs {
            const localVarPath = `/unidades`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {string} [entidade_uuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdmin(page_number?: number, page_size?: number, entidade_uuid?: string, options: any = {}): FetchArgs {
            const localVarPath = `/admin/unidades`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (page_number !== undefined) {
                localVarQueryParameter['page_number'] = page_number;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }

            if (entidade_uuid !== undefined) {
                localVarQueryParameter['entidade_uuid'] = entidade_uuid;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} usuario_uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unidadesUsuario(usuario_uuid: string, options: any = {}): FetchArgs {
            // verify required parameter 'usuario_uuid' is not null or undefined
            if (usuario_uuid === null || usuario_uuid === undefined) {
                throw new RequiredError('usuario_uuid','Required parameter usuario_uuid was null or undefined when calling unidadesUsuario.');
            }
            const localVarPath = `/unidades/usuario/{usuario_uuid}`
                .replace(`{${"usuario_uuid"}}`, encodeURIComponent(String(usuario_uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierUpdateTabelaAjustePrecoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTabelaAjustePreco(uuid: string, body: UnitrierUpdateTabelaAjustePrecoRequest, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling updateTabelaAjustePreco.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateTabelaAjustePreco.');
            }
            const localVarPath = `/unidades/{uuid}:updateTabelaAjustePreco`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierUpdateTabelaAjustePrecoRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} usuario_uuid 
         * @param {UnitrierUpdateUsuarioUnidadesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsuario(usuario_uuid: string, body: UnitrierUpdateUsuarioUnidadesRequest, options: any = {}): FetchArgs {
            // verify required parameter 'usuario_uuid' is not null or undefined
            if (usuario_uuid === null || usuario_uuid === undefined) {
                throw new RequiredError('usuario_uuid','Required parameter usuario_uuid was null or undefined when calling updateUsuario.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateUsuario.');
            }
            const localVarPath = `/unidades/usuario/{usuario_uuid}`
                .replace(`{${"usuario_uuid"}}`, encodeURIComponent(String(usuario_uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierUpdateUsuarioUnidadesRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UnidadeServiceApi - functional programming interface
 * @export
 */
export const UnidadeServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListUnidadesResponse> {
            const localVarFetchArgs = UnidadeServiceApiFetchParamCreator(configuration).list(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {string} [entidade_uuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdmin(page_number?: number, page_size?: number, entidade_uuid?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListUnidadesAdminResponse> {
            const localVarFetchArgs = UnidadeServiceApiFetchParamCreator(configuration).listAdmin(page_number, page_size, entidade_uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} usuario_uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unidadesUsuario(usuario_uuid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListUnidadesResponse> {
            const localVarFetchArgs = UnidadeServiceApiFetchParamCreator(configuration).unidadesUsuario(usuario_uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierUpdateTabelaAjustePrecoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTabelaAjustePreco(uuid: string, body: UnitrierUpdateTabelaAjustePrecoRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = UnidadeServiceApiFetchParamCreator(configuration).updateTabelaAjustePreco(uuid, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} usuario_uuid 
         * @param {UnitrierUpdateUsuarioUnidadesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsuario(usuario_uuid: string, body: UnitrierUpdateUsuarioUnidadesRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = UnidadeServiceApiFetchParamCreator(configuration).updateUsuario(usuario_uuid, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UnidadeServiceApi - factory interface
 * @export
 */
export const UnidadeServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: any) {
            return UnidadeServiceApiFp(configuration).list(options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {string} [entidade_uuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdmin(page_number?: number, page_size?: number, entidade_uuid?: string, options?: any) {
            return UnidadeServiceApiFp(configuration).listAdmin(page_number, page_size, entidade_uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} usuario_uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unidadesUsuario(usuario_uuid: string, options?: any) {
            return UnidadeServiceApiFp(configuration).unidadesUsuario(usuario_uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UnitrierUpdateTabelaAjustePrecoRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTabelaAjustePreco(uuid: string, body: UnitrierUpdateTabelaAjustePrecoRequest, options?: any) {
            return UnidadeServiceApiFp(configuration).updateTabelaAjustePreco(uuid, body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} usuario_uuid 
         * @param {UnitrierUpdateUsuarioUnidadesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsuario(usuario_uuid: string, body: UnitrierUpdateUsuarioUnidadesRequest, options?: any) {
            return UnidadeServiceApiFp(configuration).updateUsuario(usuario_uuid, body, options)(fetch, basePath);
        },
    };
};

/**
 * UnidadeServiceApi - object-oriented interface
 * @export
 * @class UnidadeServiceApi
 * @extends {BaseAPI}
 */
export class UnidadeServiceApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnidadeServiceApi
     */
    public list(options?: any) {
        return UnidadeServiceApiFp(this.configuration).list(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [page_number] 
     * @param {number} [page_size] 
     * @param {string} [entidade_uuid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnidadeServiceApi
     */
    public listAdmin(page_number?: number, page_size?: number, entidade_uuid?: string, options?: any) {
        return UnidadeServiceApiFp(this.configuration).listAdmin(page_number, page_size, entidade_uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} usuario_uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnidadeServiceApi
     */
    public unidadesUsuario(usuario_uuid: string, options?: any) {
        return UnidadeServiceApiFp(this.configuration).unidadesUsuario(usuario_uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} uuid 
     * @param {UnitrierUpdateTabelaAjustePrecoRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnidadeServiceApi
     */
    public updateTabelaAjustePreco(uuid: string, body: UnitrierUpdateTabelaAjustePrecoRequest, options?: any) {
        return UnidadeServiceApiFp(this.configuration).updateTabelaAjustePreco(uuid, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} usuario_uuid 
     * @param {UnitrierUpdateUsuarioUnidadesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnidadeServiceApi
     */
    public updateUsuario(usuario_uuid: string, body: UnitrierUpdateUsuarioUnidadesRequest, options?: any) {
        return UnidadeServiceApiFp(this.configuration).updateUsuario(usuario_uuid, body, options)(this.fetch, this.basePath);
    }

}

/**
 * UsuarioServiceApi - fetch parameter creator
 * @export
 */
export const UsuarioServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(uuid: string, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling _delete.');
            }
            const localVarPath = `/usuarios/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierAlterarSenhaUsuarioRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alterarSenha(body: UnitrierAlterarSenhaUsuarioRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling alterarSenha.');
            }
            const localVarPath = `/usuario:alterarSenha`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierAlterarSenhaUsuarioRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierAuthenticateUsuarioRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticate(body: UnitrierAuthenticateUsuarioRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authenticate.');
            }
            const localVarPath = `/usuarios:authenticate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierAuthenticateUsuarioRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierAuthenticateUsuarioRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateAdmin(body: UnitrierAuthenticateUsuarioRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authenticateAdmin.');
            }
            const localVarPath = `/admin/usuarios:authenticate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierAuthenticateUsuarioRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GenerateAPIKey associate an api key to an user
         * @param {UnitrierGenerateAPIKeyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateAPIKey(body: UnitrierGenerateAPIKeyRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling generateAPIKey.');
            }
            const localVarPath = `/admin/usuarios/apikey/generate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierGenerateAPIKeyRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsuario(uuid: string, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling getUsuario.');
            }
            const localVarPath = `/usuarios/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsuarioAdmin(email: string, options: any = {}): FetchArgs {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling getUsuarioAdmin.');
            }
            const localVarPath = `/usuario/admin/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsuarioByEmail(email?: string, options: any = {}): FetchArgs {
            const localVarPath = `/usuarios:getByEmail`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options: any = {}): FetchArgs {
            const localVarPath = `/usuarios`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ListAPIKeys returns all api keys for all user from an 'entidade'
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAPIKeys(uuid: string, options: any = {}): FetchArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling listAPIKeys.');
            }
            const localVarPath = `/admin/usuarios/{uuid}/apikey`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdmin(page_number?: number, page_size?: number, options: any = {}): FetchArgs {
            const localVarPath = `/admin/usuarios`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (page_number !== undefined) {
                localVarQueryParameter['page_number'] = page_number;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierRegisterUsuarioRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(body: UnitrierRegisterUsuarioRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling register.');
            }
            const localVarPath = `/usuarios`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierRegisterUsuarioRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierRegisterUsuarioAdminRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAdmin(body: UnitrierRegisterUsuarioAdminRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling registerAdmin.');
            }
            const localVarPath = `/admin/usuarios`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierRegisterUsuarioAdminRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAdmin(email?: string, options: any = {}): FetchArgs {
            const localVarPath = `/admin/usuarios`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierUpdateUsuarioRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(body: UnitrierUpdateUsuarioRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling update.');
            }
            const localVarPath = `/usuarios`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierUpdateUsuarioRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierUpdateUsuarioAdminRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdmin(body: UnitrierUpdateUsuarioAdminRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateAdmin.');
            }
            const localVarPath = `/usuario/admin`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierUpdateUsuarioAdminRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioAdminLogado(options: any = {}): FetchArgs {
            const localVarPath = `/usuario/admin`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioLogado(options: any = {}): FetchArgs {
            const localVarPath = `/usuario`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UnitrierVincularUsuarioEntidadeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vincularEntidade(body: UnitrierVincularUsuarioEntidadeRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling vincularEntidade.');
            }
            const localVarPath = `/usuario:vincularEntidade`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API_KEY required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UnitrierVincularUsuarioEntidadeRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsuarioServiceApi - functional programming interface
 * @export
 */
export const UsuarioServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(uuid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = UsuarioServiceApiFetchParamCreator(configuration)._delete(uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierAlterarSenhaUsuarioRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alterarSenha(body: UnitrierAlterarSenhaUsuarioRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierAlterarSenhaUsuarioResponse> {
            const localVarFetchArgs = UsuarioServiceApiFetchParamCreator(configuration).alterarSenha(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierAuthenticateUsuarioRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticate(body: UnitrierAuthenticateUsuarioRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierAuthenticateUsuarioResponse> {
            const localVarFetchArgs = UsuarioServiceApiFetchParamCreator(configuration).authenticate(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierAuthenticateUsuarioRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateAdmin(body: UnitrierAuthenticateUsuarioRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierAuthenticateUsuarioResponse> {
            const localVarFetchArgs = UsuarioServiceApiFetchParamCreator(configuration).authenticateAdmin(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary GenerateAPIKey associate an api key to an user
         * @param {UnitrierGenerateAPIKeyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateAPIKey(body: UnitrierGenerateAPIKeyRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierGenerateAPIKeyResponse> {
            const localVarFetchArgs = UsuarioServiceApiFetchParamCreator(configuration).generateAPIKey(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsuario(uuid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierUsuario> {
            const localVarFetchArgs = UsuarioServiceApiFetchParamCreator(configuration).getUsuario(uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsuarioAdmin(email: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierUsuarioLogadoResponse> {
            const localVarFetchArgs = UsuarioServiceApiFetchParamCreator(configuration).getUsuarioAdmin(email, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsuarioByEmail(email?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierUsuario> {
            const localVarFetchArgs = UsuarioServiceApiFetchParamCreator(configuration).getUsuarioByEmail(email, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListUsuariosResponse> {
            const localVarFetchArgs = UsuarioServiceApiFetchParamCreator(configuration).list(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary ListAPIKeys returns all api keys for all user from an 'entidade'
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAPIKeys(uuid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListAPIKeysResponse> {
            const localVarFetchArgs = UsuarioServiceApiFetchParamCreator(configuration).listAPIKeys(uuid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdmin(page_number?: number, page_size?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierListAdminResponse> {
            const localVarFetchArgs = UsuarioServiceApiFetchParamCreator(configuration).listAdmin(page_number, page_size, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierRegisterUsuarioRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(body: UnitrierRegisterUsuarioRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierUsuario> {
            const localVarFetchArgs = UsuarioServiceApiFetchParamCreator(configuration).register(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierRegisterUsuarioAdminRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAdmin(body: UnitrierRegisterUsuarioAdminRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = UsuarioServiceApiFetchParamCreator(configuration).registerAdmin(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAdmin(email?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = UsuarioServiceApiFetchParamCreator(configuration).removeAdmin(email, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierUpdateUsuarioRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(body: UnitrierUpdateUsuarioRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = UsuarioServiceApiFetchParamCreator(configuration).update(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierUpdateUsuarioAdminRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdmin(body: UnitrierUpdateUsuarioAdminRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = UsuarioServiceApiFetchParamCreator(configuration).updateAdmin(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioAdminLogado(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierUsuarioLogadoResponse> {
            const localVarFetchArgs = UsuarioServiceApiFetchParamCreator(configuration).usuarioAdminLogado(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioLogado(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnitrierUsuarioLogadoResponse> {
            const localVarFetchArgs = UsuarioServiceApiFetchParamCreator(configuration).usuarioLogado(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UnitrierVincularUsuarioEntidadeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vincularEntidade(body: UnitrierVincularUsuarioEntidadeRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = UsuarioServiceApiFetchParamCreator(configuration).vincularEntidade(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UsuarioServiceApi - factory interface
 * @export
 */
export const UsuarioServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(uuid: string, options?: any) {
            return UsuarioServiceApiFp(configuration)._delete(uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierAlterarSenhaUsuarioRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alterarSenha(body: UnitrierAlterarSenhaUsuarioRequest, options?: any) {
            return UsuarioServiceApiFp(configuration).alterarSenha(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierAuthenticateUsuarioRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticate(body: UnitrierAuthenticateUsuarioRequest, options?: any) {
            return UsuarioServiceApiFp(configuration).authenticate(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierAuthenticateUsuarioRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateAdmin(body: UnitrierAuthenticateUsuarioRequest, options?: any) {
            return UsuarioServiceApiFp(configuration).authenticateAdmin(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary GenerateAPIKey associate an api key to an user
         * @param {UnitrierGenerateAPIKeyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateAPIKey(body: UnitrierGenerateAPIKeyRequest, options?: any) {
            return UsuarioServiceApiFp(configuration).generateAPIKey(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsuario(uuid: string, options?: any) {
            return UsuarioServiceApiFp(configuration).getUsuario(uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsuarioAdmin(email: string, options?: any) {
            return UsuarioServiceApiFp(configuration).getUsuarioAdmin(email, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsuarioByEmail(email?: string, options?: any) {
            return UsuarioServiceApiFp(configuration).getUsuarioByEmail(email, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: any) {
            return UsuarioServiceApiFp(configuration).list(options)(fetch, basePath);
        },
        /**
         * 
         * @summary ListAPIKeys returns all api keys for all user from an 'entidade'
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAPIKeys(uuid: string, options?: any) {
            return UsuarioServiceApiFp(configuration).listAPIKeys(uuid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [page_number] 
         * @param {number} [page_size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdmin(page_number?: number, page_size?: number, options?: any) {
            return UsuarioServiceApiFp(configuration).listAdmin(page_number, page_size, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierRegisterUsuarioRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(body: UnitrierRegisterUsuarioRequest, options?: any) {
            return UsuarioServiceApiFp(configuration).register(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierRegisterUsuarioAdminRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAdmin(body: UnitrierRegisterUsuarioAdminRequest, options?: any) {
            return UsuarioServiceApiFp(configuration).registerAdmin(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAdmin(email?: string, options?: any) {
            return UsuarioServiceApiFp(configuration).removeAdmin(email, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierUpdateUsuarioRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(body: UnitrierUpdateUsuarioRequest, options?: any) {
            return UsuarioServiceApiFp(configuration).update(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierUpdateUsuarioAdminRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdmin(body: UnitrierUpdateUsuarioAdminRequest, options?: any) {
            return UsuarioServiceApiFp(configuration).updateAdmin(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioAdminLogado(options?: any) {
            return UsuarioServiceApiFp(configuration).usuarioAdminLogado(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usuarioLogado(options?: any) {
            return UsuarioServiceApiFp(configuration).usuarioLogado(options)(fetch, basePath);
        },
        /**
         * 
         * @param {UnitrierVincularUsuarioEntidadeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vincularEntidade(body: UnitrierVincularUsuarioEntidadeRequest, options?: any) {
            return UsuarioServiceApiFp(configuration).vincularEntidade(body, options)(fetch, basePath);
        },
    };
};

/**
 * UsuarioServiceApi - object-oriented interface
 * @export
 * @class UsuarioServiceApi
 * @extends {BaseAPI}
 */
export class UsuarioServiceApi extends BaseAPI {
    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioServiceApi
     */
    public _delete(uuid: string, options?: any) {
        return UsuarioServiceApiFp(this.configuration)._delete(uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierAlterarSenhaUsuarioRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioServiceApi
     */
    public alterarSenha(body: UnitrierAlterarSenhaUsuarioRequest, options?: any) {
        return UsuarioServiceApiFp(this.configuration).alterarSenha(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierAuthenticateUsuarioRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioServiceApi
     */
    public authenticate(body: UnitrierAuthenticateUsuarioRequest, options?: any) {
        return UsuarioServiceApiFp(this.configuration).authenticate(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierAuthenticateUsuarioRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioServiceApi
     */
    public authenticateAdmin(body: UnitrierAuthenticateUsuarioRequest, options?: any) {
        return UsuarioServiceApiFp(this.configuration).authenticateAdmin(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary GenerateAPIKey associate an api key to an user
     * @param {UnitrierGenerateAPIKeyRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioServiceApi
     */
    public generateAPIKey(body: UnitrierGenerateAPIKeyRequest, options?: any) {
        return UsuarioServiceApiFp(this.configuration).generateAPIKey(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioServiceApi
     */
    public getUsuario(uuid: string, options?: any) {
        return UsuarioServiceApiFp(this.configuration).getUsuario(uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioServiceApi
     */
    public getUsuarioAdmin(email: string, options?: any) {
        return UsuarioServiceApiFp(this.configuration).getUsuarioAdmin(email, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [email] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioServiceApi
     */
    public getUsuarioByEmail(email?: string, options?: any) {
        return UsuarioServiceApiFp(this.configuration).getUsuarioByEmail(email, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioServiceApi
     */
    public list(options?: any) {
        return UsuarioServiceApiFp(this.configuration).list(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary ListAPIKeys returns all api keys for all user from an 'entidade'
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioServiceApi
     */
    public listAPIKeys(uuid: string, options?: any) {
        return UsuarioServiceApiFp(this.configuration).listAPIKeys(uuid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [page_number] 
     * @param {number} [page_size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioServiceApi
     */
    public listAdmin(page_number?: number, page_size?: number, options?: any) {
        return UsuarioServiceApiFp(this.configuration).listAdmin(page_number, page_size, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierRegisterUsuarioRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioServiceApi
     */
    public register(body: UnitrierRegisterUsuarioRequest, options?: any) {
        return UsuarioServiceApiFp(this.configuration).register(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierRegisterUsuarioAdminRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioServiceApi
     */
    public registerAdmin(body: UnitrierRegisterUsuarioAdminRequest, options?: any) {
        return UsuarioServiceApiFp(this.configuration).registerAdmin(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [email] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioServiceApi
     */
    public removeAdmin(email?: string, options?: any) {
        return UsuarioServiceApiFp(this.configuration).removeAdmin(email, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierUpdateUsuarioRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioServiceApi
     */
    public update(body: UnitrierUpdateUsuarioRequest, options?: any) {
        return UsuarioServiceApiFp(this.configuration).update(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierUpdateUsuarioAdminRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioServiceApi
     */
    public updateAdmin(body: UnitrierUpdateUsuarioAdminRequest, options?: any) {
        return UsuarioServiceApiFp(this.configuration).updateAdmin(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioServiceApi
     */
    public usuarioAdminLogado(options?: any) {
        return UsuarioServiceApiFp(this.configuration).usuarioAdminLogado(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioServiceApi
     */
    public usuarioLogado(options?: any) {
        return UsuarioServiceApiFp(this.configuration).usuarioLogado(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UnitrierVincularUsuarioEntidadeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsuarioServiceApi
     */
    public vincularEntidade(body: UnitrierVincularUsuarioEntidadeRequest, options?: any) {
        return UsuarioServiceApiFp(this.configuration).vincularEntidade(body, options)(this.fetch, this.basePath);
    }

}

